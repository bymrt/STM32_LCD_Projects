
5110.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007978  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08007b18  08007b18  00017b18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080f4  080080f4  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080080f4  080080f4  000180f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080fc  080080fc  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080fc  080080fc  000180fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008100  08008100  00018100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08008104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  200001d4  080082d8  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080082d8  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000aa71  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001eed  00000000  00000000  0002acb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000aa0  00000000  00000000  0002cba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081b  00000000  00000000  0002d648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016c63  00000000  00000000  0002de63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da7b  00000000  00000000  00044ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008888f  00000000  00000000  00052541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c94  00000000  00000000  000dadd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000dea64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b00 	.word	0x08007b00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007b00 	.word	0x08007b00

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b970 	b.w	8000f50 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9e08      	ldr	r6, [sp, #32]
 8000c8e:	460d      	mov	r5, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	460f      	mov	r7, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4694      	mov	ip, r2
 8000c9c:	d965      	bls.n	8000d6a <__udivmoddi4+0xe2>
 8000c9e:	fab2 f382 	clz	r3, r2
 8000ca2:	b143      	cbz	r3, 8000cb6 <__udivmoddi4+0x2e>
 8000ca4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca8:	f1c3 0220 	rsb	r2, r3, #32
 8000cac:	409f      	lsls	r7, r3
 8000cae:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb2:	4317      	orrs	r7, r2
 8000cb4:	409c      	lsls	r4, r3
 8000cb6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cba:	fa1f f58c 	uxth.w	r5, ip
 8000cbe:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cc2:	0c22      	lsrs	r2, r4, #16
 8000cc4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cc8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ccc:	fb01 f005 	mul.w	r0, r1, r5
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cdc:	f080 811c 	bcs.w	8000f18 <__udivmoddi4+0x290>
 8000ce0:	4290      	cmp	r0, r2
 8000ce2:	f240 8119 	bls.w	8000f18 <__udivmoddi4+0x290>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	4462      	add	r2, ip
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	b2a4      	uxth	r4, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cfa:	fb00 f505 	mul.w	r5, r0, r5
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	d90a      	bls.n	8000d18 <__udivmoddi4+0x90>
 8000d02:	eb1c 0404 	adds.w	r4, ip, r4
 8000d06:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x294>
 8000d0e:	42a5      	cmp	r5, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x294>
 8000d14:	4464      	add	r4, ip
 8000d16:	3802      	subs	r0, #2
 8000d18:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11e      	cbz	r6, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40dc      	lsrs	r4, r3
 8000d24:	2300      	movs	r3, #0
 8000d26:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0xbc>
 8000d32:	2e00      	cmp	r6, #0
 8000d34:	f000 80ed 	beq.w	8000f12 <__udivmoddi4+0x28a>
 8000d38:	2100      	movs	r1, #0
 8000d3a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d44:	fab3 f183 	clz	r1, r3
 8000d48:	2900      	cmp	r1, #0
 8000d4a:	d149      	bne.n	8000de0 <__udivmoddi4+0x158>
 8000d4c:	42ab      	cmp	r3, r5
 8000d4e:	d302      	bcc.n	8000d56 <__udivmoddi4+0xce>
 8000d50:	4282      	cmp	r2, r0
 8000d52:	f200 80f8 	bhi.w	8000f46 <__udivmoddi4+0x2be>
 8000d56:	1a84      	subs	r4, r0, r2
 8000d58:	eb65 0203 	sbc.w	r2, r5, r3
 8000d5c:	2001      	movs	r0, #1
 8000d5e:	4617      	mov	r7, r2
 8000d60:	2e00      	cmp	r6, #0
 8000d62:	d0e2      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	e9c6 4700 	strd	r4, r7, [r6]
 8000d68:	e7df      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d6a:	b902      	cbnz	r2, 8000d6e <__udivmoddi4+0xe6>
 8000d6c:	deff      	udf	#255	; 0xff
 8000d6e:	fab2 f382 	clz	r3, r2
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	f040 8090 	bne.w	8000e98 <__udivmoddi4+0x210>
 8000d78:	1a8a      	subs	r2, r1, r2
 8000d7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7e:	fa1f fe8c 	uxth.w	lr, ip
 8000d82:	2101      	movs	r1, #1
 8000d84:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d88:	fb07 2015 	mls	r0, r7, r5, r2
 8000d8c:	0c22      	lsrs	r2, r4, #16
 8000d8e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d92:	fb0e f005 	mul.w	r0, lr, r5
 8000d96:	4290      	cmp	r0, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x124>
 8000d9a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d9e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da2:	d202      	bcs.n	8000daa <__udivmoddi4+0x122>
 8000da4:	4290      	cmp	r0, r2
 8000da6:	f200 80cb 	bhi.w	8000f40 <__udivmoddi4+0x2b8>
 8000daa:	4645      	mov	r5, r8
 8000dac:	1a12      	subs	r2, r2, r0
 8000dae:	b2a4      	uxth	r4, r4
 8000db0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000db4:	fb07 2210 	mls	r2, r7, r0, r2
 8000db8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dbc:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x14e>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dcc:	d202      	bcs.n	8000dd4 <__udivmoddi4+0x14c>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	f200 80bb 	bhi.w	8000f4a <__udivmoddi4+0x2c2>
 8000dd4:	4610      	mov	r0, r2
 8000dd6:	eba4 040e 	sub.w	r4, r4, lr
 8000dda:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dde:	e79f      	b.n	8000d20 <__udivmoddi4+0x98>
 8000de0:	f1c1 0720 	rsb	r7, r1, #32
 8000de4:	408b      	lsls	r3, r1
 8000de6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa05 f401 	lsl.w	r4, r5, r1
 8000df2:	fa20 f307 	lsr.w	r3, r0, r7
 8000df6:	40fd      	lsrs	r5, r7
 8000df8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dfc:	4323      	orrs	r3, r4
 8000dfe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e02:	fa1f fe8c 	uxth.w	lr, ip
 8000e06:	fb09 5518 	mls	r5, r9, r8, r5
 8000e0a:	0c1c      	lsrs	r4, r3, #16
 8000e0c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e10:	fb08 f50e 	mul.w	r5, r8, lr
 8000e14:	42a5      	cmp	r5, r4
 8000e16:	fa02 f201 	lsl.w	r2, r2, r1
 8000e1a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e1e:	d90b      	bls.n	8000e38 <__udivmoddi4+0x1b0>
 8000e20:	eb1c 0404 	adds.w	r4, ip, r4
 8000e24:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e28:	f080 8088 	bcs.w	8000f3c <__udivmoddi4+0x2b4>
 8000e2c:	42a5      	cmp	r5, r4
 8000e2e:	f240 8085 	bls.w	8000f3c <__udivmoddi4+0x2b4>
 8000e32:	f1a8 0802 	sub.w	r8, r8, #2
 8000e36:	4464      	add	r4, ip
 8000e38:	1b64      	subs	r4, r4, r5
 8000e3a:	b29d      	uxth	r5, r3
 8000e3c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e40:	fb09 4413 	mls	r4, r9, r3, r4
 8000e44:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e48:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e4c:	45a6      	cmp	lr, r4
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x1da>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e58:	d26c      	bcs.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5a:	45a6      	cmp	lr, r4
 8000e5c:	d96a      	bls.n	8000f34 <__udivmoddi4+0x2ac>
 8000e5e:	3b02      	subs	r3, #2
 8000e60:	4464      	add	r4, ip
 8000e62:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e66:	fba3 9502 	umull	r9, r5, r3, r2
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	46c8      	mov	r8, r9
 8000e72:	46ae      	mov	lr, r5
 8000e74:	d356      	bcc.n	8000f24 <__udivmoddi4+0x29c>
 8000e76:	d053      	beq.n	8000f20 <__udivmoddi4+0x298>
 8000e78:	b156      	cbz	r6, 8000e90 <__udivmoddi4+0x208>
 8000e7a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e7e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e82:	fa04 f707 	lsl.w	r7, r4, r7
 8000e86:	40ca      	lsrs	r2, r1
 8000e88:	40cc      	lsrs	r4, r1
 8000e8a:	4317      	orrs	r7, r2
 8000e8c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e90:	4618      	mov	r0, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	f1c3 0120 	rsb	r1, r3, #32
 8000e9c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ea4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ea8:	409d      	lsls	r5, r3
 8000eaa:	432a      	orrs	r2, r5
 8000eac:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb0:	fa1f fe8c 	uxth.w	lr, ip
 8000eb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000eb8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ebc:	0c11      	lsrs	r1, r2, #16
 8000ebe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ec2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ec6:	428d      	cmp	r5, r1
 8000ec8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x258>
 8000ece:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ed6:	d22f      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000ed8:	428d      	cmp	r5, r1
 8000eda:	d92d      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000edc:	3802      	subs	r0, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	1b49      	subs	r1, r1, r5
 8000ee2:	b292      	uxth	r2, r2
 8000ee4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ee8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ef0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ef4:	4291      	cmp	r1, r2
 8000ef6:	d908      	bls.n	8000f0a <__udivmoddi4+0x282>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f00:	d216      	bcs.n	8000f30 <__udivmoddi4+0x2a8>
 8000f02:	4291      	cmp	r1, r2
 8000f04:	d914      	bls.n	8000f30 <__udivmoddi4+0x2a8>
 8000f06:	3d02      	subs	r5, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	1a52      	subs	r2, r2, r1
 8000f0c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f10:	e738      	b.n	8000d84 <__udivmoddi4+0xfc>
 8000f12:	4631      	mov	r1, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000f18:	4639      	mov	r1, r7
 8000f1a:	e6e6      	b.n	8000cea <__udivmoddi4+0x62>
 8000f1c:	4610      	mov	r0, r2
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x90>
 8000f20:	4548      	cmp	r0, r9
 8000f22:	d2a9      	bcs.n	8000e78 <__udivmoddi4+0x1f0>
 8000f24:	ebb9 0802 	subs.w	r8, r9, r2
 8000f28:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	e7a3      	b.n	8000e78 <__udivmoddi4+0x1f0>
 8000f30:	4645      	mov	r5, r8
 8000f32:	e7ea      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f34:	462b      	mov	r3, r5
 8000f36:	e794      	b.n	8000e62 <__udivmoddi4+0x1da>
 8000f38:	4640      	mov	r0, r8
 8000f3a:	e7d1      	b.n	8000ee0 <__udivmoddi4+0x258>
 8000f3c:	46d0      	mov	r8, sl
 8000f3e:	e77b      	b.n	8000e38 <__udivmoddi4+0x1b0>
 8000f40:	3d02      	subs	r5, #2
 8000f42:	4462      	add	r2, ip
 8000f44:	e732      	b.n	8000dac <__udivmoddi4+0x124>
 8000f46:	4608      	mov	r0, r1
 8000f48:	e70a      	b.n	8000d60 <__udivmoddi4+0xd8>
 8000f4a:	4464      	add	r4, ip
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	e742      	b.n	8000dd6 <__udivmoddi4+0x14e>

08000f50 <__aeabi_idiv0>:
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop

08000f54 <Nokia5110_Init>:




bool Nokia5110_Init(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
	Nokia5110_Reset();
 8000f58:	f000 f83e 	bl	8000fd8 <Nokia5110_Reset>
	//ekranı veri data alımı icin hazir hale getirir
	Nokia5110_Write(0x21, 0);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	2021      	movs	r0, #33	; 0x21
 8000f60:	f000 f84e 	bl	8001000 <Nokia5110_Write>
	Nokia5110_Write(0xC0, 0);
 8000f64:	2100      	movs	r1, #0
 8000f66:	20c0      	movs	r0, #192	; 0xc0
 8000f68:	f000 f84a 	bl	8001000 <Nokia5110_Write>
	Nokia5110_Write(0x07, 0);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	2007      	movs	r0, #7
 8000f70:	f000 f846 	bl	8001000 <Nokia5110_Write>
	Nokia5110_Write(0x13, 0);
 8000f74:	2100      	movs	r1, #0
 8000f76:	2013      	movs	r0, #19
 8000f78:	f000 f842 	bl	8001000 <Nokia5110_Write>
	Nokia5110_Write(0x20, 0);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2020      	movs	r0, #32
 8000f80:	f000 f83e 	bl	8001000 <Nokia5110_Write>
	Nokia5110_Write(0x0C, 0);
 8000f84:	2100      	movs	r1, #0
 8000f86:	200c      	movs	r0, #12
 8000f88:	f000 f83a 	bl	8001000 <Nokia5110_Write>
	LCD_Clear();
 8000f8c:	f000 f803 	bl	8000f96 <LCD_Clear>
	return true;
 8000f90:	2301      	movs	r3, #1
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <LCD_Clear>:


void LCD_Clear(void) {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
  uint8_t satir; // satırlar
  uint8_t sutun; // sutunlar
  LCD_Set_Postion(0,0);
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	f000 f8c8 	bl	8001134 <LCD_Set_Postion>
  for(satir=0;satir<6;satir++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	71fb      	strb	r3, [r7, #7]
 8000fa8:	e00e      	b.n	8000fc8 <LCD_Clear+0x32>
  {
    for(sutun=0;sutun<84;sutun++)
 8000faa:	2300      	movs	r3, #0
 8000fac:	71bb      	strb	r3, [r7, #6]
 8000fae:	e005      	b.n	8000fbc <LCD_Clear+0x26>
    {
    	Nokia5110_BufferWrite(0x00); //tum pikselleri resetler
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 f85b 	bl	800106c <Nokia5110_BufferWrite>
    for(sutun=0;sutun<84;sutun++)
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	71bb      	strb	r3, [r7, #6]
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	2b53      	cmp	r3, #83	; 0x53
 8000fc0:	d9f6      	bls.n	8000fb0 <LCD_Clear+0x1a>
  for(satir=0;satir<6;satir++)
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	2b05      	cmp	r3, #5
 8000fcc:	d9ed      	bls.n	8000faa <LCD_Clear+0x14>
    }
  }
}
 8000fce:	bf00      	nop
 8000fd0:	bf00      	nop
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <Nokia5110_Reset>:


void Nokia5110_Reset(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET); // Reset pin is low
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2101      	movs	r1, #1
 8000fe0:	4806      	ldr	r0, [pc, #24]	; (8000ffc <Nokia5110_Reset+0x24>)
 8000fe2:	f001 ff13 	bl	8002e0c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fe6:	2064      	movs	r0, #100	; 0x64
 8000fe8:	f001 f8e6 	bl	80021b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET); // Reset pin is high
 8000fec:	2201      	movs	r2, #1
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <Nokia5110_Reset+0x24>)
 8000ff2:	f001 ff0b 	bl	8002e0c <HAL_GPIO_WritePin>

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40020000 	.word	0x40020000

08001000 <Nokia5110_Write>:




bool Nokia5110_Write(uint8_t data, uint8_t mode)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // CE pin is low
 8001010:	2200      	movs	r2, #0
 8001012:	2104      	movs	r1, #4
 8001014:	4813      	ldr	r0, [pc, #76]	; (8001064 <Nokia5110_Write+0x64>)
 8001016:	f001 fef9 	bl	8002e0c <HAL_GPIO_WritePin>

	if(mode == 0)
 800101a:	79bb      	ldrb	r3, [r7, #6]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d105      	bne.n	800102c <Nokia5110_Write+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // DC pin is low for sending data
 8001020:	2200      	movs	r2, #0
 8001022:	2102      	movs	r1, #2
 8001024:	480f      	ldr	r0, [pc, #60]	; (8001064 <Nokia5110_Write+0x64>)
 8001026:	f001 fef1 	bl	8002e0c <HAL_GPIO_WritePin>
 800102a:	e00f      	b.n	800104c <Nokia5110_Write+0x4c>

	else if (mode == 1)
 800102c:	79bb      	ldrb	r3, [r7, #6]
 800102e:	2b01      	cmp	r3, #1
 8001030:	d105      	bne.n	800103e <Nokia5110_Write+0x3e>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // DC pin is high for command send
 8001032:	2201      	movs	r2, #1
 8001034:	2102      	movs	r1, #2
 8001036:	480b      	ldr	r0, [pc, #44]	; (8001064 <Nokia5110_Write+0x64>)
 8001038:	f001 fee8 	bl	8002e0c <HAL_GPIO_WritePin>
 800103c:	e006      	b.n	800104c <Nokia5110_Write+0x4c>

	else
	{
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET); // CE pin is High
 800103e:	2201      	movs	r2, #1
 8001040:	2104      	movs	r1, #4
 8001042:	4808      	ldr	r0, [pc, #32]	; (8001064 <Nokia5110_Write+0x64>)
 8001044:	f001 fee2 	bl	8002e0c <HAL_GPIO_WritePin>
		return false;
 8001048:	2300      	movs	r3, #0
 800104a:	e006      	b.n	800105a <Nokia5110_Write+0x5a>
	}

	HAL_SPI_Transmit_DMA(&hspi2, &data, 1); // veriyi spi aracılıgı ile gonderir
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	2201      	movs	r2, #1
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <Nokia5110_Write+0x68>)
 8001054:	f003 fcb0 	bl	80049b8 <HAL_SPI_Transmit_DMA>
	return true;
 8001058:	2301      	movs	r3, #1
}
 800105a:	4618      	mov	r0, r3
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40020000 	.word	0x40020000
 8001068:	200002bc 	.word	0x200002bc

0800106c <Nokia5110_BufferWrite>:

void Nokia5110_BufferWrite(uint8_t data)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
	//pikselleri ekrana yazar
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET); // CE pin is low
 8001076:	2200      	movs	r2, #0
 8001078:	2104      	movs	r1, #4
 800107a:	4809      	ldr	r0, [pc, #36]	; (80010a0 <Nokia5110_BufferWrite+0x34>)
 800107c:	f001 fec6 	bl	8002e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // DC pin is high for command send
 8001080:	2201      	movs	r2, #1
 8001082:	2102      	movs	r1, #2
 8001084:	4806      	ldr	r0, [pc, #24]	; (80010a0 <Nokia5110_BufferWrite+0x34>)
 8001086:	f001 fec1 	bl	8002e0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, &data, 0x01);
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	2201      	movs	r2, #1
 800108e:	4619      	mov	r1, r3
 8001090:	4804      	ldr	r0, [pc, #16]	; (80010a4 <Nokia5110_BufferWrite+0x38>)
 8001092:	f003 fc91 	bl	80049b8 <HAL_SPI_Transmit_DMA>

}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	40020000 	.word	0x40020000
 80010a4:	200002bc 	.word	0x200002bc

080010a8 <LCD_Write_Char>:


void LCD_Write_Char(uint8_t ch) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
  uint8_t line;
  ch -= 32;
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	3b20      	subs	r3, #32
 80010b6:	71fb      	strb	r3, [r7, #7]
  for (line=0; line<6; line++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
 80010bc:	e00f      	b.n	80010de <LCD_Write_Char+0x36>
	  Nokia5110_BufferWrite(ASCII[ch][line]);
 80010be:	79fa      	ldrb	r2, [r7, #7]
 80010c0:	7bf9      	ldrb	r1, [r7, #15]
 80010c2:	480b      	ldr	r0, [pc, #44]	; (80010f0 <LCD_Write_Char+0x48>)
 80010c4:	4613      	mov	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	4413      	add	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4403      	add	r3, r0
 80010ce:	440b      	add	r3, r1
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffca 	bl	800106c <Nokia5110_BufferWrite>
  for (line=0; line<6; line++){
 80010d8:	7bfb      	ldrb	r3, [r7, #15]
 80010da:	3301      	adds	r3, #1
 80010dc:	73fb      	strb	r3, [r7, #15]
 80010de:	7bfb      	ldrb	r3, [r7, #15]
 80010e0:	2b05      	cmp	r3, #5
 80010e2:	d9ec      	bls.n	80010be <LCD_Write_Char+0x16>
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08007b38 	.word	0x08007b38

080010f4 <LCD_Write_String>:


void LCD_Write_String(char *str,uint8_t PosX, uint8_t PosY)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	70fb      	strb	r3, [r7, #3]
 8001100:	4613      	mov	r3, r2
 8001102:	70bb      	strb	r3, [r7, #2]
	LCD_Set_Postion(PosX, PosY);
 8001104:	78ba      	ldrb	r2, [r7, #2]
 8001106:	78fb      	ldrb	r3, [r7, #3]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f812 	bl	8001134 <LCD_Set_Postion>
  while(* str) {
 8001110:	e007      	b.n	8001122 <LCD_Write_String+0x2e>
    LCD_Write_Char(* str);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ffc6 	bl	80010a8 <LCD_Write_Char>
    str ++;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3301      	adds	r3, #1
 8001120:	607b      	str	r3, [r7, #4]
  while(* str) {
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f3      	bne.n	8001112 <LCD_Write_String+0x1e>
  }
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <LCD_Set_Postion>:



void LCD_Set_Postion(uint8_t posX, uint8_t posY)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
	//verilen kordinatlara gider
	LCD_Write_Command(0x40 | posY);
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114a:	b2db      	uxtb	r3, r3
 800114c:	4618      	mov	r0, r3
 800114e:	f000 f80b 	bl	8001168 <LCD_Write_Command>
	LCD_Write_Command(0x80 | posX);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4618      	mov	r0, r3
 800115c:	f000 f804 	bl	8001168 <LCD_Write_Command>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}

08001168 <LCD_Write_Command>:


void LCD_Write_Command(uint8_t cmd)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	//verilen kordinatlara gider
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);    // CE
 8001172:	2200      	movs	r2, #0
 8001174:	2104      	movs	r1, #4
 8001176:	480e      	ldr	r0, [pc, #56]	; (80011b0 <LCD_Write_Command+0x48>)
 8001178:	f001 fe48 	bl	8002e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);   // DC
 800117c:	2200      	movs	r2, #0
 800117e:	2102      	movs	r1, #2
 8001180:	480b      	ldr	r0, [pc, #44]	; (80011b0 <LCD_Write_Command+0x48>)
 8001182:	f001 fe43 	bl	8002e0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit_DMA(&hspi2, &cmd, 0x01);
 8001186:	1dfb      	adds	r3, r7, #7
 8001188:	2201      	movs	r2, #1
 800118a:	4619      	mov	r1, r3
 800118c:	4809      	ldr	r0, [pc, #36]	; (80011b4 <LCD_Write_Command+0x4c>)
 800118e:	f003 fc13 	bl	80049b8 <HAL_SPI_Transmit_DMA>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);      // CE
 8001192:	2201      	movs	r2, #1
 8001194:	2104      	movs	r1, #4
 8001196:	4806      	ldr	r0, [pc, #24]	; (80011b0 <LCD_Write_Command+0x48>)
 8001198:	f001 fe38 	bl	8002e0c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);	 // DC
 800119c:	2201      	movs	r2, #1
 800119e:	2102      	movs	r1, #2
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <LCD_Write_Command+0x48>)
 80011a2:	f001 fe33 	bl	8002e0c <HAL_GPIO_WritePin>

}
 80011a6:	bf00      	nop
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40020000 	.word	0x40020000
 80011b4:	200002bc 	.word	0x200002bc

080011b8 <BMP180_Init>:
#include "bmp180.h"
#include "Nokia5110.h"
#include <stdio.h>

void BMP180_Init()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	if(HAL_I2C_IsDeviceReady(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 1, 1000) != HAL_OK)
 80011bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c0:	2201      	movs	r2, #1
 80011c2:	21ee      	movs	r1, #238	; 0xee
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <BMP180_Init+0x2c>)
 80011c6:	f002 fa9f 	bl	8003708 <HAL_I2C_IsDeviceReady>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <BMP180_Init+0x24>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80011d0:	2201      	movs	r2, #1
 80011d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <BMP180_Init+0x30>)
 80011d8:	f001 fe18 	bl	8002e0c <HAL_GPIO_WritePin>
	}

	BMP180_Get_Calibration_Value();
 80011dc:	f000 f806 	bl	80011ec <BMP180_Get_Calibration_Value>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000268 	.word	0x20000268
 80011e8:	40020c00 	.word	0x40020c00

080011ec <BMP180_Get_Calibration_Value>:
uint32_t pB4, pB7;

char printPressValue[20];

void BMP180_Get_Calibration_Value(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08c      	sub	sp, #48	; 0x30
 80011f0:	af04      	add	r7, sp, #16
	int a = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]


	uint8_t calibBuff[BMP180_CALIBRATION_VALUE_LENGTH] = {0};
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	f107 0308 	add.w	r3, r7, #8
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	821a      	strh	r2, [r3, #16]

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, BMP180_CALIBRATION_START_ADDRESS, 1,calibBuff ,BMP180_CALIBRATION_VALUE_LENGTH, 100);
 800120a:	2364      	movs	r3, #100	; 0x64
 800120c:	9302      	str	r3, [sp, #8]
 800120e:	2316      	movs	r3, #22
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	1d3b      	adds	r3, r7, #4
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	22aa      	movs	r2, #170	; 0xaa
 800121a:	21ef      	movs	r1, #239	; 0xef
 800121c:	48a5      	ldr	r0, [pc, #660]	; (80014b4 <BMP180_Get_Calibration_Value+0x2c8>)
 800121e:	f002 f84d 	bl	80032bc <HAL_I2C_Mem_Read>

	AC1 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8001222:	1d3a      	adds	r2, r7, #4
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b21a      	sxth	r2, r3
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3301      	adds	r3, #1
 8001232:	3320      	adds	r3, #32
 8001234:	443b      	add	r3, r7
 8001236:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800123a:	b21b      	sxth	r3, r3
 800123c:	4313      	orrs	r3, r2
 800123e:	b21a      	sxth	r2, r3
 8001240:	4b9d      	ldr	r3, [pc, #628]	; (80014b8 <BMP180_Get_Calibration_Value+0x2cc>)
 8001242:	801a      	strh	r2, [r3, #0]
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	3302      	adds	r3, #2
 8001248:	61fb      	str	r3, [r7, #28]
	AC2 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 800124a:	1d3a      	adds	r2, r7, #4
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	4413      	add	r3, r2
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	b21a      	sxth	r2, r3
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3301      	adds	r3, #1
 800125a:	3320      	adds	r3, #32
 800125c:	443b      	add	r3, r7
 800125e:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001262:	b21b      	sxth	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b21a      	sxth	r2, r3
 8001268:	4b94      	ldr	r3, [pc, #592]	; (80014bc <BMP180_Get_Calibration_Value+0x2d0>)
 800126a:	801a      	strh	r2, [r3, #0]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	3302      	adds	r3, #2
 8001270:	61fb      	str	r3, [r7, #28]
	AC3 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8001272:	1d3a      	adds	r2, r7, #4
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	4413      	add	r3, r2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	021b      	lsls	r3, r3, #8
 800127c:	b21a      	sxth	r2, r3
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3301      	adds	r3, #1
 8001282:	3320      	adds	r3, #32
 8001284:	443b      	add	r3, r7
 8001286:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800128a:	b21b      	sxth	r3, r3
 800128c:	4313      	orrs	r3, r2
 800128e:	b21a      	sxth	r2, r3
 8001290:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <BMP180_Get_Calibration_Value+0x2d4>)
 8001292:	801a      	strh	r2, [r3, #0]
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	3302      	adds	r3, #2
 8001298:	61fb      	str	r3, [r7, #28]
	AC4 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 800129a:	1d3a      	adds	r2, r7, #4
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	4413      	add	r3, r2
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	021b      	lsls	r3, r3, #8
 80012a4:	b21a      	sxth	r2, r3
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3301      	adds	r3, #1
 80012aa:	3320      	adds	r3, #32
 80012ac:	443b      	add	r3, r7
 80012ae:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012b2:	b21b      	sxth	r3, r3
 80012b4:	4313      	orrs	r3, r2
 80012b6:	b21b      	sxth	r3, r3
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	4b82      	ldr	r3, [pc, #520]	; (80014c4 <BMP180_Get_Calibration_Value+0x2d8>)
 80012bc:	801a      	strh	r2, [r3, #0]
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3302      	adds	r3, #2
 80012c2:	61fb      	str	r3, [r7, #28]
	AC5 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 80012c4:	1d3a      	adds	r2, r7, #4
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	4413      	add	r3, r2
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b21a      	sxth	r2, r3
 80012d0:	69fb      	ldr	r3, [r7, #28]
 80012d2:	3301      	adds	r3, #1
 80012d4:	3320      	adds	r3, #32
 80012d6:	443b      	add	r3, r7
 80012d8:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80012dc:	b21b      	sxth	r3, r3
 80012de:	4313      	orrs	r3, r2
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	b29a      	uxth	r2, r3
 80012e4:	4b78      	ldr	r3, [pc, #480]	; (80014c8 <BMP180_Get_Calibration_Value+0x2dc>)
 80012e6:	801a      	strh	r2, [r3, #0]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	3302      	adds	r3, #2
 80012ec:	61fb      	str	r3, [r7, #28]
	AC6 = (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 80012ee:	1d3a      	adds	r2, r7, #4
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	4413      	add	r3, r2
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	021b      	lsls	r3, r3, #8
 80012f8:	b21a      	sxth	r2, r3
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3301      	adds	r3, #1
 80012fe:	3320      	adds	r3, #32
 8001300:	443b      	add	r3, r7
 8001302:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	b29a      	uxth	r2, r3
 800130e:	4b6f      	ldr	r3, [pc, #444]	; (80014cc <BMP180_Get_Calibration_Value+0x2e0>)
 8001310:	801a      	strh	r2, [r3, #0]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	3302      	adds	r3, #2
 8001316:	61fb      	str	r3, [r7, #28]
	B1 =  (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8001318:	1d3a      	adds	r2, r7, #4
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	4413      	add	r3, r2
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	3301      	adds	r3, #1
 8001328:	3320      	adds	r3, #32
 800132a:	443b      	add	r3, r7
 800132c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21a      	sxth	r2, r3
 8001336:	4b66      	ldr	r3, [pc, #408]	; (80014d0 <BMP180_Get_Calibration_Value+0x2e4>)
 8001338:	801a      	strh	r2, [r3, #0]
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	3302      	adds	r3, #2
 800133e:	61fb      	str	r3, [r7, #28]
	B2 =  (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8001340:	1d3a      	adds	r2, r7, #4
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	4413      	add	r3, r2
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	021b      	lsls	r3, r3, #8
 800134a:	b21a      	sxth	r2, r3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	3301      	adds	r3, #1
 8001350:	3320      	adds	r3, #32
 8001352:	443b      	add	r3, r7
 8001354:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001358:	b21b      	sxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b21a      	sxth	r2, r3
 800135e:	4b5d      	ldr	r3, [pc, #372]	; (80014d4 <BMP180_Get_Calibration_Value+0x2e8>)
 8001360:	801a      	strh	r2, [r3, #0]
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3302      	adds	r3, #2
 8001366:	61fb      	str	r3, [r7, #28]
	MB =  (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8001368:	1d3a      	adds	r2, r7, #4
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	4413      	add	r3, r2
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	021b      	lsls	r3, r3, #8
 8001372:	b21a      	sxth	r2, r3
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	3301      	adds	r3, #1
 8001378:	3320      	adds	r3, #32
 800137a:	443b      	add	r3, r7
 800137c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001380:	b21b      	sxth	r3, r3
 8001382:	4313      	orrs	r3, r2
 8001384:	b21a      	sxth	r2, r3
 8001386:	4b54      	ldr	r3, [pc, #336]	; (80014d8 <BMP180_Get_Calibration_Value+0x2ec>)
 8001388:	801a      	strh	r2, [r3, #0]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	3302      	adds	r3, #2
 800138e:	61fb      	str	r3, [r7, #28]
	MC =  (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 8001390:	1d3a      	adds	r2, r7, #4
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	4413      	add	r3, r2
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	3301      	adds	r3, #1
 80013a0:	3320      	adds	r3, #32
 80013a2:	443b      	add	r3, r7
 80013a4:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b21a      	sxth	r2, r3
 80013ae:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <BMP180_Get_Calibration_Value+0x2f0>)
 80013b0:	801a      	strh	r2, [r3, #0]
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3302      	adds	r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
	MD =  (int16_t) (calibBuff[a] << 8 | calibBuff[a+1]); a+=2;
 80013b8:	1d3a      	adds	r2, r7, #4
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	4413      	add	r3, r2
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	3301      	adds	r3, #1
 80013c8:	3320      	adds	r3, #32
 80013ca:	443b      	add	r3, r7
 80013cc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	4313      	orrs	r3, r2
 80013d4:	b21a      	sxth	r2, r3
 80013d6:	4b42      	ldr	r3, [pc, #264]	; (80014e0 <BMP180_Get_Calibration_Value+0x2f4>)
 80013d8:	801a      	strh	r2, [r3, #0]
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	3302      	adds	r3, #2
 80013de:	61fb      	str	r3, [r7, #28]

	if(AC1 == 0x0000 || AC1 == 0xFFFFF)
 80013e0:	4b35      	ldr	r3, [pc, #212]	; (80014b8 <BMP180_Get_Calibration_Value+0x2cc>)
 80013e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d106      	bne.n	80013f8 <BMP180_Get_Calibration_Value+0x20c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80013ea:	2201      	movs	r2, #1
 80013ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f0:	483c      	ldr	r0, [pc, #240]	; (80014e4 <BMP180_Get_Calibration_Value+0x2f8>)
 80013f2:	f001 fd0b 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 80013f6:	e7fe      	b.n	80013f6 <BMP180_Get_Calibration_Value+0x20a>
	}

	else if(AC2 == 0x0000 || AC2 == 0xFFFFF)
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <BMP180_Get_Calibration_Value+0x2d0>)
 80013fa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d106      	bne.n	8001410 <BMP180_Get_Calibration_Value+0x224>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001402:	2201      	movs	r2, #1
 8001404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001408:	4836      	ldr	r0, [pc, #216]	; (80014e4 <BMP180_Get_Calibration_Value+0x2f8>)
 800140a:	f001 fcff 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 800140e:	e7fe      	b.n	800140e <BMP180_Get_Calibration_Value+0x222>
	}

	else if(AC3 == 0x0000 || AC3 == 0xFFFFF)
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <BMP180_Get_Calibration_Value+0x2d4>)
 8001412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d106      	bne.n	8001428 <BMP180_Get_Calibration_Value+0x23c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001420:	4830      	ldr	r0, [pc, #192]	; (80014e4 <BMP180_Get_Calibration_Value+0x2f8>)
 8001422:	f001 fcf3 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 8001426:	e7fe      	b.n	8001426 <BMP180_Get_Calibration_Value+0x23a>
	}
	else if(AC4 == 0x0000 || AC4 == 0xFFFFF)
 8001428:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <BMP180_Get_Calibration_Value+0x2d8>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d106      	bne.n	800143e <BMP180_Get_Calibration_Value+0x252>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001436:	482b      	ldr	r0, [pc, #172]	; (80014e4 <BMP180_Get_Calibration_Value+0x2f8>)
 8001438:	f001 fce8 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 800143c:	e7fe      	b.n	800143c <BMP180_Get_Calibration_Value+0x250>
	}
	else if(AC5 == 0x0000 || AC5 == 0xFFFFF)
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <BMP180_Get_Calibration_Value+0x2dc>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <BMP180_Get_Calibration_Value+0x268>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144c:	4825      	ldr	r0, [pc, #148]	; (80014e4 <BMP180_Get_Calibration_Value+0x2f8>)
 800144e:	f001 fcdd 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 8001452:	e7fe      	b.n	8001452 <BMP180_Get_Calibration_Value+0x266>
	}
	else if(AC6 == 0x0000 || AC6 == 0xFFFFF)
 8001454:	4b1d      	ldr	r3, [pc, #116]	; (80014cc <BMP180_Get_Calibration_Value+0x2e0>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d106      	bne.n	800146a <BMP180_Get_Calibration_Value+0x27e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001462:	4820      	ldr	r0, [pc, #128]	; (80014e4 <BMP180_Get_Calibration_Value+0x2f8>)
 8001464:	f001 fcd2 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 8001468:	e7fe      	b.n	8001468 <BMP180_Get_Calibration_Value+0x27c>
	}
	else if(B1 == 0x0000 || B1 == 0xFFFFF)
 800146a:	4b19      	ldr	r3, [pc, #100]	; (80014d0 <BMP180_Get_Calibration_Value+0x2e4>)
 800146c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d106      	bne.n	8001482 <BMP180_Get_Calibration_Value+0x296>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001474:	2201      	movs	r2, #1
 8001476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800147a:	481a      	ldr	r0, [pc, #104]	; (80014e4 <BMP180_Get_Calibration_Value+0x2f8>)
 800147c:	f001 fcc6 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 8001480:	e7fe      	b.n	8001480 <BMP180_Get_Calibration_Value+0x294>
	}
	else if(B2 == 0x0000 || B2 == 0xFFFFF)
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <BMP180_Get_Calibration_Value+0x2e8>)
 8001484:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d106      	bne.n	800149a <BMP180_Get_Calibration_Value+0x2ae>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001492:	4814      	ldr	r0, [pc, #80]	; (80014e4 <BMP180_Get_Calibration_Value+0x2f8>)
 8001494:	f001 fcba 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 8001498:	e7fe      	b.n	8001498 <BMP180_Get_Calibration_Value+0x2ac>
	}
	else if(MB == 0x0000 || MB == 0xFFFFF)
 800149a:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <BMP180_Get_Calibration_Value+0x2ec>)
 800149c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d121      	bne.n	80014e8 <BMP180_Get_Calibration_Value+0x2fc>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	480e      	ldr	r0, [pc, #56]	; (80014e4 <BMP180_Get_Calibration_Value+0x2f8>)
 80014ac:	f001 fcae 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 80014b0:	e7fe      	b.n	80014b0 <BMP180_Get_Calibration_Value+0x2c4>
 80014b2:	bf00      	nop
 80014b4:	20000268 	.word	0x20000268
 80014b8:	200001f0 	.word	0x200001f0
 80014bc:	200001f2 	.word	0x200001f2
 80014c0:	200001f4 	.word	0x200001f4
 80014c4:	200001f6 	.word	0x200001f6
 80014c8:	200001f8 	.word	0x200001f8
 80014cc:	200001fa 	.word	0x200001fa
 80014d0:	200001fc 	.word	0x200001fc
 80014d4:	200001fe 	.word	0x200001fe
 80014d8:	20000200 	.word	0x20000200
 80014dc:	20000202 	.word	0x20000202
 80014e0:	20000204 	.word	0x20000204
 80014e4:	40020c00 	.word	0x40020c00
	}
	else if(MC == 0x0000 || MC == 0xFFFFF)
 80014e8:	4b0d      	ldr	r3, [pc, #52]	; (8001520 <BMP180_Get_Calibration_Value+0x334>)
 80014ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d106      	bne.n	8001500 <BMP180_Get_Calibration_Value+0x314>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f8:	480a      	ldr	r0, [pc, #40]	; (8001524 <BMP180_Get_Calibration_Value+0x338>)
 80014fa:	f001 fc87 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 80014fe:	e7fe      	b.n	80014fe <BMP180_Get_Calibration_Value+0x312>
	}
	else if(MD == 0x0000 || MD == 0xFFFFF)
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <BMP180_Get_Calibration_Value+0x33c>)
 8001502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d106      	bne.n	8001518 <BMP180_Get_Calibration_Value+0x32c>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 800150a:	2201      	movs	r2, #1
 800150c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001510:	4804      	ldr	r0, [pc, #16]	; (8001524 <BMP180_Get_Calibration_Value+0x338>)
 8001512:	f001 fc7b 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 8001516:	e7fe      	b.n	8001516 <BMP180_Get_Calibration_Value+0x32a>
	}
}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000202 	.word	0x20000202
 8001524:	40020c00 	.word	0x40020c00
 8001528:	20000204 	.word	0x20000204
 800152c:	00000000 	.word	0x00000000

08001530 <BMP180_Get_Temperature>:

void BMP180_Get_Temperature(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	BMP180_GetUncomponsated_Temperature();
 8001534:	f000 f88e 	bl	8001654 <BMP180_GetUncomponsated_Temperature>
	tX1 = (((int32_t)unCompTemperature - (int32_t)AC6) * (int32_t)AC5) / 32768;
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <BMP180_Get_Temperature+0xf0>)
 800153a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153e:	461a      	mov	r2, r3
 8001540:	4b38      	ldr	r3, [pc, #224]	; (8001624 <BMP180_Get_Temperature+0xf4>)
 8001542:	881b      	ldrh	r3, [r3, #0]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	4a38      	ldr	r2, [pc, #224]	; (8001628 <BMP180_Get_Temperature+0xf8>)
 8001548:	8812      	ldrh	r2, [r2, #0]
 800154a:	fb02 f303 	mul.w	r3, r2, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	da02      	bge.n	8001558 <BMP180_Get_Temperature+0x28>
 8001552:	f503 43ff 	add.w	r3, r3, #32640	; 0x7f80
 8001556:	337f      	adds	r3, #127	; 0x7f
 8001558:	13db      	asrs	r3, r3, #15
 800155a:	461a      	mov	r2, r3
 800155c:	4b33      	ldr	r3, [pc, #204]	; (800162c <BMP180_Get_Temperature+0xfc>)
 800155e:	601a      	str	r2, [r3, #0]
	tX2 = ((int32_t)MC * 2048) / (tX1 + (int32_t)MD);
 8001560:	4b33      	ldr	r3, [pc, #204]	; (8001630 <BMP180_Get_Temperature+0x100>)
 8001562:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001566:	02da      	lsls	r2, r3, #11
 8001568:	4b32      	ldr	r3, [pc, #200]	; (8001634 <BMP180_Get_Temperature+0x104>)
 800156a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156e:	4619      	mov	r1, r3
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <BMP180_Get_Temperature+0xfc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	440b      	add	r3, r1
 8001576:	fb92 f3f3 	sdiv	r3, r2, r3
 800157a:	4a2f      	ldr	r2, [pc, #188]	; (8001638 <BMP180_Get_Temperature+0x108>)
 800157c:	6013      	str	r3, [r2, #0]

	if(tX1 == 0 && MD == 0)
 800157e:	4b2b      	ldr	r3, [pc, #172]	; (800162c <BMP180_Get_Temperature+0xfc>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10b      	bne.n	800159e <BMP180_Get_Temperature+0x6e>
 8001586:	4b2b      	ldr	r3, [pc, #172]	; (8001634 <BMP180_Get_Temperature+0x104>)
 8001588:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d106      	bne.n	800159e <BMP180_Get_Temperature+0x6e>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8001590:	2201      	movs	r2, #1
 8001592:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001596:	4829      	ldr	r0, [pc, #164]	; (800163c <BMP180_Get_Temperature+0x10c>)
 8001598:	f001 fc38 	bl	8002e0c <HAL_GPIO_WritePin>
		while(1);
 800159c:	e7fe      	b.n	800159c <BMP180_Get_Temperature+0x6c>
	}

	tB5 = tX1 + tX2;
 800159e:	4b23      	ldr	r3, [pc, #140]	; (800162c <BMP180_Get_Temperature+0xfc>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <BMP180_Get_Temperature+0x108>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	4a25      	ldr	r2, [pc, #148]	; (8001640 <BMP180_Get_Temperature+0x110>)
 80015aa:	6013      	str	r3, [r2, #0]
	Temperature =(float) (tB5 + 8) / 16 * 0.1;
 80015ac:	4b24      	ldr	r3, [pc, #144]	; (8001640 <BMP180_Get_Temperature+0x110>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	3308      	adds	r3, #8
 80015b2:	ee07 3a90 	vmov	s15, r3
 80015b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015ba:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 80015be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80015c2:	ee16 0a90 	vmov	r0, s13
 80015c6:	f7fe ffc7 	bl	8000558 <__aeabi_f2d>
 80015ca:	a313      	add	r3, pc, #76	; (adr r3, 8001618 <BMP180_Get_Temperature+0xe8>)
 80015cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d0:	f7ff f81a 	bl	8000608 <__aeabi_dmul>
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4610      	mov	r0, r2
 80015da:	4619      	mov	r1, r3
 80015dc:	f7ff faec 	bl	8000bb8 <__aeabi_d2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4a18      	ldr	r2, [pc, #96]	; (8001644 <BMP180_Get_Temperature+0x114>)
 80015e4:	6013      	str	r3, [r2, #0]

	LCD_Write_String("SICAKLIK:" ,0,20);
 80015e6:	2214      	movs	r2, #20
 80015e8:	2100      	movs	r1, #0
 80015ea:	4817      	ldr	r0, [pc, #92]	; (8001648 <BMP180_Get_Temperature+0x118>)
 80015ec:	f7ff fd82 	bl	80010f4 <LCD_Write_String>
	sprintf(printTempValue, " %.4f", Temperature);
 80015f0:	4b14      	ldr	r3, [pc, #80]	; (8001644 <BMP180_Get_Temperature+0x114>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe ffaf 	bl	8000558 <__aeabi_f2d>
 80015fa:	4602      	mov	r2, r0
 80015fc:	460b      	mov	r3, r1
 80015fe:	4913      	ldr	r1, [pc, #76]	; (800164c <BMP180_Get_Temperature+0x11c>)
 8001600:	4813      	ldr	r0, [pc, #76]	; (8001650 <BMP180_Get_Temperature+0x120>)
 8001602:	f004 f921 	bl	8005848 <siprintf>

	LCD_Write_String(printTempValue ,36,20);
 8001606:	2214      	movs	r2, #20
 8001608:	2124      	movs	r1, #36	; 0x24
 800160a:	4811      	ldr	r0, [pc, #68]	; (8001650 <BMP180_Get_Temperature+0x120>)
 800160c:	f7ff fd72 	bl	80010f4 <LCD_Write_String>

}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	f3af 8000 	nop.w
 8001618:	9999999a 	.word	0x9999999a
 800161c:	3fb99999 	.word	0x3fb99999
 8001620:	20000206 	.word	0x20000206
 8001624:	200001fa 	.word	0x200001fa
 8001628:	200001f8 	.word	0x200001f8
 800162c:	2000020c 	.word	0x2000020c
 8001630:	20000202 	.word	0x20000202
 8001634:	20000204 	.word	0x20000204
 8001638:	20000210 	.word	0x20000210
 800163c:	40020c00 	.word	0x40020c00
 8001640:	20000214 	.word	0x20000214
 8001644:	20000208 	.word	0x20000208
 8001648:	08007b18 	.word	0x08007b18
 800164c:	08007b24 	.word	0x08007b24
 8001650:	20000218 	.word	0x20000218

08001654 <BMP180_GetUncomponsated_Temperature>:

void BMP180_GetUncomponsated_Temperature(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b086      	sub	sp, #24
 8001658:	af04      	add	r7, sp, #16
	uint8_t rData[2] = {0};
 800165a:	2300      	movs	r3, #0
 800165c:	80bb      	strh	r3, [r7, #4]
	uint8_t wData[1];
	wData[0] = 0x2E;
 800165e:	232e      	movs	r3, #46	; 0x2e
 8001660:	703b      	strb	r3, [r7, #0]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData, 1, 100);
 8001662:	2364      	movs	r3, #100	; 0x64
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	2301      	movs	r3, #1
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	463b      	mov	r3, r7
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2301      	movs	r3, #1
 8001670:	22f4      	movs	r2, #244	; 0xf4
 8001672:	21ee      	movs	r1, #238	; 0xee
 8001674:	480f      	ldr	r0, [pc, #60]	; (80016b4 <BMP180_GetUncomponsated_Temperature+0x60>)
 8001676:	f001 fd27 	bl	80030c8 <HAL_I2C_Mem_Write>
	HAL_Delay(5);
 800167a:	2005      	movs	r0, #5
 800167c:	f000 fd9c 	bl	80021b8 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, 0xF6, 1, rData, 2, 100);
 8001680:	2364      	movs	r3, #100	; 0x64
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2302      	movs	r3, #2
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	2301      	movs	r3, #1
 800168e:	22f6      	movs	r2, #246	; 0xf6
 8001690:	21ef      	movs	r1, #239	; 0xef
 8001692:	4808      	ldr	r0, [pc, #32]	; (80016b4 <BMP180_GetUncomponsated_Temperature+0x60>)
 8001694:	f001 fe12 	bl	80032bc <HAL_I2C_Mem_Read>
	unCompTemperature = (int16_t)((rData[0] << 8) | rData[1]);
 8001698:	793b      	ldrb	r3, [r7, #4]
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	b21a      	sxth	r2, r3
 800169e:	797b      	ldrb	r3, [r7, #5]
 80016a0:	b21b      	sxth	r3, r3
 80016a2:	4313      	orrs	r3, r2
 80016a4:	b21a      	sxth	r2, r3
 80016a6:	4b04      	ldr	r3, [pc, #16]	; (80016b8 <BMP180_GetUncomponsated_Temperature+0x64>)
 80016a8:	801a      	strh	r2, [r3, #0]




}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000268 	.word	0x20000268
 80016b8:	20000206 	.word	0x20000206
 80016bc:	00000000 	.word	0x00000000

080016c0 <BMP180_GetPresure>:



void BMP180_GetPresure(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	BMP180_GetUncomponsated_Presure();
 80016c4:	f000 f968 	bl	8001998 <BMP180_GetUncomponsated_Presure>

	pB6 = tB5 - 4000;
 80016c8:	4b9b      	ldr	r3, [pc, #620]	; (8001938 <BMP180_GetPresure+0x278>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 80016d0:	4a9a      	ldr	r2, [pc, #616]	; (800193c <BMP180_GetPresure+0x27c>)
 80016d2:	6013      	str	r3, [r2, #0]
	pX1 = (B2 *(pB6 * pB6 / 4096)) / 2048;
 80016d4:	4b9a      	ldr	r3, [pc, #616]	; (8001940 <BMP180_GetPresure+0x280>)
 80016d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016da:	4619      	mov	r1, r3
 80016dc:	4b97      	ldr	r3, [pc, #604]	; (800193c <BMP180_GetPresure+0x27c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a96      	ldr	r2, [pc, #600]	; (800193c <BMP180_GetPresure+0x27c>)
 80016e2:	6812      	ldr	r2, [r2, #0]
 80016e4:	fb02 f303 	mul.w	r3, r2, r3
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	da01      	bge.n	80016f0 <BMP180_GetPresure+0x30>
 80016ec:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80016f0:	131b      	asrs	r3, r3, #12
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	da01      	bge.n	80016fe <BMP180_GetPresure+0x3e>
 80016fa:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 80016fe:	12db      	asrs	r3, r3, #11
 8001700:	461a      	mov	r2, r3
 8001702:	4b90      	ldr	r3, [pc, #576]	; (8001944 <BMP180_GetPresure+0x284>)
 8001704:	601a      	str	r2, [r3, #0]
	pX2 = AC2 * pB6 / 2048;
 8001706:	4b90      	ldr	r3, [pc, #576]	; (8001948 <BMP180_GetPresure+0x288>)
 8001708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800170c:	461a      	mov	r2, r3
 800170e:	4b8b      	ldr	r3, [pc, #556]	; (800193c <BMP180_GetPresure+0x27c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	da01      	bge.n	800171e <BMP180_GetPresure+0x5e>
 800171a:	f203 73ff 	addw	r3, r3, #2047	; 0x7ff
 800171e:	12db      	asrs	r3, r3, #11
 8001720:	461a      	mov	r2, r3
 8001722:	4b8a      	ldr	r3, [pc, #552]	; (800194c <BMP180_GetPresure+0x28c>)
 8001724:	601a      	str	r2, [r3, #0]
	pX3 = pX1 + pX2;
 8001726:	4b87      	ldr	r3, [pc, #540]	; (8001944 <BMP180_GetPresure+0x284>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4b88      	ldr	r3, [pc, #544]	; (800194c <BMP180_GetPresure+0x28c>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	4413      	add	r3, r2
 8001730:	4a87      	ldr	r2, [pc, #540]	; (8001950 <BMP180_GetPresure+0x290>)
 8001732:	6013      	str	r3, [r2, #0]
	pB3 = (((AC1 * 4 + pX3) << (uint8_t)0x03) + 2) / 4;
 8001734:	4b87      	ldr	r3, [pc, #540]	; (8001954 <BMP180_GetPresure+0x294>)
 8001736:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173a:	009a      	lsls	r2, r3, #2
 800173c:	4b84      	ldr	r3, [pc, #528]	; (8001950 <BMP180_GetPresure+0x290>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	3302      	adds	r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	da00      	bge.n	800174c <BMP180_GetPresure+0x8c>
 800174a:	3303      	adds	r3, #3
 800174c:	109b      	asrs	r3, r3, #2
 800174e:	461a      	mov	r2, r3
 8001750:	4b81      	ldr	r3, [pc, #516]	; (8001958 <BMP180_GetPresure+0x298>)
 8001752:	601a      	str	r2, [r3, #0]
	pX1 = AC3 * pB6 / 8192;
 8001754:	4b81      	ldr	r3, [pc, #516]	; (800195c <BMP180_GetPresure+0x29c>)
 8001756:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175a:	461a      	mov	r2, r3
 800175c:	4b77      	ldr	r3, [pc, #476]	; (800193c <BMP180_GetPresure+0x27c>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	fb02 f303 	mul.w	r3, r2, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	da02      	bge.n	800176e <BMP180_GetPresure+0xae>
 8001768:	f503 53ff 	add.w	r3, r3, #8160	; 0x1fe0
 800176c:	331f      	adds	r3, #31
 800176e:	135b      	asrs	r3, r3, #13
 8001770:	461a      	mov	r2, r3
 8001772:	4b74      	ldr	r3, [pc, #464]	; (8001944 <BMP180_GetPresure+0x284>)
 8001774:	601a      	str	r2, [r3, #0]
	pX2 = (B1 * (pB6 * pB6 / 4096)) / 65536;
 8001776:	4b7a      	ldr	r3, [pc, #488]	; (8001960 <BMP180_GetPresure+0x2a0>)
 8001778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800177c:	4619      	mov	r1, r3
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <BMP180_GetPresure+0x27c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6e      	ldr	r2, [pc, #440]	; (800193c <BMP180_GetPresure+0x27c>)
 8001784:	6812      	ldr	r2, [r2, #0]
 8001786:	fb02 f303 	mul.w	r3, r2, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	da01      	bge.n	8001792 <BMP180_GetPresure+0xd2>
 800178e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8001792:	131b      	asrs	r3, r3, #12
 8001794:	fb01 f303 	mul.w	r3, r1, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	da02      	bge.n	80017a2 <BMP180_GetPresure+0xe2>
 800179c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80017a0:	33ff      	adds	r3, #255	; 0xff
 80017a2:	141b      	asrs	r3, r3, #16
 80017a4:	461a      	mov	r2, r3
 80017a6:	4b69      	ldr	r3, [pc, #420]	; (800194c <BMP180_GetPresure+0x28c>)
 80017a8:	601a      	str	r2, [r3, #0]
	pX3 = ((pX1 + pX2) + 2) / 4;
 80017aa:	4b66      	ldr	r3, [pc, #408]	; (8001944 <BMP180_GetPresure+0x284>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	4b67      	ldr	r3, [pc, #412]	; (800194c <BMP180_GetPresure+0x28c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4413      	add	r3, r2
 80017b4:	3302      	adds	r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	da00      	bge.n	80017bc <BMP180_GetPresure+0xfc>
 80017ba:	3303      	adds	r3, #3
 80017bc:	109b      	asrs	r3, r3, #2
 80017be:	461a      	mov	r2, r3
 80017c0:	4b63      	ldr	r3, [pc, #396]	; (8001950 <BMP180_GetPresure+0x290>)
 80017c2:	601a      	str	r2, [r3, #0]
	pB4 = AC4 * (unsigned long) (pX3 + 32768) / 32768;
 80017c4:	4b67      	ldr	r3, [pc, #412]	; (8001964 <BMP180_GetPresure+0x2a4>)
 80017c6:	881b      	ldrh	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	4b61      	ldr	r3, [pc, #388]	; (8001950 <BMP180_GetPresure+0x290>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80017d2:	fb02 f303 	mul.w	r3, r2, r3
 80017d6:	0bdb      	lsrs	r3, r3, #15
 80017d8:	4a63      	ldr	r2, [pc, #396]	; (8001968 <BMP180_GetPresure+0x2a8>)
 80017da:	6013      	str	r3, [r2, #0]
	pB7 = ((unsigned long)unCompPresure - pB3) * (50000 >> (uint8_t)0x03);
 80017dc:	4b63      	ldr	r3, [pc, #396]	; (800196c <BMP180_GetPresure+0x2ac>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a5d      	ldr	r2, [pc, #372]	; (8001958 <BMP180_GetPresure+0x298>)
 80017e2:	6812      	ldr	r2, [r2, #0]
 80017e4:	1a9b      	subs	r3, r3, r2
 80017e6:	f641 026a 	movw	r2, #6250	; 0x186a
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	4a60      	ldr	r2, [pc, #384]	; (8001970 <BMP180_GetPresure+0x2b0>)
 80017f0:	6013      	str	r3, [r2, #0]

	if(pB7 < 80000000)
 80017f2:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <BMP180_GetPresure+0x2b0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a5f      	ldr	r2, [pc, #380]	; (8001974 <BMP180_GetPresure+0x2b4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d80e      	bhi.n	800181a <BMP180_GetPresure+0x15a>
		presure = (pB7 * 2) /pB4;
 80017fc:	4b5c      	ldr	r3, [pc, #368]	; (8001970 <BMP180_GetPresure+0x2b0>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	005a      	lsls	r2, r3, #1
 8001802:	4b59      	ldr	r3, [pc, #356]	; (8001968 <BMP180_GetPresure+0x2a8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	fbb2 f3f3 	udiv	r3, r2, r3
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001812:	4b59      	ldr	r3, [pc, #356]	; (8001978 <BMP180_GetPresure+0x2b8>)
 8001814:	edc3 7a00 	vstr	s15, [r3]
 8001818:	e00d      	b.n	8001836 <BMP180_GetPresure+0x176>
	else
		presure = (pB7 / pB4) * 2;
 800181a:	4b55      	ldr	r3, [pc, #340]	; (8001970 <BMP180_GetPresure+0x2b0>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	4b52      	ldr	r3, [pc, #328]	; (8001968 <BMP180_GetPresure+0x2a8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	fbb2 f3f3 	udiv	r3, r2, r3
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	ee07 3a90 	vmov	s15, r3
 800182c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <BMP180_GetPresure+0x2b8>)
 8001832:	edc3 7a00 	vstr	s15, [r3]

	pX1 = (presure / 256) * (presure / 256);
 8001836:	4b50      	ldr	r3, [pc, #320]	; (8001978 <BMP180_GetPresure+0x2b8>)
 8001838:	edd3 7a00 	vldr	s15, [r3]
 800183c:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800197c <BMP180_GetPresure+0x2bc>
 8001840:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001844:	4b4c      	ldr	r3, [pc, #304]	; (8001978 <BMP180_GetPresure+0x2b8>)
 8001846:	edd3 6a00 	vldr	s13, [r3]
 800184a:	ed9f 6a4c 	vldr	s12, [pc, #304]	; 800197c <BMP180_GetPresure+0x2bc>
 800184e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001856:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185a:	ee17 2a90 	vmov	r2, s15
 800185e:	4b39      	ldr	r3, [pc, #228]	; (8001944 <BMP180_GetPresure+0x284>)
 8001860:	601a      	str	r2, [r3, #0]
	pX1 = (pX1 * 3038) / 65536;
 8001862:	4b38      	ldr	r3, [pc, #224]	; (8001944 <BMP180_GetPresure+0x284>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f640 32de 	movw	r2, #3038	; 0xbde
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	da02      	bge.n	8001878 <BMP180_GetPresure+0x1b8>
 8001872:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001876:	33ff      	adds	r3, #255	; 0xff
 8001878:	141b      	asrs	r3, r3, #16
 800187a:	461a      	mov	r2, r3
 800187c:	4b31      	ldr	r3, [pc, #196]	; (8001944 <BMP180_GetPresure+0x284>)
 800187e:	601a      	str	r2, [r3, #0]
	pX2 = (-7357 * presure ) / 65536;
 8001880:	4b3d      	ldr	r3, [pc, #244]	; (8001978 <BMP180_GetPresure+0x2b8>)
 8001882:	edd3 7a00 	vldr	s15, [r3]
 8001886:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001980 <BMP180_GetPresure+0x2c0>
 800188a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800188e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8001984 <BMP180_GetPresure+0x2c4>
 8001892:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001896:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800189a:	ee17 2a90 	vmov	r2, s15
 800189e:	4b2b      	ldr	r3, [pc, #172]	; (800194c <BMP180_GetPresure+0x28c>)
 80018a0:	601a      	str	r2, [r3, #0]
	presure = presure + (pX1 + pX2 + 3791) / 16;   //hPa
 80018a2:	4b28      	ldr	r3, [pc, #160]	; (8001944 <BMP180_GetPresure+0x284>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	4b29      	ldr	r3, [pc, #164]	; (800194c <BMP180_GetPresure+0x28c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4413      	add	r3, r2
 80018ac:	f603 63cf 	addw	r3, r3, #3791	; 0xecf
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	da00      	bge.n	80018b6 <BMP180_GetPresure+0x1f6>
 80018b4:	330f      	adds	r3, #15
 80018b6:	111b      	asrs	r3, r3, #4
 80018b8:	ee07 3a90 	vmov	s15, r3
 80018bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018c0:	4b2d      	ldr	r3, [pc, #180]	; (8001978 <BMP180_GetPresure+0x2b8>)
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <BMP180_GetPresure+0x2b8>)
 80018cc:	edc3 7a00 	vstr	s15, [r3]
	presureATM = presure * 0.00000986923;
 80018d0:	4b29      	ldr	r3, [pc, #164]	; (8001978 <BMP180_GetPresure+0x2b8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe3f 	bl	8000558 <__aeabi_f2d>
 80018da:	a315      	add	r3, pc, #84	; (adr r3, 8001930 <BMP180_GetPresure+0x270>)
 80018dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e0:	f7fe fe92 	bl	8000608 <__aeabi_dmul>
 80018e4:	4602      	mov	r2, r0
 80018e6:	460b      	mov	r3, r1
 80018e8:	4610      	mov	r0, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f7ff f964 	bl	8000bb8 <__aeabi_d2f>
 80018f0:	4603      	mov	r3, r0
 80018f2:	4a25      	ldr	r2, [pc, #148]	; (8001988 <BMP180_GetPresure+0x2c8>)
 80018f4:	6013      	str	r3, [r2, #0]

	LCD_Write_String("BASINC:" ,0,0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	4824      	ldr	r0, [pc, #144]	; (800198c <BMP180_GetPresure+0x2cc>)
 80018fc:	f7ff fbfa 	bl	80010f4 <LCD_Write_String>
	sprintf(printPressValue," %.4f", presureATM);
 8001900:	4b21      	ldr	r3, [pc, #132]	; (8001988 <BMP180_GetPresure+0x2c8>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe27 	bl	8000558 <__aeabi_f2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4920      	ldr	r1, [pc, #128]	; (8001990 <BMP180_GetPresure+0x2d0>)
 8001910:	4820      	ldr	r0, [pc, #128]	; (8001994 <BMP180_GetPresure+0x2d4>)
 8001912:	f003 ff99 	bl	8005848 <siprintf>
	HAL_Delay(200);
 8001916:	20c8      	movs	r0, #200	; 0xc8
 8001918:	f000 fc4e 	bl	80021b8 <HAL_Delay>

	LCD_Write_String(printPressValue ,36,0);
 800191c:	2200      	movs	r2, #0
 800191e:	2124      	movs	r1, #36	; 0x24
 8001920:	481c      	ldr	r0, [pc, #112]	; (8001994 <BMP180_GetPresure+0x2d4>)
 8001922:	f7ff fbe7 	bl	80010f4 <LCD_Write_String>





}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	f3af 8000 	nop.w
 8001930:	a48cde11 	.word	0xa48cde11
 8001934:	3ee4b280 	.word	0x3ee4b280
 8001938:	20000214 	.word	0x20000214
 800193c:	20000248 	.word	0x20000248
 8001940:	200001fe 	.word	0x200001fe
 8001944:	20000238 	.word	0x20000238
 8001948:	200001f2 	.word	0x200001f2
 800194c:	2000023c 	.word	0x2000023c
 8001950:	20000240 	.word	0x20000240
 8001954:	200001f0 	.word	0x200001f0
 8001958:	20000244 	.word	0x20000244
 800195c:	200001f4 	.word	0x200001f4
 8001960:	200001fc 	.word	0x200001fc
 8001964:	200001f6 	.word	0x200001f6
 8001968:	2000024c 	.word	0x2000024c
 800196c:	2000022c 	.word	0x2000022c
 8001970:	20000250 	.word	0x20000250
 8001974:	04c4b3ff 	.word	0x04c4b3ff
 8001978:	20000230 	.word	0x20000230
 800197c:	43800000 	.word	0x43800000
 8001980:	c5e5e800 	.word	0xc5e5e800
 8001984:	47800000 	.word	0x47800000
 8001988:	20000234 	.word	0x20000234
 800198c:	08007b2c 	.word	0x08007b2c
 8001990:	08007b24 	.word	0x08007b24
 8001994:	20000254 	.word	0x20000254

08001998 <BMP180_GetUncomponsated_Presure>:


void BMP180_GetUncomponsated_Presure(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af04      	add	r7, sp, #16
	uint8_t wData[1];
	uint8_t rData[3] = {0};
 800199e:	4b18      	ldr	r3, [pc, #96]	; (8001a00 <BMP180_GetUncomponsated_Presure+0x68>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	803b      	strh	r3, [r7, #0]
 80019a4:	2300      	movs	r3, #0
 80019a6:	70bb      	strb	r3, [r7, #2]
	wData[0] = 0x34 | (0x03 << 6);
 80019a8:	23f4      	movs	r3, #244	; 0xf4
 80019aa:	713b      	strb	r3, [r7, #4]
	HAL_I2C_Mem_Write(&hi2c1, BMP180_DEVICE_WRITE_REGISTER_ADDRESS, 0xF4, 1, wData, 1, 100);
 80019ac:	2364      	movs	r3, #100	; 0x64
 80019ae:	9302      	str	r3, [sp, #8]
 80019b0:	2301      	movs	r3, #1
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	2301      	movs	r3, #1
 80019ba:	22f4      	movs	r2, #244	; 0xf4
 80019bc:	21ee      	movs	r1, #238	; 0xee
 80019be:	4811      	ldr	r0, [pc, #68]	; (8001a04 <BMP180_GetUncomponsated_Presure+0x6c>)
 80019c0:	f001 fb82 	bl	80030c8 <HAL_I2C_Mem_Write>
	HAL_Delay(26);
 80019c4:	201a      	movs	r0, #26
 80019c6:	f000 fbf7 	bl	80021b8 <HAL_Delay>

	HAL_I2C_Mem_Read(&hi2c1, BMP180_DEVICE_READ_REGISTER_ADDRESS, 0xF6, 1, rData, 3, 100);
 80019ca:	2364      	movs	r3, #100	; 0x64
 80019cc:	9302      	str	r3, [sp, #8]
 80019ce:	2303      	movs	r3, #3
 80019d0:	9301      	str	r3, [sp, #4]
 80019d2:	463b      	mov	r3, r7
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2301      	movs	r3, #1
 80019d8:	22f6      	movs	r2, #246	; 0xf6
 80019da:	21ef      	movs	r1, #239	; 0xef
 80019dc:	4809      	ldr	r0, [pc, #36]	; (8001a04 <BMP180_GetUncomponsated_Presure+0x6c>)
 80019de:	f001 fc6d 	bl	80032bc <HAL_I2C_Mem_Read>
	unCompPresure =(rData[0] << 16 | rData[1] << 8 | rData[2]) >> (8 - (uint8_t)(0x03));
 80019e2:	783b      	ldrb	r3, [r7, #0]
 80019e4:	041a      	lsls	r2, r3, #16
 80019e6:	787b      	ldrb	r3, [r7, #1]
 80019e8:	021b      	lsls	r3, r3, #8
 80019ea:	4313      	orrs	r3, r2
 80019ec:	78ba      	ldrb	r2, [r7, #2]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	115b      	asrs	r3, r3, #5
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <BMP180_GetUncomponsated_Presure+0x70>)
 80019f6:	601a      	str	r2, [r3, #0]



}
 80019f8:	bf00      	nop
 80019fa:	3708      	adds	r7, #8
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	08007b34 	.word	0x08007b34
 8001a04:	20000268 	.word	0x20000268
 8001a08:	2000022c 	.word	0x2000022c

08001a0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a10:	f000 fb60 	bl	80020d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a14:	f000 f812 	bl	8001a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a18:	f000 f8f4 	bl	8001c04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a1c:	f000 f8d2 	bl	8001bc4 <MX_DMA_Init>
  MX_SPI2_Init();
 8001a20:	f000 f89a 	bl	8001b58 <MX_SPI2_Init>
  MX_I2C1_Init();
 8001a24:	f000 f86a 	bl	8001afc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  Nokia5110_Init();
 8001a28:	f7ff fa94 	bl	8000f54 <Nokia5110_Init>
  BMP180_Init();
 8001a2c:	f7ff fbc4 	bl	80011b8 <BMP180_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  BMP180_Get_Temperature();
 8001a30:	f7ff fd7e 	bl	8001530 <BMP180_Get_Temperature>
	  BMP180_GetPresure();
 8001a34:	f7ff fe44 	bl	80016c0 <BMP180_GetPresure>
	  BMP180_Get_Temperature();
 8001a38:	e7fa      	b.n	8001a30 <main+0x24>
	...

08001a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b094      	sub	sp, #80	; 0x50
 8001a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a42:	f107 0320 	add.w	r3, r7, #32
 8001a46:	2230      	movs	r2, #48	; 0x30
 8001a48:	2100      	movs	r1, #0
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f003 ff5f 	bl	800590e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a50:	f107 030c 	add.w	r3, r7, #12
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	2300      	movs	r3, #0
 8001a62:	60bb      	str	r3, [r7, #8]
 8001a64:	4b23      	ldr	r3, [pc, #140]	; (8001af4 <SystemClock_Config+0xb8>)
 8001a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a68:	4a22      	ldr	r2, [pc, #136]	; (8001af4 <SystemClock_Config+0xb8>)
 8001a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <SystemClock_Config+0xb8>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	607b      	str	r3, [r7, #4]
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <SystemClock_Config+0xbc>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a88:	4a1b      	ldr	r2, [pc, #108]	; (8001af8 <SystemClock_Config+0xbc>)
 8001a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a8e:	6013      	str	r3, [r2, #0]
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <SystemClock_Config+0xbc>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aa4:	2310      	movs	r3, #16
 8001aa6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001aac:	f107 0320 	add.w	r3, r7, #32
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f002 fab3 	bl	800401c <HAL_RCC_OscConfig>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001abc:	f000 f8e4 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001acc:	2300      	movs	r3, #0
 8001ace:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ad4:	f107 030c 	add.w	r3, r7, #12
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 fd16 	bl	800450c <HAL_RCC_ClockConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001ae6:	f000 f8cf 	bl	8001c88 <Error_Handler>
  }
}
 8001aea:	bf00      	nop
 8001aec:	3750      	adds	r7, #80	; 0x50
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40007000 	.word	0x40007000

08001afc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <MX_I2C1_Init+0x50>)
 8001b02:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <MX_I2C1_Init+0x54>)
 8001b04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b06:	4b11      	ldr	r3, [pc, #68]	; (8001b4c <MX_I2C1_Init+0x50>)
 8001b08:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <MX_I2C1_Init+0x58>)
 8001b0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <MX_I2C1_Init+0x50>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b12:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <MX_I2C1_Init+0x50>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	; (8001b4c <MX_I2C1_Init+0x50>)
 8001b1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <MX_I2C1_Init+0x50>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <MX_I2C1_Init+0x50>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	; (8001b4c <MX_I2C1_Init+0x50>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b32:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <MX_I2C1_Init+0x50>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b38:	4804      	ldr	r0, [pc, #16]	; (8001b4c <MX_I2C1_Init+0x50>)
 8001b3a:	f001 f981 	bl	8002e40 <HAL_I2C_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b44:	f000 f8a0 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	20000268 	.word	0x20000268
 8001b50:	40005400 	.word	0x40005400
 8001b54:	000186a0 	.word	0x000186a0

08001b58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001b5c:	4b17      	ldr	r3, [pc, #92]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b5e:	4a18      	ldr	r2, [pc, #96]	; (8001bc0 <MX_SPI2_Init+0x68>)
 8001b60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001b62:	4b16      	ldr	r3, [pc, #88]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001b8a:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b8c:	2208      	movs	r2, #8
 8001b8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b96:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b9c:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ba2:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001ba4:	220a      	movs	r2, #10
 8001ba6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ba8:	4804      	ldr	r0, [pc, #16]	; (8001bbc <MX_SPI2_Init+0x64>)
 8001baa:	f002 fe7b 	bl	80048a4 <HAL_SPI_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001bb4:	f000 f868 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001bb8:	bf00      	nop
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200002bc 	.word	0x200002bc
 8001bc0:	40003800 	.word	0x40003800

08001bc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
 8001bce:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <MX_DMA_Init+0x3c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	4a0b      	ldr	r2, [pc, #44]	; (8001c00 <MX_DMA_Init+0x3c>)
 8001bd4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <MX_DMA_Init+0x3c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001be6:	2200      	movs	r2, #0
 8001be8:	2100      	movs	r1, #0
 8001bea:	200f      	movs	r0, #15
 8001bec:	f000 fbe3 	bl	80023b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001bf0:	200f      	movs	r0, #15
 8001bf2:	f000 fbfc 	bl	80023ee <HAL_NVIC_EnableIRQ>

}
 8001bf6:	bf00      	nop
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c0a:	f107 030c 	add.w	r3, r7, #12
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	605a      	str	r2, [r3, #4]
 8001c14:	609a      	str	r2, [r3, #8]
 8001c16:	60da      	str	r2, [r3, #12]
 8001c18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_GPIO_Init+0x7c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a17      	ldr	r2, [pc, #92]	; (8001c80 <MX_GPIO_Init+0x7c>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b15      	ldr	r3, [pc, #84]	; (8001c80 <MX_GPIO_Init+0x7c>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <MX_GPIO_Init+0x7c>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	4a10      	ldr	r2, [pc, #64]	; (8001c80 <MX_GPIO_Init+0x7c>)
 8001c40:	f043 0302 	orr.w	r3, r3, #2
 8001c44:	6313      	str	r3, [r2, #48]	; 0x30
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <MX_GPIO_Init+0x7c>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|DC_Pin|CE_Pin, GPIO_PIN_RESET);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2107      	movs	r1, #7
 8001c56:	480b      	ldr	r0, [pc, #44]	; (8001c84 <MX_GPIO_Init+0x80>)
 8001c58:	f001 f8d8 	bl	8002e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RST_Pin DC_Pin CE_Pin */
  GPIO_InitStruct.Pin = RST_Pin|DC_Pin|CE_Pin;
 8001c5c:	2307      	movs	r3, #7
 8001c5e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6c:	f107 030c 	add.w	r3, r7, #12
 8001c70:	4619      	mov	r1, r3
 8001c72:	4804      	ldr	r0, [pc, #16]	; (8001c84 <MX_GPIO_Init+0x80>)
 8001c74:	f000 ff46 	bl	8002b04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c78:	bf00      	nop
 8001c7a:	3720      	adds	r7, #32
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40020000 	.word	0x40020000

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c90:	e7fe      	b.n	8001c90 <Error_Handler+0x8>
	...

08001c94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	607b      	str	r3, [r7, #4]
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca2:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001ca4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ca8:	6453      	str	r3, [r2, #68]	; 0x44
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cb2:	607b      	str	r3, [r7, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	603b      	str	r3, [r7, #0]
 8001cba:	4b09      	ldr	r3, [pc, #36]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	4a08      	ldr	r2, [pc, #32]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc6:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <HAL_MspInit+0x4c>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800

08001ce4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08a      	sub	sp, #40	; 0x28
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cec:	f107 0314 	add.w	r3, r7, #20
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	; (8001d68 <HAL_I2C_MspInit+0x84>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d12b      	bne.n	8001d5e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	613b      	str	r3, [r7, #16]
 8001d0a:	4b18      	ldr	r3, [pc, #96]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a17      	ldr	r2, [pc, #92]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d22:	23c0      	movs	r3, #192	; 0xc0
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d26:	2312      	movs	r3, #18
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d32:	2304      	movs	r3, #4
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <HAL_I2C_MspInit+0x8c>)
 8001d3e:	f000 fee1 	bl	8002b04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <HAL_I2C_MspInit+0x88>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d5e:	bf00      	nop
 8001d60:	3728      	adds	r7, #40	; 0x28
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40005400 	.word	0x40005400
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40020400 	.word	0x40020400

08001d74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d7c:	f107 0314 	add.w	r3, r7, #20
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a30      	ldr	r2, [pc, #192]	; (8001e54 <HAL_SPI_MspInit+0xe0>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d159      	bne.n	8001e4a <HAL_SPI_MspInit+0xd6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	613b      	str	r3, [r7, #16]
 8001d9a:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <HAL_SPI_MspInit+0xe4>)
 8001d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9e:	4a2e      	ldr	r2, [pc, #184]	; (8001e58 <HAL_SPI_MspInit+0xe4>)
 8001da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001da4:	6413      	str	r3, [r2, #64]	; 0x40
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_SPI_MspInit+0xe4>)
 8001da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dae:	613b      	str	r3, [r7, #16]
 8001db0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_SPI_MspInit+0xe4>)
 8001db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dba:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <HAL_SPI_MspInit+0xe4>)
 8001dbc:	f043 0302 	orr.w	r3, r3, #2
 8001dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc2:	4b25      	ldr	r3, [pc, #148]	; (8001e58 <HAL_SPI_MspInit+0xe4>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8001dce:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001de0:	2305      	movs	r3, #5
 8001de2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	481c      	ldr	r0, [pc, #112]	; (8001e5c <HAL_SPI_MspInit+0xe8>)
 8001dec:	f000 fe8a 	bl	8002b04 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001df0:	4b1b      	ldr	r3, [pc, #108]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001df2:	4a1c      	ldr	r2, [pc, #112]	; (8001e64 <HAL_SPI_MspInit+0xf0>)
 8001df4:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dfc:	4b18      	ldr	r3, [pc, #96]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001dfe:	2240      	movs	r2, #64	; 0x40
 8001e00:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e02:	4b17      	ldr	r3, [pc, #92]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e08:	4b15      	ldr	r3, [pc, #84]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0e:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e16:	4b12      	ldr	r3, [pc, #72]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8001e1c:	4b10      	ldr	r3, [pc, #64]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e22:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001e2e:	480c      	ldr	r0, [pc, #48]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001e30:	f000 faf8 	bl	8002424 <HAL_DMA_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8001e3a:	f7ff ff25 	bl	8001c88 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001e42:	649a      	str	r2, [r3, #72]	; 0x48
 8001e44:	4a06      	ldr	r2, [pc, #24]	; (8001e60 <HAL_SPI_MspInit+0xec>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3728      	adds	r7, #40	; 0x28
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40003800 	.word	0x40003800
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	40020400 	.word	0x40020400
 8001e60:	20000314 	.word	0x20000314
 8001e64:	40026070 	.word	0x40026070

08001e68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e6c:	e7fe      	b.n	8001e6c <NMI_Handler+0x4>

08001e6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e72:	e7fe      	b.n	8001e72 <HardFault_Handler+0x4>

08001e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e78:	e7fe      	b.n	8001e78 <MemManage_Handler+0x4>

08001e7a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e7e:	e7fe      	b.n	8001e7e <BusFault_Handler+0x4>

08001e80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e84:	e7fe      	b.n	8001e84 <UsageFault_Handler+0x4>

08001e86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb4:	f000 f960 	bl	8002178 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001ec0:	4802      	ldr	r0, [pc, #8]	; (8001ecc <DMA1_Stream4_IRQHandler+0x10>)
 8001ec2:	f000 fbb5 	bl	8002630 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000314 	.word	0x20000314

08001ed0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  return 1;
 8001ed4:	2301      	movs	r3, #1
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <_kill>:

int _kill(int pid, int sig)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001eea:	f003 fd63 	bl	80059b4 <__errno>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2216      	movs	r2, #22
 8001ef2:	601a      	str	r2, [r3, #0]
  return -1;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_exit>:

void _exit (int status)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ffe7 	bl	8001ee0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001f12:	e7fe      	b.n	8001f12 <_exit+0x12>

08001f14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	60b9      	str	r1, [r7, #8]
 8001f1e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f20:	2300      	movs	r3, #0
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	e00a      	b.n	8001f3c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001f26:	f3af 8000 	nop.w
 8001f2a:	4601      	mov	r1, r0
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	60ba      	str	r2, [r7, #8]
 8001f32:	b2ca      	uxtb	r2, r1
 8001f34:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	3301      	adds	r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697a      	ldr	r2, [r7, #20]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	dbf0      	blt.n	8001f26 <_read+0x12>
  }

  return len;
 8001f44:	687b      	ldr	r3, [r7, #4]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3718      	adds	r7, #24
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b086      	sub	sp, #24
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	60f8      	str	r0, [r7, #12]
 8001f56:	60b9      	str	r1, [r7, #8]
 8001f58:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e009      	b.n	8001f74 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	1c5a      	adds	r2, r3, #1
 8001f64:	60ba      	str	r2, [r7, #8]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	3301      	adds	r3, #1
 8001f72:	617b      	str	r3, [r7, #20]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	dbf1      	blt.n	8001f60 <_write+0x12>
  }
  return len;
 8001f7c:	687b      	ldr	r3, [r7, #4]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <_close>:

int _close(int file)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
 8001fa6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fae:	605a      	str	r2, [r3, #4]
  return 0;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <_isatty>:

int _isatty(int file)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001fc6:	2301      	movs	r3, #1
}
 8001fc8:	4618      	mov	r0, r3
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	60f8      	str	r0, [r7, #12]
 8001fdc:	60b9      	str	r1, [r7, #8]
 8001fde:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b086      	sub	sp, #24
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ff8:	4a14      	ldr	r2, [pc, #80]	; (800204c <_sbrk+0x5c>)
 8001ffa:	4b15      	ldr	r3, [pc, #84]	; (8002050 <_sbrk+0x60>)
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002004:	4b13      	ldr	r3, [pc, #76]	; (8002054 <_sbrk+0x64>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d102      	bne.n	8002012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <_sbrk+0x64>)
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <_sbrk+0x68>)
 8002010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <_sbrk+0x64>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4413      	add	r3, r2
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	429a      	cmp	r2, r3
 800201e:	d207      	bcs.n	8002030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002020:	f003 fcc8 	bl	80059b4 <__errno>
 8002024:	4603      	mov	r3, r0
 8002026:	220c      	movs	r2, #12
 8002028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800202a:	f04f 33ff 	mov.w	r3, #4294967295
 800202e:	e009      	b.n	8002044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <_sbrk+0x64>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002036:	4b07      	ldr	r3, [pc, #28]	; (8002054 <_sbrk+0x64>)
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4413      	add	r3, r2
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <_sbrk+0x64>)
 8002040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002042:	68fb      	ldr	r3, [r7, #12]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20018000 	.word	0x20018000
 8002050:	00000400 	.word	0x00000400
 8002054:	20000374 	.word	0x20000374
 8002058:	200004c8 	.word	0x200004c8

0800205c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002060:	4b06      	ldr	r3, [pc, #24]	; (800207c <SystemInit+0x20>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002066:	4a05      	ldr	r2, [pc, #20]	; (800207c <SystemInit+0x20>)
 8002068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800206c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002070:	bf00      	nop
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002084:	480d      	ldr	r0, [pc, #52]	; (80020bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002086:	490e      	ldr	r1, [pc, #56]	; (80020c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002088:	4a0e      	ldr	r2, [pc, #56]	; (80020c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800208c:	e002      	b.n	8002094 <LoopCopyDataInit>

0800208e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800208e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002092:	3304      	adds	r3, #4

08002094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002098:	d3f9      	bcc.n	800208e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800209a:	4a0b      	ldr	r2, [pc, #44]	; (80020c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800209c:	4c0b      	ldr	r4, [pc, #44]	; (80020cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020a0:	e001      	b.n	80020a6 <LoopFillZerobss>

080020a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020a4:	3204      	adds	r2, #4

080020a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020a8:	d3fb      	bcc.n	80020a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020aa:	f7ff ffd7 	bl	800205c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020ae:	f003 fc87 	bl	80059c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020b2:	f7ff fcab 	bl	8001a0c <main>
  bx  lr    
 80020b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020b8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020c0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020c4:	08008104 	.word	0x08008104
  ldr r2, =_sbss
 80020c8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020cc:	200004c8 	.word	0x200004c8

080020d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020d0:	e7fe      	b.n	80020d0 <ADC_IRQHandler>
	...

080020d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020d8:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <HAL_Init+0x40>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a0d      	ldr	r2, [pc, #52]	; (8002114 <HAL_Init+0x40>)
 80020de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <HAL_Init+0x40>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a0a      	ldr	r2, [pc, #40]	; (8002114 <HAL_Init+0x40>)
 80020ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <HAL_Init+0x40>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a07      	ldr	r2, [pc, #28]	; (8002114 <HAL_Init+0x40>)
 80020f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fc:	2003      	movs	r0, #3
 80020fe:	f000 f94f 	bl	80023a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002102:	200f      	movs	r0, #15
 8002104:	f000 f808 	bl	8002118 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002108:	f7ff fdc4 	bl	8001c94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023c00 	.word	0x40023c00

08002118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002120:	4b12      	ldr	r3, [pc, #72]	; (800216c <HAL_InitTick+0x54>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	4b12      	ldr	r3, [pc, #72]	; (8002170 <HAL_InitTick+0x58>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4619      	mov	r1, r3
 800212a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800212e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002132:	fbb2 f3f3 	udiv	r3, r2, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f000 f967 	bl	800240a <HAL_SYSTICK_Config>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e00e      	b.n	8002164 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b0f      	cmp	r3, #15
 800214a:	d80a      	bhi.n	8002162 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800214c:	2200      	movs	r2, #0
 800214e:	6879      	ldr	r1, [r7, #4]
 8002150:	f04f 30ff 	mov.w	r0, #4294967295
 8002154:	f000 f92f 	bl	80023b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002158:	4a06      	ldr	r2, [pc, #24]	; (8002174 <HAL_InitTick+0x5c>)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	e000      	b.n	8002164 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3708      	adds	r7, #8
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	20000000 	.word	0x20000000
 8002170:	20000008 	.word	0x20000008
 8002174:	20000004 	.word	0x20000004

08002178 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800217c:	4b06      	ldr	r3, [pc, #24]	; (8002198 <HAL_IncTick+0x20>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	461a      	mov	r2, r3
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_IncTick+0x24>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4413      	add	r3, r2
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_IncTick+0x24>)
 800218a:	6013      	str	r3, [r2, #0]
}
 800218c:	bf00      	nop
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000008 	.word	0x20000008
 800219c:	20000378 	.word	0x20000378

080021a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  return uwTick;
 80021a4:	4b03      	ldr	r3, [pc, #12]	; (80021b4 <HAL_GetTick+0x14>)
 80021a6:	681b      	ldr	r3, [r3, #0]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	20000378 	.word	0x20000378

080021b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff ffee 	bl	80021a0 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d0:	d005      	beq.n	80021de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <HAL_Delay+0x44>)
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	461a      	mov	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4413      	add	r3, r2
 80021dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021de:	bf00      	nop
 80021e0:	f7ff ffde 	bl	80021a0 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d8f7      	bhi.n	80021e0 <HAL_Delay+0x28>
  {
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	20000008 	.word	0x20000008

08002200 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002200:	b480      	push	{r7}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002216:	68ba      	ldr	r2, [r7, #8]
 8002218:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800221c:	4013      	ands	r3, r2
 800221e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002228:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800222c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002230:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002232:	4a04      	ldr	r2, [pc, #16]	; (8002244 <__NVIC_SetPriorityGrouping+0x44>)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	60d3      	str	r3, [r2, #12]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800224c:	4b04      	ldr	r3, [pc, #16]	; (8002260 <__NVIC_GetPriorityGrouping+0x18>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	0a1b      	lsrs	r3, r3, #8
 8002252:	f003 0307 	and.w	r3, r3, #7
}
 8002256:	4618      	mov	r0, r3
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr
 8002260:	e000ed00 	.word	0xe000ed00

08002264 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db0b      	blt.n	800228e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	f003 021f 	and.w	r2, r3, #31
 800227c:	4907      	ldr	r1, [pc, #28]	; (800229c <__NVIC_EnableIRQ+0x38>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	095b      	lsrs	r3, r3, #5
 8002284:	2001      	movs	r0, #1
 8002286:	fa00 f202 	lsl.w	r2, r0, r2
 800228a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000e100 	.word	0xe000e100

080022a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	6039      	str	r1, [r7, #0]
 80022aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	db0a      	blt.n	80022ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	b2da      	uxtb	r2, r3
 80022b8:	490c      	ldr	r1, [pc, #48]	; (80022ec <__NVIC_SetPriority+0x4c>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	0112      	lsls	r2, r2, #4
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	440b      	add	r3, r1
 80022c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c8:	e00a      	b.n	80022e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	4908      	ldr	r1, [pc, #32]	; (80022f0 <__NVIC_SetPriority+0x50>)
 80022d0:	79fb      	ldrb	r3, [r7, #7]
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	3b04      	subs	r3, #4
 80022d8:	0112      	lsls	r2, r2, #4
 80022da:	b2d2      	uxtb	r2, r2
 80022dc:	440b      	add	r3, r1
 80022de:	761a      	strb	r2, [r3, #24]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	e000e100 	.word	0xe000e100
 80022f0:	e000ed00 	.word	0xe000ed00

080022f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b089      	sub	sp, #36	; 0x24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f1c3 0307 	rsb	r3, r3, #7
 800230e:	2b04      	cmp	r3, #4
 8002310:	bf28      	it	cs
 8002312:	2304      	movcs	r3, #4
 8002314:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3304      	adds	r3, #4
 800231a:	2b06      	cmp	r3, #6
 800231c:	d902      	bls.n	8002324 <NVIC_EncodePriority+0x30>
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3b03      	subs	r3, #3
 8002322:	e000      	b.n	8002326 <NVIC_EncodePriority+0x32>
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002328:	f04f 32ff 	mov.w	r2, #4294967295
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	401a      	ands	r2, r3
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800233c:	f04f 31ff 	mov.w	r1, #4294967295
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fa01 f303 	lsl.w	r3, r1, r3
 8002346:	43d9      	mvns	r1, r3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800234c:	4313      	orrs	r3, r2
         );
}
 800234e:	4618      	mov	r0, r3
 8002350:	3724      	adds	r7, #36	; 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3b01      	subs	r3, #1
 8002368:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800236c:	d301      	bcc.n	8002372 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800236e:	2301      	movs	r3, #1
 8002370:	e00f      	b.n	8002392 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002372:	4a0a      	ldr	r2, [pc, #40]	; (800239c <SysTick_Config+0x40>)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800237a:	210f      	movs	r1, #15
 800237c:	f04f 30ff 	mov.w	r0, #4294967295
 8002380:	f7ff ff8e 	bl	80022a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002384:	4b05      	ldr	r3, [pc, #20]	; (800239c <SysTick_Config+0x40>)
 8002386:	2200      	movs	r2, #0
 8002388:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800238a:	4b04      	ldr	r3, [pc, #16]	; (800239c <SysTick_Config+0x40>)
 800238c:	2207      	movs	r2, #7
 800238e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002390:	2300      	movs	r3, #0
}
 8002392:	4618      	mov	r0, r3
 8002394:	3708      	adds	r7, #8
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	e000e010 	.word	0xe000e010

080023a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f7ff ff29 	bl	8002200 <__NVIC_SetPriorityGrouping>
}
 80023ae:	bf00      	nop
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b086      	sub	sp, #24
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	4603      	mov	r3, r0
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023c4:	2300      	movs	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c8:	f7ff ff3e 	bl	8002248 <__NVIC_GetPriorityGrouping>
 80023cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	68b9      	ldr	r1, [r7, #8]
 80023d2:	6978      	ldr	r0, [r7, #20]
 80023d4:	f7ff ff8e 	bl	80022f4 <NVIC_EncodePriority>
 80023d8:	4602      	mov	r2, r0
 80023da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff ff5d 	bl	80022a0 <__NVIC_SetPriority>
}
 80023e6:	bf00      	nop
 80023e8:	3718      	adds	r7, #24
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff ff31 	bl	8002264 <__NVIC_EnableIRQ>
}
 8002402:	bf00      	nop
 8002404:	3708      	adds	r7, #8
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b082      	sub	sp, #8
 800240e:	af00      	add	r7, sp, #0
 8002410:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f7ff ffa2 	bl	800235c <SysTick_Config>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7ff feb6 	bl	80021a0 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e099      	b.n	8002574 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2200      	movs	r2, #0
 800244c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 0201 	bic.w	r2, r2, #1
 800245e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002460:	e00f      	b.n	8002482 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002462:	f7ff fe9d 	bl	80021a0 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	2b05      	cmp	r3, #5
 800246e:	d908      	bls.n	8002482 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2220      	movs	r2, #32
 8002474:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2203      	movs	r2, #3
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e078      	b.n	8002574 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0301 	and.w	r3, r3, #1
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e8      	bne.n	8002462 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4b38      	ldr	r3, [pc, #224]	; (800257c <HAL_DMA_Init+0x158>)
 800249c:	4013      	ands	r3, r2
 800249e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685a      	ldr	r2, [r3, #4]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d107      	bne.n	80024ec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e4:	4313      	orrs	r3, r2
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	f023 0307 	bic.w	r3, r3, #7
 8002502:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	4313      	orrs	r3, r2
 800250c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	2b04      	cmp	r3, #4
 8002514:	d117      	bne.n	8002546 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251a:	697a      	ldr	r2, [r7, #20]
 800251c:	4313      	orrs	r3, r2
 800251e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00e      	beq.n	8002546 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fa6f 	bl	8002a0c <DMA_CheckFifoParam>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d008      	beq.n	8002546 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2240      	movs	r2, #64	; 0x40
 8002538:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002542:	2301      	movs	r3, #1
 8002544:	e016      	b.n	8002574 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fa26 	bl	80029a0 <DMA_CalcBaseAndBitshift>
 8002554:	4603      	mov	r3, r0
 8002556:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255c:	223f      	movs	r2, #63	; 0x3f
 800255e:	409a      	lsls	r2, r3
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2200      	movs	r2, #0
 8002568:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2201      	movs	r2, #1
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	f010803f 	.word	0xf010803f

08002580 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002596:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800259e:	2b01      	cmp	r3, #1
 80025a0:	d101      	bne.n	80025a6 <HAL_DMA_Start_IT+0x26>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e040      	b.n	8002628 <HAL_DMA_Start_IT+0xa8>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d12f      	bne.n	800261a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2202      	movs	r2, #2
 80025be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2200      	movs	r2, #0
 80025c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f9b8 	bl	8002944 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d8:	223f      	movs	r2, #63	; 0x3f
 80025da:	409a      	lsls	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0216 	orr.w	r2, r2, #22
 80025ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d007      	beq.n	8002608 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0208 	orr.w	r2, r2, #8
 8002606:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f042 0201 	orr.w	r2, r2, #1
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	e005      	b.n	8002626 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002626:	7dfb      	ldrb	r3, [r7, #23]
}
 8002628:	4618      	mov	r0, r3
 800262a:	3718      	adds	r7, #24
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800263c:	4b8e      	ldr	r3, [pc, #568]	; (8002878 <HAL_DMA_IRQHandler+0x248>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a8e      	ldr	r2, [pc, #568]	; (800287c <HAL_DMA_IRQHandler+0x24c>)
 8002642:	fba2 2303 	umull	r2, r3, r2, r3
 8002646:	0a9b      	lsrs	r3, r3, #10
 8002648:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800265a:	2208      	movs	r2, #8
 800265c:	409a      	lsls	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	4013      	ands	r3, r2
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01a      	beq.n	800269c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0304 	and.w	r3, r3, #4
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f022 0204 	bic.w	r2, r2, #4
 8002682:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002688:	2208      	movs	r2, #8
 800268a:	409a      	lsls	r2, r3
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002694:	f043 0201 	orr.w	r2, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a0:	2201      	movs	r2, #1
 80026a2:	409a      	lsls	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	4013      	ands	r3, r2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d012      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2201      	movs	r2, #1
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d6:	2204      	movs	r2, #4
 80026d8:	409a      	lsls	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4013      	ands	r3, r2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d012      	beq.n	8002708 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00b      	beq.n	8002708 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f4:	2204      	movs	r2, #4
 80026f6:	409a      	lsls	r2, r3
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002700:	f043 0204 	orr.w	r2, r3, #4
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800270c:	2210      	movs	r2, #16
 800270e:	409a      	lsls	r2, r3
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d043      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d03c      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272a:	2210      	movs	r2, #16
 800272c:	409a      	lsls	r2, r3
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800273c:	2b00      	cmp	r3, #0
 800273e:	d018      	beq.n	8002772 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d108      	bne.n	8002760 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d024      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	4798      	blx	r3
 800275e:	e01f      	b.n	80027a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01b      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4798      	blx	r3
 8002770:	e016      	b.n	80027a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d107      	bne.n	8002790 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f022 0208 	bic.w	r2, r2, #8
 800278e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d003      	beq.n	80027a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a4:	2220      	movs	r2, #32
 80027a6:	409a      	lsls	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4013      	ands	r3, r2
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	f000 808f 	beq.w	80028d0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0310 	and.w	r3, r3, #16
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 8087 	beq.w	80028d0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	2220      	movs	r2, #32
 80027c8:	409a      	lsls	r2, r3
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	2b05      	cmp	r3, #5
 80027d8:	d136      	bne.n	8002848 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 0216 	bic.w	r2, r2, #22
 80027e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695a      	ldr	r2, [r3, #20]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d103      	bne.n	800280a <HAL_DMA_IRQHandler+0x1da>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002806:	2b00      	cmp	r3, #0
 8002808:	d007      	beq.n	800281a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f022 0208 	bic.w	r2, r2, #8
 8002818:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	223f      	movs	r2, #63	; 0x3f
 8002820:	409a      	lsls	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800283a:	2b00      	cmp	r3, #0
 800283c:	d07e      	beq.n	800293c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4798      	blx	r3
        }
        return;
 8002846:	e079      	b.n	800293c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d01d      	beq.n	8002892 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10d      	bne.n	8002880 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002868:	2b00      	cmp	r3, #0
 800286a:	d031      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	4798      	blx	r3
 8002874:	e02c      	b.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
 8002876:	bf00      	nop
 8002878:	20000000 	.word	0x20000000
 800287c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002884:	2b00      	cmp	r3, #0
 8002886:	d023      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
 8002890:	e01e      	b.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10f      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0210 	bic.w	r2, r2, #16
 80028ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d032      	beq.n	800293e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d022      	beq.n	800292a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2205      	movs	r2, #5
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3301      	adds	r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	429a      	cmp	r2, r3
 8002906:	d307      	bcc.n	8002918 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d1f2      	bne.n	80028fc <HAL_DMA_IRQHandler+0x2cc>
 8002916:	e000      	b.n	800291a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002918:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800292e:	2b00      	cmp	r3, #0
 8002930:	d005      	beq.n	800293e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
 800293a:	e000      	b.n	800293e <HAL_DMA_IRQHandler+0x30e>
        return;
 800293c:	bf00      	nop
    }
  }
}
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002960:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d108      	bne.n	8002984 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68ba      	ldr	r2, [r7, #8]
 8002980:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002982:	e007      	b.n	8002994 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	60da      	str	r2, [r3, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3b10      	subs	r3, #16
 80029b0:	4a14      	ldr	r2, [pc, #80]	; (8002a04 <DMA_CalcBaseAndBitshift+0x64>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80029ba:	4a13      	ldr	r2, [pc, #76]	; (8002a08 <DMA_CalcBaseAndBitshift+0x68>)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4413      	add	r3, r2
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	461a      	mov	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d909      	bls.n	80029e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029d6:	f023 0303 	bic.w	r3, r3, #3
 80029da:	1d1a      	adds	r2, r3, #4
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	659a      	str	r2, [r3, #88]	; 0x58
 80029e0:	e007      	b.n	80029f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80029ea:	f023 0303 	bic.w	r3, r3, #3
 80029ee:	687a      	ldr	r2, [r7, #4]
 80029f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	aaaaaaab 	.word	0xaaaaaaab
 8002a08:	08007d78 	.word	0x08007d78

08002a0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a14:	2300      	movs	r3, #0
 8002a16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	699b      	ldr	r3, [r3, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11f      	bne.n	8002a66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d856      	bhi.n	8002ada <DMA_CheckFifoParam+0xce>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <DMA_CheckFifoParam+0x28>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a45 	.word	0x08002a45
 8002a38:	08002a57 	.word	0x08002a57
 8002a3c:	08002a45 	.word	0x08002a45
 8002a40:	08002adb 	.word	0x08002adb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d046      	beq.n	8002ade <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a54:	e043      	b.n	8002ade <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a5e:	d140      	bne.n	8002ae2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a64:	e03d      	b.n	8002ae2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a6e:	d121      	bne.n	8002ab4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d837      	bhi.n	8002ae6 <DMA_CheckFifoParam+0xda>
 8002a76:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <DMA_CheckFifoParam+0x70>)
 8002a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7c:	08002a8d 	.word	0x08002a8d
 8002a80:	08002a93 	.word	0x08002a93
 8002a84:	08002a8d 	.word	0x08002a8d
 8002a88:	08002aa5 	.word	0x08002aa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a90:	e030      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d025      	beq.n	8002aea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aa2:	e022      	b.n	8002aea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002aac:	d11f      	bne.n	8002aee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ab2:	e01c      	b.n	8002aee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d903      	bls.n	8002ac2 <DMA_CheckFifoParam+0xb6>
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d003      	beq.n	8002ac8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ac0:	e018      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac6:	e015      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00e      	beq.n	8002af2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad8:	e00b      	b.n	8002af2 <DMA_CheckFifoParam+0xe6>
      break;
 8002ada:	bf00      	nop
 8002adc:	e00a      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ade:	bf00      	nop
 8002ae0:	e008      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae2:	bf00      	nop
 8002ae4:	e006      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002ae6:	bf00      	nop
 8002ae8:	e004      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002aea:	bf00      	nop
 8002aec:	e002      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002aee:	bf00      	nop
 8002af0:	e000      	b.n	8002af4 <DMA_CheckFifoParam+0xe8>
      break;
 8002af2:	bf00      	nop
    }
  } 
  
  return status; 
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop

08002b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b089      	sub	sp, #36	; 0x24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b16:	2300      	movs	r3, #0
 8002b18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	61fb      	str	r3, [r7, #28]
 8002b1e:	e159      	b.n	8002dd4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b20:	2201      	movs	r2, #1
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	f040 8148 	bne.w	8002dce <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d005      	beq.n	8002b56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d130      	bne.n	8002bb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	69ba      	ldr	r2, [r7, #24]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69ba      	ldr	r2, [r7, #24]
 8002b84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	69ba      	ldr	r2, [r7, #24]
 8002b98:	4013      	ands	r3, r2
 8002b9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 0201 	and.w	r2, r3, #1
 8002ba6:	69fb      	ldr	r3, [r7, #28]
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	69ba      	ldr	r2, [r7, #24]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	f003 0303 	and.w	r3, r3, #3
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d017      	beq.n	8002bf4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	2203      	movs	r2, #3
 8002bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd4:	43db      	mvns	r3, r3
 8002bd6:	69ba      	ldr	r2, [r7, #24]
 8002bd8:	4013      	ands	r3, r2
 8002bda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	689a      	ldr	r2, [r3, #8]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	fa02 f303 	lsl.w	r3, r2, r3
 8002be8:	69ba      	ldr	r2, [r7, #24]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0303 	and.w	r3, r3, #3
 8002bfc:	2b02      	cmp	r3, #2
 8002bfe:	d123      	bne.n	8002c48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f003 0307 	and.w	r3, r3, #7
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	220f      	movs	r2, #15
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f003 0307 	and.w	r3, r3, #7
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	08da      	lsrs	r2, r3, #3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	3208      	adds	r2, #8
 8002c42:	69b9      	ldr	r1, [r7, #24]
 8002c44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	2203      	movs	r2, #3
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	69ba      	ldr	r2, [r7, #24]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0203 	and.w	r2, r3, #3
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	005b      	lsls	r3, r3, #1
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80a2 	beq.w	8002dce <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	4b57      	ldr	r3, [pc, #348]	; (8002dec <HAL_GPIO_Init+0x2e8>)
 8002c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c92:	4a56      	ldr	r2, [pc, #344]	; (8002dec <HAL_GPIO_Init+0x2e8>)
 8002c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c98:	6453      	str	r3, [r2, #68]	; 0x44
 8002c9a:	4b54      	ldr	r3, [pc, #336]	; (8002dec <HAL_GPIO_Init+0x2e8>)
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ca6:	4a52      	ldr	r2, [pc, #328]	; (8002df0 <HAL_GPIO_Init+0x2ec>)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	089b      	lsrs	r3, r3, #2
 8002cac:	3302      	adds	r3, #2
 8002cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f003 0303 	and.w	r3, r3, #3
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	220f      	movs	r2, #15
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43db      	mvns	r3, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	4a49      	ldr	r2, [pc, #292]	; (8002df4 <HAL_GPIO_Init+0x2f0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d019      	beq.n	8002d06 <HAL_GPIO_Init+0x202>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a48      	ldr	r2, [pc, #288]	; (8002df8 <HAL_GPIO_Init+0x2f4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_GPIO_Init+0x1fe>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	4a47      	ldr	r2, [pc, #284]	; (8002dfc <HAL_GPIO_Init+0x2f8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d00d      	beq.n	8002cfe <HAL_GPIO_Init+0x1fa>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a46      	ldr	r2, [pc, #280]	; (8002e00 <HAL_GPIO_Init+0x2fc>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d007      	beq.n	8002cfa <HAL_GPIO_Init+0x1f6>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a45      	ldr	r2, [pc, #276]	; (8002e04 <HAL_GPIO_Init+0x300>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d101      	bne.n	8002cf6 <HAL_GPIO_Init+0x1f2>
 8002cf2:	2304      	movs	r3, #4
 8002cf4:	e008      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002cf6:	2307      	movs	r3, #7
 8002cf8:	e006      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e004      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e002      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002d02:	2301      	movs	r3, #1
 8002d04:	e000      	b.n	8002d08 <HAL_GPIO_Init+0x204>
 8002d06:	2300      	movs	r3, #0
 8002d08:	69fa      	ldr	r2, [r7, #28]
 8002d0a:	f002 0203 	and.w	r2, r2, #3
 8002d0e:	0092      	lsls	r2, r2, #2
 8002d10:	4093      	lsls	r3, r2
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d18:	4935      	ldr	r1, [pc, #212]	; (8002df0 <HAL_GPIO_Init+0x2ec>)
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	089b      	lsrs	r3, r3, #2
 8002d1e:	3302      	adds	r3, #2
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	4013      	ands	r3, r2
 8002d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d42:	69ba      	ldr	r2, [r7, #24]
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002d4a:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d4c:	69bb      	ldr	r3, [r7, #24]
 8002d4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d50:	4b2d      	ldr	r3, [pc, #180]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	43db      	mvns	r3, r3
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	4013      	ands	r3, r2
 8002d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d9e:	4a1a      	ldr	r2, [pc, #104]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002da4:	4b18      	ldr	r3, [pc, #96]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002dc8:	4a0f      	ldr	r2, [pc, #60]	; (8002e08 <HAL_GPIO_Init+0x304>)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	2b0f      	cmp	r3, #15
 8002dd8:	f67f aea2 	bls.w	8002b20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ddc:	bf00      	nop
 8002dde:	bf00      	nop
 8002de0:	3724      	adds	r7, #36	; 0x24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	40023800 	.word	0x40023800
 8002df0:	40013800 	.word	0x40013800
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40020400 	.word	0x40020400
 8002dfc:	40020800 	.word	0x40020800
 8002e00:	40020c00 	.word	0x40020c00
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40013c00 	.word	0x40013c00

08002e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	460b      	mov	r3, r1
 8002e16:	807b      	strh	r3, [r7, #2]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e1c:	787b      	ldrb	r3, [r7, #1]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d003      	beq.n	8002e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e22:	887a      	ldrh	r2, [r7, #2]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e28:	e003      	b.n	8002e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e2a:	887b      	ldrh	r3, [r7, #2]
 8002e2c:	041a      	lsls	r2, r3, #16
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	619a      	str	r2, [r3, #24]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
	...

08002e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e12b      	b.n	80030aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f7fe ff3c 	bl	8001ce4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2224      	movs	r2, #36	; 0x24
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002ea4:	f001 fcea 	bl	800487c <HAL_RCC_GetPCLK1Freq>
 8002ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a81      	ldr	r2, [pc, #516]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d807      	bhi.n	8002ec4 <HAL_I2C_Init+0x84>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4a80      	ldr	r2, [pc, #512]	; (80030b8 <HAL_I2C_Init+0x278>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	bf94      	ite	ls
 8002ebc:	2301      	movls	r3, #1
 8002ebe:	2300      	movhi	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	e006      	b.n	8002ed2 <HAL_I2C_Init+0x92>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a7d      	ldr	r2, [pc, #500]	; (80030bc <HAL_I2C_Init+0x27c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	bf94      	ite	ls
 8002ecc:	2301      	movls	r3, #1
 8002ece:	2300      	movhi	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e0e7      	b.n	80030aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4a78      	ldr	r2, [pc, #480]	; (80030c0 <HAL_I2C_Init+0x280>)
 8002ede:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee2:	0c9b      	lsrs	r3, r3, #18
 8002ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4a6a      	ldr	r2, [pc, #424]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d802      	bhi.n	8002f14 <HAL_I2C_Init+0xd4>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	3301      	adds	r3, #1
 8002f12:	e009      	b.n	8002f28 <HAL_I2C_Init+0xe8>
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	4a69      	ldr	r2, [pc, #420]	; (80030c4 <HAL_I2C_Init+0x284>)
 8002f20:	fba2 2303 	umull	r2, r3, r2, r3
 8002f24:	099b      	lsrs	r3, r3, #6
 8002f26:	3301      	adds	r3, #1
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6812      	ldr	r2, [r2, #0]
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	495c      	ldr	r1, [pc, #368]	; (80030b4 <HAL_I2C_Init+0x274>)
 8002f44:	428b      	cmp	r3, r1
 8002f46:	d819      	bhi.n	8002f7c <HAL_I2C_Init+0x13c>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	1e59      	subs	r1, r3, #1
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	005b      	lsls	r3, r3, #1
 8002f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f56:	1c59      	adds	r1, r3, #1
 8002f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f5c:	400b      	ands	r3, r1
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_I2C_Init+0x138>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	1e59      	subs	r1, r3, #1
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f70:	3301      	adds	r3, #1
 8002f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f76:	e051      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f78:	2304      	movs	r3, #4
 8002f7a:	e04f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d111      	bne.n	8002fa8 <HAL_I2C_Init+0x168>
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	1e58      	subs	r0, r3, #1
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	005b      	lsls	r3, r3, #1
 8002f90:	440b      	add	r3, r1
 8002f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f96:	3301      	adds	r3, #1
 8002f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	bf0c      	ite	eq
 8002fa0:	2301      	moveq	r3, #1
 8002fa2:	2300      	movne	r3, #0
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	e012      	b.n	8002fce <HAL_I2C_Init+0x18e>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	1e58      	subs	r0, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6859      	ldr	r1, [r3, #4]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	0099      	lsls	r1, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	bf0c      	ite	eq
 8002fc8:	2301      	moveq	r3, #1
 8002fca:	2300      	movne	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d001      	beq.n	8002fd6 <HAL_I2C_Init+0x196>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e022      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10e      	bne.n	8002ffc <HAL_I2C_Init+0x1bc>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	1e58      	subs	r0, r3, #1
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	440b      	add	r3, r1
 8002fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ffa:	e00f      	b.n	800301c <HAL_I2C_Init+0x1dc>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	1e58      	subs	r0, r3, #1
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	0099      	lsls	r1, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003012:	3301      	adds	r3, #1
 8003014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6809      	ldr	r1, [r1, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	430a      	orrs	r2, r1
 800303e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800304a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6911      	ldr	r1, [r2, #16]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	68d2      	ldr	r2, [r2, #12]
 8003056:	4311      	orrs	r1, r2
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	430b      	orrs	r3, r1
 800305e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695a      	ldr	r2, [r3, #20]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f042 0201 	orr.w	r2, r2, #1
 800308a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2200      	movs	r2, #0
 8003090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	000186a0 	.word	0x000186a0
 80030b8:	001e847f 	.word	0x001e847f
 80030bc:	003d08ff 	.word	0x003d08ff
 80030c0:	431bde83 	.word	0x431bde83
 80030c4:	10624dd3 	.word	0x10624dd3

080030c8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b088      	sub	sp, #32
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	817b      	strh	r3, [r7, #10]
 80030da:	460b      	mov	r3, r1
 80030dc:	813b      	strh	r3, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e2:	f7ff f85d 	bl	80021a0 <HAL_GetTick>
 80030e6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	f040 80d9 	bne.w	80032a8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2319      	movs	r3, #25
 80030fc:	2201      	movs	r2, #1
 80030fe:	496d      	ldr	r1, [pc, #436]	; (80032b4 <HAL_I2C_Mem_Write+0x1ec>)
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fdad 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
 800310e:	e0cc      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_I2C_Mem_Write+0x56>
 800311a:	2302      	movs	r3, #2
 800311c:	e0c5      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d007      	beq.n	8003144 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003152:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2221      	movs	r2, #33	; 0x21
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2240      	movs	r2, #64	; 0x40
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6a3a      	ldr	r2, [r7, #32]
 800316e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003174:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a4d      	ldr	r2, [pc, #308]	; (80032b8 <HAL_I2C_Mem_Write+0x1f0>)
 8003184:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003186:	88f8      	ldrh	r0, [r7, #6]
 8003188:	893a      	ldrh	r2, [r7, #8]
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	4603      	mov	r3, r0
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fbe4 	bl	8003964 <I2C_RequestMemoryWrite>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d052      	beq.n	8003248 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e081      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fe2e 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00d      	beq.n	80031d2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ba:	2b04      	cmp	r3, #4
 80031bc:	d107      	bne.n	80031ce <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e06b      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031ec:	3b01      	subs	r3, #1
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29a      	uxth	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d11b      	bne.n	8003248 <HAL_I2C_Mem_Write+0x180>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003214:	2b00      	cmp	r3, #0
 8003216:	d017      	beq.n	8003248 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	781a      	ldrb	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	1c5a      	adds	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003232:	3b01      	subs	r3, #1
 8003234:	b29a      	uxth	r2, r3
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1aa      	bne.n	80031a6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fe1a 	bl	8003e8e <I2C_WaitOnBTFFlagUntilTimeout>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00d      	beq.n	800327c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	2b04      	cmp	r3, #4
 8003266:	d107      	bne.n	8003278 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003276:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e016      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800328a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80032a4:	2300      	movs	r3, #0
 80032a6:	e000      	b.n	80032aa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80032a8:	2302      	movs	r3, #2
  }
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	00100002 	.word	0x00100002
 80032b8:	ffff0000 	.word	0xffff0000

080032bc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08c      	sub	sp, #48	; 0x30
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	4608      	mov	r0, r1
 80032c6:	4611      	mov	r1, r2
 80032c8:	461a      	mov	r2, r3
 80032ca:	4603      	mov	r3, r0
 80032cc:	817b      	strh	r3, [r7, #10]
 80032ce:	460b      	mov	r3, r1
 80032d0:	813b      	strh	r3, [r7, #8]
 80032d2:	4613      	mov	r3, r2
 80032d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032d6:	f7fe ff63 	bl	80021a0 <HAL_GetTick>
 80032da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	f040 8208 	bne.w	80036fa <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ec:	9300      	str	r3, [sp, #0]
 80032ee:	2319      	movs	r3, #25
 80032f0:	2201      	movs	r2, #1
 80032f2:	497b      	ldr	r1, [pc, #492]	; (80034e0 <HAL_I2C_Mem_Read+0x224>)
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 fcb3 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003300:	2302      	movs	r3, #2
 8003302:	e1fb      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330a:	2b01      	cmp	r3, #1
 800330c:	d101      	bne.n	8003312 <HAL_I2C_Mem_Read+0x56>
 800330e:	2302      	movs	r3, #2
 8003310:	e1f4      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 0301 	and.w	r3, r3, #1
 8003324:	2b01      	cmp	r3, #1
 8003326:	d007      	beq.n	8003338 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f042 0201 	orr.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003346:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2222      	movs	r2, #34	; 0x22
 800334c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2240      	movs	r2, #64	; 0x40
 8003354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003362:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003368:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800336e:	b29a      	uxth	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a5b      	ldr	r2, [pc, #364]	; (80034e4 <HAL_I2C_Mem_Read+0x228>)
 8003378:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800337a:	88f8      	ldrh	r0, [r7, #6]
 800337c:	893a      	ldrh	r2, [r7, #8]
 800337e:	8979      	ldrh	r1, [r7, #10]
 8003380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4603      	mov	r3, r0
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f000 fb80 	bl	8003a90 <I2C_RequestMemoryRead>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e1b0      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d113      	bne.n	80033ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033a2:	2300      	movs	r3, #0
 80033a4:	623b      	str	r3, [r7, #32]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	623b      	str	r3, [r7, #32]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	623b      	str	r3, [r7, #32]
 80033b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	e184      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d11b      	bne.n	800340a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	61fb      	str	r3, [r7, #28]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	699b      	ldr	r3, [r3, #24]
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	e164      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	2b02      	cmp	r3, #2
 8003410:	d11b      	bne.n	800344a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003420:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	681a      	ldr	r2, [r3, #0]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	61bb      	str	r3, [r7, #24]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	61bb      	str	r3, [r7, #24]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	e144      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800344a:	2300      	movs	r3, #0
 800344c:	617b      	str	r3, [r7, #20]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	617b      	str	r3, [r7, #20]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003460:	e138      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003466:	2b03      	cmp	r3, #3
 8003468:	f200 80f1 	bhi.w	800364e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003470:	2b01      	cmp	r3, #1
 8003472:	d123      	bne.n	80034bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003476:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fd49 	bl	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e139      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	691a      	ldr	r2, [r3, #16]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a4:	3b01      	subs	r3, #1
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034ba:	e10b      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d14e      	bne.n	8003562 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	9300      	str	r3, [sp, #0]
 80034c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ca:	2200      	movs	r2, #0
 80034cc:	4906      	ldr	r1, [pc, #24]	; (80034e8 <HAL_I2C_Mem_Read+0x22c>)
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 fbc6 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d008      	beq.n	80034ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e10e      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
 80034de:	bf00      	nop
 80034e0:	00100002 	.word	0x00100002
 80034e4:	ffff0000 	.word	0xffff0000
 80034e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003518:	3b01      	subs	r3, #1
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	b2d2      	uxtb	r2, r2
 800353a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003556:	b29b      	uxth	r3, r3
 8003558:	3b01      	subs	r3, #1
 800355a:	b29a      	uxth	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003560:	e0b8      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003568:	2200      	movs	r2, #0
 800356a:	4966      	ldr	r1, [pc, #408]	; (8003704 <HAL_I2C_Mem_Read+0x448>)
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f000 fb77 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d001      	beq.n	800357c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0bf      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800358a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691a      	ldr	r2, [r3, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80035be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	2200      	movs	r2, #0
 80035c6:	494f      	ldr	r1, [pc, #316]	; (8003704 <HAL_I2C_Mem_Read+0x448>)
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fb49 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e091      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	b2d2      	uxtb	r2, r2
 80035f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fa:	1c5a      	adds	r2, r3, #1
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003604:	3b01      	subs	r3, #1
 8003606:	b29a      	uxth	r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	3b01      	subs	r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003624:	b2d2      	uxtb	r2, r2
 8003626:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	1c5a      	adds	r2, r3, #1
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003636:	3b01      	subs	r3, #1
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003642:	b29b      	uxth	r3, r3
 8003644:	3b01      	subs	r3, #1
 8003646:	b29a      	uxth	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800364c:	e042      	b.n	80036d4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800364e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003650:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003652:	68f8      	ldr	r0, [r7, #12]
 8003654:	f000 fc5c 	bl	8003f10 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800365e:	2301      	movs	r3, #1
 8003660:	e04c      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	691a      	ldr	r2, [r3, #16]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003674:	1c5a      	adds	r2, r3, #1
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800367e:	3b01      	subs	r3, #1
 8003680:	b29a      	uxth	r2, r3
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800368a:	b29b      	uxth	r3, r3
 800368c:	3b01      	subs	r3, #1
 800368e:	b29a      	uxth	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0304 	and.w	r3, r3, #4
 800369e:	2b04      	cmp	r3, #4
 80036a0:	d118      	bne.n	80036d4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	691a      	ldr	r2, [r3, #16]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036be:	3b01      	subs	r3, #1
 80036c0:	b29a      	uxth	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f47f aec2 	bne.w	8003462 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	e000      	b.n	80036fc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80036fa:	2302      	movs	r3, #2
  }
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3728      	adds	r7, #40	; 0x28
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	00010004 	.word	0x00010004

08003708 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b08a      	sub	sp, #40	; 0x28
 800370c:	af02      	add	r7, sp, #8
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	607a      	str	r2, [r7, #4]
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	460b      	mov	r3, r1
 8003716:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003718:	f7fe fd42 	bl	80021a0 <HAL_GetTick>
 800371c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b20      	cmp	r3, #32
 800372c:	f040 8111 	bne.w	8003952 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	9300      	str	r3, [sp, #0]
 8003734:	2319      	movs	r3, #25
 8003736:	2201      	movs	r2, #1
 8003738:	4988      	ldr	r1, [pc, #544]	; (800395c <HAL_I2C_IsDeviceReady+0x254>)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fa90 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
 8003748:	e104      	b.n	8003954 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_I2C_IsDeviceReady+0x50>
 8003754:	2302      	movs	r3, #2
 8003756:	e0fd      	b.n	8003954 <HAL_I2C_IsDeviceReady+0x24c>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b01      	cmp	r3, #1
 800376c:	d007      	beq.n	800377e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f042 0201 	orr.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2224      	movs	r2, #36	; 0x24
 8003792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4a70      	ldr	r2, [pc, #448]	; (8003960 <HAL_I2C_IsDeviceReady+0x258>)
 80037a0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037b0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fa4e 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d00d      	beq.n	80037e6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037d8:	d103      	bne.n	80037e2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037e0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e0b6      	b.n	8003954 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037e6:	897b      	ldrh	r3, [r7, #10]
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037f4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80037f6:	f7fe fcd3 	bl	80021a0 <HAL_GetTick>
 80037fa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	695b      	ldr	r3, [r3, #20]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b02      	cmp	r3, #2
 8003808:	bf0c      	ite	eq
 800380a:	2301      	moveq	r3, #1
 800380c:	2300      	movne	r3, #0
 800380e:	b2db      	uxtb	r3, r3
 8003810:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003820:	bf0c      	ite	eq
 8003822:	2301      	moveq	r3, #1
 8003824:	2300      	movne	r3, #0
 8003826:	b2db      	uxtb	r3, r3
 8003828:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800382a:	e025      	b.n	8003878 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800382c:	f7fe fcb8 	bl	80021a0 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	429a      	cmp	r2, r3
 800383a:	d302      	bcc.n	8003842 <HAL_I2C_IsDeviceReady+0x13a>
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d103      	bne.n	800384a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	22a0      	movs	r2, #160	; 0xa0
 8003846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b02      	cmp	r3, #2
 8003856:	bf0c      	ite	eq
 8003858:	2301      	moveq	r3, #1
 800385a:	2300      	movne	r3, #0
 800385c:	b2db      	uxtb	r3, r3
 800385e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800386a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2ba0      	cmp	r3, #160	; 0xa0
 8003882:	d005      	beq.n	8003890 <HAL_I2C_IsDeviceReady+0x188>
 8003884:	7dfb      	ldrb	r3, [r7, #23]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d102      	bne.n	8003890 <HAL_I2C_IsDeviceReady+0x188>
 800388a:	7dbb      	ldrb	r3, [r7, #22]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0cd      	beq.n	800382c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b02      	cmp	r3, #2
 80038a4:	d129      	bne.n	80038fa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038b4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038b6:	2300      	movs	r3, #0
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	613b      	str	r3, [r7, #16]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	613b      	str	r3, [r7, #16]
 80038ca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	2319      	movs	r3, #25
 80038d2:	2201      	movs	r2, #1
 80038d4:	4921      	ldr	r1, [pc, #132]	; (800395c <HAL_I2C_IsDeviceReady+0x254>)
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 f9c2 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e036      	b.n	8003954 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2220      	movs	r2, #32
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80038f6:	2300      	movs	r3, #0
 80038f8:	e02c      	b.n	8003954 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003908:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003912:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2319      	movs	r3, #25
 800391a:	2201      	movs	r2, #1
 800391c:	490f      	ldr	r1, [pc, #60]	; (800395c <HAL_I2C_IsDeviceReady+0x254>)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f000 f99e 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e012      	b.n	8003954 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	3301      	adds	r3, #1
 8003932:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	429a      	cmp	r2, r3
 800393a:	f4ff af32 	bcc.w	80037a2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2220      	movs	r2, #32
 8003942:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003952:	2302      	movs	r3, #2
  }
}
 8003954:	4618      	mov	r0, r3
 8003956:	3720      	adds	r7, #32
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	00100002 	.word	0x00100002
 8003960:	ffff0000 	.word	0xffff0000

08003964 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	4608      	mov	r0, r1
 800396e:	4611      	mov	r1, r2
 8003970:	461a      	mov	r2, r3
 8003972:	4603      	mov	r3, r0
 8003974:	817b      	strh	r3, [r7, #10]
 8003976:	460b      	mov	r3, r1
 8003978:	813b      	strh	r3, [r7, #8]
 800397a:	4613      	mov	r3, r2
 800397c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800398c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800398e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	6a3b      	ldr	r3, [r7, #32]
 8003994:	2200      	movs	r2, #0
 8003996:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800399a:	68f8      	ldr	r0, [r7, #12]
 800399c:	f000 f960 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00d      	beq.n	80039c2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039b4:	d103      	bne.n	80039be <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e05f      	b.n	8003a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039d0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	6a3a      	ldr	r2, [r7, #32]
 80039d6:	492d      	ldr	r1, [pc, #180]	; (8003a8c <I2C_RequestMemoryWrite+0x128>)
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 f998 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e04c      	b.n	8003a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a00:	6a39      	ldr	r1, [r7, #32]
 8003a02:	68f8      	ldr	r0, [r7, #12]
 8003a04:	f000 fa02 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00d      	beq.n	8003a2a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d107      	bne.n	8003a26 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a24:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e02b      	b.n	8003a82 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a2a:	88fb      	ldrh	r3, [r7, #6]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d105      	bne.n	8003a3c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a30:	893b      	ldrh	r3, [r7, #8]
 8003a32:	b2da      	uxtb	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	611a      	str	r2, [r3, #16]
 8003a3a:	e021      	b.n	8003a80 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a3c:	893b      	ldrh	r3, [r7, #8]
 8003a3e:	0a1b      	lsrs	r3, r3, #8
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	b2da      	uxtb	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4c:	6a39      	ldr	r1, [r7, #32]
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 f9dc 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d107      	bne.n	8003a72 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a70:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e005      	b.n	8003a82 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a76:	893b      	ldrh	r3, [r7, #8]
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	00010002 	.word	0x00010002

08003a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b088      	sub	sp, #32
 8003a94:	af02      	add	r7, sp, #8
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	4608      	mov	r0, r1
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	817b      	strh	r3, [r7, #10]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	813b      	strh	r3, [r7, #8]
 8003aa6:	4613      	mov	r3, r2
 8003aa8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ab8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 f8c2 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af0:	d103      	bne.n	8003afa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e0aa      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003afe:	897b      	ldrh	r3, [r7, #10]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003b0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	6a3a      	ldr	r2, [r7, #32]
 8003b12:	4952      	ldr	r1, [pc, #328]	; (8003c5c <I2C_RequestMemoryRead+0x1cc>)
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 f8fa 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e097      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b24:	2300      	movs	r3, #0
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b3c:	6a39      	ldr	r1, [r7, #32]
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 f964 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00d      	beq.n	8003b66 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4e:	2b04      	cmp	r3, #4
 8003b50:	d107      	bne.n	8003b62 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e076      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b66:	88fb      	ldrh	r3, [r7, #6]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d105      	bne.n	8003b78 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b6c:	893b      	ldrh	r3, [r7, #8]
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	611a      	str	r2, [r3, #16]
 8003b76:	e021      	b.n	8003bbc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b78:	893b      	ldrh	r3, [r7, #8]
 8003b7a:	0a1b      	lsrs	r3, r3, #8
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b88:	6a39      	ldr	r1, [r7, #32]
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 f93e 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00d      	beq.n	8003bb2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d107      	bne.n	8003bae <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e050      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003bb2:	893b      	ldrh	r3, [r7, #8]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bbe:	6a39      	ldr	r1, [r7, #32]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f923 	bl	8003e0c <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00d      	beq.n	8003be8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	2b04      	cmp	r3, #4
 8003bd2:	d107      	bne.n	8003be4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003be2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e035      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bf6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f000 f82b 	bl	8003c60 <I2C_WaitOnFlagUntilTimeout>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d00d      	beq.n	8003c2c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c1e:	d103      	bne.n	8003c28 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c26:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e013      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c2c:	897b      	ldrh	r3, [r7, #10]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	b2da      	uxtb	r2, r3
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c3e:	6a3a      	ldr	r2, [r7, #32]
 8003c40:	4906      	ldr	r1, [pc, #24]	; (8003c5c <I2C_RequestMemoryRead+0x1cc>)
 8003c42:	68f8      	ldr	r0, [r7, #12]
 8003c44:	f000 f863 	bl	8003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d001      	beq.n	8003c52 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3718      	adds	r7, #24
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	00010002 	.word	0x00010002

08003c60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c70:	e025      	b.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c78:	d021      	beq.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c7a:	f7fe fa91 	bl	80021a0 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d302      	bcc.n	8003c90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d116      	bne.n	8003cbe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2220      	movs	r2, #32
 8003c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003caa:	f043 0220 	orr.w	r2, r3, #32
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e023      	b.n	8003d06 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b01      	cmp	r3, #1
 8003cc6:	d10d      	bne.n	8003ce4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf0c      	ite	eq
 8003cda:	2301      	moveq	r3, #1
 8003cdc:	2300      	movne	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	e00c      	b.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	43da      	mvns	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	b29b      	uxth	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d0b6      	beq.n	8003c72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d1c:	e051      	b.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d2c:	d123      	bne.n	8003d76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d3c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d46:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d62:	f043 0204 	orr.w	r2, r3, #4
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e046      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7c:	d021      	beq.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7e:	f7fe fa0f 	bl	80021a0 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d302      	bcc.n	8003d94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d116      	bne.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2220      	movs	r2, #32
 8003d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e020      	b.n	8003e04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	0c1b      	lsrs	r3, r3, #16
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d10c      	bne.n	8003de6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	695b      	ldr	r3, [r3, #20]
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	bf14      	ite	ne
 8003dde:	2301      	movne	r3, #1
 8003de0:	2300      	moveq	r3, #0
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	e00b      	b.n	8003dfe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	699b      	ldr	r3, [r3, #24]
 8003dec:	43da      	mvns	r2, r3
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	4013      	ands	r3, r2
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	bf14      	ite	ne
 8003df8:	2301      	movne	r3, #1
 8003dfa:	2300      	moveq	r3, #0
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d18d      	bne.n	8003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e18:	e02d      	b.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f8ce 	bl	8003fbc <I2C_IsAcknowledgeFailed>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e26:	2301      	movs	r3, #1
 8003e28:	e02d      	b.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d021      	beq.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e32:	f7fe f9b5 	bl	80021a0 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	68ba      	ldr	r2, [r7, #8]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d302      	bcc.n	8003e48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d116      	bne.n	8003e76 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2220      	movs	r2, #32
 8003e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f043 0220 	orr.w	r2, r3, #32
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e007      	b.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d1ca      	bne.n	8003e1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e84:	2300      	movs	r3, #0
}
 8003e86:	4618      	mov	r0, r3
 8003e88:	3710      	adds	r7, #16
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b084      	sub	sp, #16
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	60f8      	str	r0, [r7, #12]
 8003e96:	60b9      	str	r1, [r7, #8]
 8003e98:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e9a:	e02d      	b.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e9c:	68f8      	ldr	r0, [r7, #12]
 8003e9e:	f000 f88d 	bl	8003fbc <I2C_IsAcknowledgeFailed>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e02d      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eb2:	d021      	beq.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb4:	f7fe f974 	bl	80021a0 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	68ba      	ldr	r2, [r7, #8]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d116      	bne.n	8003ef8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e007      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0304 	and.w	r3, r3, #4
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d1ca      	bne.n	8003e9c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f1c:	e042      	b.n	8003fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0310 	and.w	r3, r3, #16
 8003f28:	2b10      	cmp	r3, #16
 8003f2a:	d119      	bne.n	8003f60 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f06f 0210 	mvn.w	r2, #16
 8003f34:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e029      	b.n	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f60:	f7fe f91e 	bl	80021a0 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d302      	bcc.n	8003f76 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d116      	bne.n	8003fa4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2200      	movs	r2, #0
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	f043 0220 	orr.w	r2, r3, #32
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e007      	b.n	8003fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	695b      	ldr	r3, [r3, #20]
 8003faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fae:	2b40      	cmp	r3, #64	; 0x40
 8003fb0:	d1b5      	bne.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3710      	adds	r7, #16
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fd2:	d11b      	bne.n	800400c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	f043 0204 	orr.w	r2, r3, #4
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800400c:	2300      	movs	r3, #0
}
 800400e:	4618      	mov	r0, r3
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800402a:	2301      	movs	r3, #1
 800402c:	e267      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d075      	beq.n	8004126 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800403a:	4b88      	ldr	r3, [pc, #544]	; (800425c <HAL_RCC_OscConfig+0x240>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
 8004042:	2b04      	cmp	r3, #4
 8004044:	d00c      	beq.n	8004060 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004046:	4b85      	ldr	r3, [pc, #532]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800404e:	2b08      	cmp	r3, #8
 8004050:	d112      	bne.n	8004078 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004052:	4b82      	ldr	r3, [pc, #520]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800405e:	d10b      	bne.n	8004078 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004060:	4b7e      	ldr	r3, [pc, #504]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d05b      	beq.n	8004124 <HAL_RCC_OscConfig+0x108>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d157      	bne.n	8004124 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004074:	2301      	movs	r3, #1
 8004076:	e242      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004080:	d106      	bne.n	8004090 <HAL_RCC_OscConfig+0x74>
 8004082:	4b76      	ldr	r3, [pc, #472]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a75      	ldr	r2, [pc, #468]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e01d      	b.n	80040cc <HAL_RCC_OscConfig+0xb0>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004098:	d10c      	bne.n	80040b4 <HAL_RCC_OscConfig+0x98>
 800409a:	4b70      	ldr	r3, [pc, #448]	; (800425c <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a6f      	ldr	r2, [pc, #444]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80040a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	4b6d      	ldr	r3, [pc, #436]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a6c      	ldr	r2, [pc, #432]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b0:	6013      	str	r3, [r2, #0]
 80040b2:	e00b      	b.n	80040cc <HAL_RCC_OscConfig+0xb0>
 80040b4:	4b69      	ldr	r3, [pc, #420]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a68      	ldr	r2, [pc, #416]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80040ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040be:	6013      	str	r3, [r2, #0]
 80040c0:	4b66      	ldr	r3, [pc, #408]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a65      	ldr	r2, [pc, #404]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80040c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d013      	beq.n	80040fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fe f864 	bl	80021a0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040dc:	f7fe f860 	bl	80021a0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b64      	cmp	r3, #100	; 0x64
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e207      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ee:	4b5b      	ldr	r3, [pc, #364]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d0f0      	beq.n	80040dc <HAL_RCC_OscConfig+0xc0>
 80040fa:	e014      	b.n	8004126 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040fc:	f7fe f850 	bl	80021a0 <HAL_GetTick>
 8004100:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004102:	e008      	b.n	8004116 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004104:	f7fe f84c 	bl	80021a0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	1ad3      	subs	r3, r2, r3
 800410e:	2b64      	cmp	r3, #100	; 0x64
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e1f3      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004116:	4b51      	ldr	r3, [pc, #324]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1f0      	bne.n	8004104 <HAL_RCC_OscConfig+0xe8>
 8004122:	e000      	b.n	8004126 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004124:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d063      	beq.n	80041fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004132:	4b4a      	ldr	r3, [pc, #296]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 030c 	and.w	r3, r3, #12
 800413a:	2b00      	cmp	r3, #0
 800413c:	d00b      	beq.n	8004156 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800413e:	4b47      	ldr	r3, [pc, #284]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004146:	2b08      	cmp	r3, #8
 8004148:	d11c      	bne.n	8004184 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414a:	4b44      	ldr	r3, [pc, #272]	; (800425c <HAL_RCC_OscConfig+0x240>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d116      	bne.n	8004184 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004156:	4b41      	ldr	r3, [pc, #260]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d005      	beq.n	800416e <HAL_RCC_OscConfig+0x152>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d001      	beq.n	800416e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e1c7      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416e:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	00db      	lsls	r3, r3, #3
 800417c:	4937      	ldr	r1, [pc, #220]	; (800425c <HAL_RCC_OscConfig+0x240>)
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004182:	e03a      	b.n	80041fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d020      	beq.n	80041ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800418c:	4b34      	ldr	r3, [pc, #208]	; (8004260 <HAL_RCC_OscConfig+0x244>)
 800418e:	2201      	movs	r2, #1
 8004190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004192:	f7fe f805 	bl	80021a0 <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800419a:	f7fe f801 	bl	80021a0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e1a8      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ac:	4b2b      	ldr	r3, [pc, #172]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0f0      	beq.n	800419a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b8:	4b28      	ldr	r3, [pc, #160]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	00db      	lsls	r3, r3, #3
 80041c6:	4925      	ldr	r1, [pc, #148]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]
 80041cc:	e015      	b.n	80041fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ce:	4b24      	ldr	r3, [pc, #144]	; (8004260 <HAL_RCC_OscConfig+0x244>)
 80041d0:	2200      	movs	r2, #0
 80041d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fd ffe4 	bl	80021a0 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041dc:	f7fd ffe0 	bl	80021a0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e187      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041ee:	4b1b      	ldr	r3, [pc, #108]	; (800425c <HAL_RCC_OscConfig+0x240>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d1f0      	bne.n	80041dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 0308 	and.w	r3, r3, #8
 8004202:	2b00      	cmp	r3, #0
 8004204:	d036      	beq.n	8004274 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d016      	beq.n	800423c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_RCC_OscConfig+0x248>)
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004214:	f7fd ffc4 	bl	80021a0 <HAL_GetTick>
 8004218:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421a:	e008      	b.n	800422e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800421c:	f7fd ffc0 	bl	80021a0 <HAL_GetTick>
 8004220:	4602      	mov	r2, r0
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1ad3      	subs	r3, r2, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d901      	bls.n	800422e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e167      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800422e:	4b0b      	ldr	r3, [pc, #44]	; (800425c <HAL_RCC_OscConfig+0x240>)
 8004230:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d0f0      	beq.n	800421c <HAL_RCC_OscConfig+0x200>
 800423a:	e01b      	b.n	8004274 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <HAL_RCC_OscConfig+0x248>)
 800423e:	2200      	movs	r2, #0
 8004240:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004242:	f7fd ffad 	bl	80021a0 <HAL_GetTick>
 8004246:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004248:	e00e      	b.n	8004268 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800424a:	f7fd ffa9 	bl	80021a0 <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d907      	bls.n	8004268 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e150      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
 800425c:	40023800 	.word	0x40023800
 8004260:	42470000 	.word	0x42470000
 8004264:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004268:	4b88      	ldr	r3, [pc, #544]	; (800448c <HAL_RCC_OscConfig+0x470>)
 800426a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800426c:	f003 0302 	and.w	r3, r3, #2
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1ea      	bne.n	800424a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 8097 	beq.w	80043b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004282:	2300      	movs	r3, #0
 8004284:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004286:	4b81      	ldr	r3, [pc, #516]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d10f      	bne.n	80042b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	4b7d      	ldr	r3, [pc, #500]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429a:	4a7c      	ldr	r2, [pc, #496]	; (800448c <HAL_RCC_OscConfig+0x470>)
 800429c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042a0:	6413      	str	r3, [r2, #64]	; 0x40
 80042a2:	4b7a      	ldr	r3, [pc, #488]	; (800448c <HAL_RCC_OscConfig+0x470>)
 80042a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042aa:	60bb      	str	r3, [r7, #8]
 80042ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042b2:	4b77      	ldr	r3, [pc, #476]	; (8004490 <HAL_RCC_OscConfig+0x474>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d118      	bne.n	80042f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042be:	4b74      	ldr	r3, [pc, #464]	; (8004490 <HAL_RCC_OscConfig+0x474>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a73      	ldr	r2, [pc, #460]	; (8004490 <HAL_RCC_OscConfig+0x474>)
 80042c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ca:	f7fd ff69 	bl	80021a0 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042d2:	f7fd ff65 	bl	80021a0 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e10c      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e4:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <HAL_RCC_OscConfig+0x474>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0f0      	beq.n	80042d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d106      	bne.n	8004306 <HAL_RCC_OscConfig+0x2ea>
 80042f8:	4b64      	ldr	r3, [pc, #400]	; (800448c <HAL_RCC_OscConfig+0x470>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	4a63      	ldr	r2, [pc, #396]	; (800448c <HAL_RCC_OscConfig+0x470>)
 80042fe:	f043 0301 	orr.w	r3, r3, #1
 8004302:	6713      	str	r3, [r2, #112]	; 0x70
 8004304:	e01c      	b.n	8004340 <HAL_RCC_OscConfig+0x324>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	2b05      	cmp	r3, #5
 800430c:	d10c      	bne.n	8004328 <HAL_RCC_OscConfig+0x30c>
 800430e:	4b5f      	ldr	r3, [pc, #380]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	4a5e      	ldr	r2, [pc, #376]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004314:	f043 0304 	orr.w	r3, r3, #4
 8004318:	6713      	str	r3, [r2, #112]	; 0x70
 800431a:	4b5c      	ldr	r3, [pc, #368]	; (800448c <HAL_RCC_OscConfig+0x470>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431e:	4a5b      	ldr	r2, [pc, #364]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	6713      	str	r3, [r2, #112]	; 0x70
 8004326:	e00b      	b.n	8004340 <HAL_RCC_OscConfig+0x324>
 8004328:	4b58      	ldr	r3, [pc, #352]	; (800448c <HAL_RCC_OscConfig+0x470>)
 800432a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800432c:	4a57      	ldr	r2, [pc, #348]	; (800448c <HAL_RCC_OscConfig+0x470>)
 800432e:	f023 0301 	bic.w	r3, r3, #1
 8004332:	6713      	str	r3, [r2, #112]	; 0x70
 8004334:	4b55      	ldr	r3, [pc, #340]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004338:	4a54      	ldr	r2, [pc, #336]	; (800448c <HAL_RCC_OscConfig+0x470>)
 800433a:	f023 0304 	bic.w	r3, r3, #4
 800433e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d015      	beq.n	8004374 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004348:	f7fd ff2a 	bl	80021a0 <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800434e:	e00a      	b.n	8004366 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004350:	f7fd ff26 	bl	80021a0 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	; 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e0cb      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004366:	4b49      	ldr	r3, [pc, #292]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0ee      	beq.n	8004350 <HAL_RCC_OscConfig+0x334>
 8004372:	e014      	b.n	800439e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004374:	f7fd ff14 	bl	80021a0 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800437a:	e00a      	b.n	8004392 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800437c:	f7fd ff10 	bl	80021a0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	f241 3288 	movw	r2, #5000	; 0x1388
 800438a:	4293      	cmp	r3, r2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e0b5      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004392:	4b3e      	ldr	r3, [pc, #248]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004396:	f003 0302 	and.w	r3, r3, #2
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1ee      	bne.n	800437c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800439e:	7dfb      	ldrb	r3, [r7, #23]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d105      	bne.n	80043b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043a4:	4b39      	ldr	r3, [pc, #228]	; (800448c <HAL_RCC_OscConfig+0x470>)
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	4a38      	ldr	r2, [pc, #224]	; (800448c <HAL_RCC_OscConfig+0x470>)
 80043aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	699b      	ldr	r3, [r3, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 80a1 	beq.w	80044fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043ba:	4b34      	ldr	r3, [pc, #208]	; (800448c <HAL_RCC_OscConfig+0x470>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d05c      	beq.n	8004480 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d141      	bne.n	8004452 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ce:	4b31      	ldr	r3, [pc, #196]	; (8004494 <HAL_RCC_OscConfig+0x478>)
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d4:	f7fd fee4 	bl	80021a0 <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043dc:	f7fd fee0 	bl	80021a0 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e087      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ee:	4b27      	ldr	r3, [pc, #156]	; (800448c <HAL_RCC_OscConfig+0x470>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1f0      	bne.n	80043dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69da      	ldr	r2, [r3, #28]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	019b      	lsls	r3, r3, #6
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	3b01      	subs	r3, #1
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441c:	061b      	lsls	r3, r3, #24
 800441e:	491b      	ldr	r1, [pc, #108]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004420:	4313      	orrs	r3, r2
 8004422:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004424:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <HAL_RCC_OscConfig+0x478>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fd feb9 	bl	80021a0 <HAL_GetTick>
 800442e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004430:	e008      	b.n	8004444 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004432:	f7fd feb5 	bl	80021a0 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	2b02      	cmp	r3, #2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e05c      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004444:	4b11      	ldr	r3, [pc, #68]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0f0      	beq.n	8004432 <HAL_RCC_OscConfig+0x416>
 8004450:	e054      	b.n	80044fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b10      	ldr	r3, [pc, #64]	; (8004494 <HAL_RCC_OscConfig+0x478>)
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004458:	f7fd fea2 	bl	80021a0 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004460:	f7fd fe9e 	bl	80021a0 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e045      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004472:	4b06      	ldr	r3, [pc, #24]	; (800448c <HAL_RCC_OscConfig+0x470>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x444>
 800447e:	e03d      	b.n	80044fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	699b      	ldr	r3, [r3, #24]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d107      	bne.n	8004498 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004488:	2301      	movs	r3, #1
 800448a:	e038      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
 800448c:	40023800 	.word	0x40023800
 8004490:	40007000 	.word	0x40007000
 8004494:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004498:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <HAL_RCC_OscConfig+0x4ec>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d028      	beq.n	80044f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d121      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044be:	429a      	cmp	r2, r3
 80044c0:	d11a      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044c8:	4013      	ands	r3, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d111      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	085b      	lsrs	r3, r3, #1
 80044e0:	3b01      	subs	r3, #1
 80044e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d107      	bne.n	80044f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e000      	b.n	80044fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40023800 	.word	0x40023800

0800450c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d101      	bne.n	8004520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	e0cc      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004520:	4b68      	ldr	r3, [pc, #416]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d90c      	bls.n	8004548 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800452e:	4b65      	ldr	r3, [pc, #404]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004536:	4b63      	ldr	r3, [pc, #396]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	429a      	cmp	r2, r3
 8004542:	d001      	beq.n	8004548 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0b8      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d020      	beq.n	8004596 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0304 	and.w	r3, r3, #4
 800455c:	2b00      	cmp	r3, #0
 800455e:	d005      	beq.n	800456c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004560:	4b59      	ldr	r3, [pc, #356]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	4a58      	ldr	r2, [pc, #352]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800456a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004578:	4b53      	ldr	r3, [pc, #332]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a52      	ldr	r2, [pc, #328]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004582:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004584:	4b50      	ldr	r3, [pc, #320]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	494d      	ldr	r1, [pc, #308]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004592:	4313      	orrs	r3, r2
 8004594:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d044      	beq.n	800462c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d107      	bne.n	80045ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045aa:	4b47      	ldr	r3, [pc, #284]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d119      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e07f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d003      	beq.n	80045ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045c6:	2b03      	cmp	r3, #3
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ca:	4b3f      	ldr	r3, [pc, #252]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e06f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045da:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e067      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ea:	4b37      	ldr	r3, [pc, #220]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f023 0203 	bic.w	r2, r3, #3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	685b      	ldr	r3, [r3, #4]
 80045f6:	4934      	ldr	r1, [pc, #208]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045fc:	f7fd fdd0 	bl	80021a0 <HAL_GetTick>
 8004600:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004602:	e00a      	b.n	800461a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004604:	f7fd fdcc 	bl	80021a0 <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e04f      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461a:	4b2b      	ldr	r3, [pc, #172]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 020c 	and.w	r2, r3, #12
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	429a      	cmp	r2, r3
 800462a:	d1eb      	bne.n	8004604 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d20c      	bcs.n	8004654 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463a:	4b22      	ldr	r3, [pc, #136]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	b2d2      	uxtb	r2, r2
 8004640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004642:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0307 	and.w	r3, r3, #7
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e032      	b.n	80046ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0304 	and.w	r3, r3, #4
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004660:	4b19      	ldr	r3, [pc, #100]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	4916      	ldr	r1, [pc, #88]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	2b00      	cmp	r3, #0
 800467c:	d009      	beq.n	8004692 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800467e:	4b12      	ldr	r3, [pc, #72]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	490e      	ldr	r1, [pc, #56]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004692:	f000 f821 	bl	80046d8 <HAL_RCC_GetSysClockFreq>
 8004696:	4602      	mov	r2, r0
 8004698:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	091b      	lsrs	r3, r3, #4
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	490a      	ldr	r1, [pc, #40]	; (80046cc <HAL_RCC_ClockConfig+0x1c0>)
 80046a4:	5ccb      	ldrb	r3, [r1, r3]
 80046a6:	fa22 f303 	lsr.w	r3, r2, r3
 80046aa:	4a09      	ldr	r2, [pc, #36]	; (80046d0 <HAL_RCC_ClockConfig+0x1c4>)
 80046ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046ae:	4b09      	ldr	r3, [pc, #36]	; (80046d4 <HAL_RCC_ClockConfig+0x1c8>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7fd fd30 	bl	8002118 <HAL_InitTick>

  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023c00 	.word	0x40023c00
 80046c8:	40023800 	.word	0x40023800
 80046cc:	08007d60 	.word	0x08007d60
 80046d0:	20000000 	.word	0x20000000
 80046d4:	20000004 	.word	0x20000004

080046d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046dc:	b090      	sub	sp, #64	; 0x40
 80046de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046e0:	2300      	movs	r3, #0
 80046e2:	637b      	str	r3, [r7, #52]	; 0x34
 80046e4:	2300      	movs	r3, #0
 80046e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e8:	2300      	movs	r3, #0
 80046ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80046ec:	2300      	movs	r3, #0
 80046ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046f0:	4b59      	ldr	r3, [pc, #356]	; (8004858 <HAL_RCC_GetSysClockFreq+0x180>)
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f003 030c 	and.w	r3, r3, #12
 80046f8:	2b08      	cmp	r3, #8
 80046fa:	d00d      	beq.n	8004718 <HAL_RCC_GetSysClockFreq+0x40>
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	f200 80a1 	bhi.w	8004844 <HAL_RCC_GetSysClockFreq+0x16c>
 8004702:	2b00      	cmp	r3, #0
 8004704:	d002      	beq.n	800470c <HAL_RCC_GetSysClockFreq+0x34>
 8004706:	2b04      	cmp	r3, #4
 8004708:	d003      	beq.n	8004712 <HAL_RCC_GetSysClockFreq+0x3a>
 800470a:	e09b      	b.n	8004844 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800470c:	4b53      	ldr	r3, [pc, #332]	; (800485c <HAL_RCC_GetSysClockFreq+0x184>)
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004710:	e09b      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004712:	4b53      	ldr	r3, [pc, #332]	; (8004860 <HAL_RCC_GetSysClockFreq+0x188>)
 8004714:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004716:	e098      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004718:	4b4f      	ldr	r3, [pc, #316]	; (8004858 <HAL_RCC_GetSysClockFreq+0x180>)
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004720:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004722:	4b4d      	ldr	r3, [pc, #308]	; (8004858 <HAL_RCC_GetSysClockFreq+0x180>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d028      	beq.n	8004780 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800472e:	4b4a      	ldr	r3, [pc, #296]	; (8004858 <HAL_RCC_GetSysClockFreq+0x180>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	099b      	lsrs	r3, r3, #6
 8004734:	2200      	movs	r2, #0
 8004736:	623b      	str	r3, [r7, #32]
 8004738:	627a      	str	r2, [r7, #36]	; 0x24
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004740:	2100      	movs	r1, #0
 8004742:	4b47      	ldr	r3, [pc, #284]	; (8004860 <HAL_RCC_GetSysClockFreq+0x188>)
 8004744:	fb03 f201 	mul.w	r2, r3, r1
 8004748:	2300      	movs	r3, #0
 800474a:	fb00 f303 	mul.w	r3, r0, r3
 800474e:	4413      	add	r3, r2
 8004750:	4a43      	ldr	r2, [pc, #268]	; (8004860 <HAL_RCC_GetSysClockFreq+0x188>)
 8004752:	fba0 1202 	umull	r1, r2, r0, r2
 8004756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004758:	460a      	mov	r2, r1
 800475a:	62ba      	str	r2, [r7, #40]	; 0x28
 800475c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800475e:	4413      	add	r3, r2
 8004760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004764:	2200      	movs	r2, #0
 8004766:	61bb      	str	r3, [r7, #24]
 8004768:	61fa      	str	r2, [r7, #28]
 800476a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800476e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004772:	f7fc fa71 	bl	8000c58 <__aeabi_uldivmod>
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4613      	mov	r3, r2
 800477c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800477e:	e053      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004780:	4b35      	ldr	r3, [pc, #212]	; (8004858 <HAL_RCC_GetSysClockFreq+0x180>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	099b      	lsrs	r3, r3, #6
 8004786:	2200      	movs	r2, #0
 8004788:	613b      	str	r3, [r7, #16]
 800478a:	617a      	str	r2, [r7, #20]
 800478c:	693b      	ldr	r3, [r7, #16]
 800478e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004792:	f04f 0b00 	mov.w	fp, #0
 8004796:	4652      	mov	r2, sl
 8004798:	465b      	mov	r3, fp
 800479a:	f04f 0000 	mov.w	r0, #0
 800479e:	f04f 0100 	mov.w	r1, #0
 80047a2:	0159      	lsls	r1, r3, #5
 80047a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047a8:	0150      	lsls	r0, r2, #5
 80047aa:	4602      	mov	r2, r0
 80047ac:	460b      	mov	r3, r1
 80047ae:	ebb2 080a 	subs.w	r8, r2, sl
 80047b2:	eb63 090b 	sbc.w	r9, r3, fp
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047ca:	ebb2 0408 	subs.w	r4, r2, r8
 80047ce:	eb63 0509 	sbc.w	r5, r3, r9
 80047d2:	f04f 0200 	mov.w	r2, #0
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	00eb      	lsls	r3, r5, #3
 80047dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047e0:	00e2      	lsls	r2, r4, #3
 80047e2:	4614      	mov	r4, r2
 80047e4:	461d      	mov	r5, r3
 80047e6:	eb14 030a 	adds.w	r3, r4, sl
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	eb45 030b 	adc.w	r3, r5, fp
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047fe:	4629      	mov	r1, r5
 8004800:	028b      	lsls	r3, r1, #10
 8004802:	4621      	mov	r1, r4
 8004804:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004808:	4621      	mov	r1, r4
 800480a:	028a      	lsls	r2, r1, #10
 800480c:	4610      	mov	r0, r2
 800480e:	4619      	mov	r1, r3
 8004810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004812:	2200      	movs	r2, #0
 8004814:	60bb      	str	r3, [r7, #8]
 8004816:	60fa      	str	r2, [r7, #12]
 8004818:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800481c:	f7fc fa1c 	bl	8000c58 <__aeabi_uldivmod>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4613      	mov	r3, r2
 8004826:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004828:	4b0b      	ldr	r3, [pc, #44]	; (8004858 <HAL_RCC_GetSysClockFreq+0x180>)
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	0c1b      	lsrs	r3, r3, #16
 800482e:	f003 0303 	and.w	r3, r3, #3
 8004832:	3301      	adds	r3, #1
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800483c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004840:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004842:	e002      	b.n	800484a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004844:	4b05      	ldr	r3, [pc, #20]	; (800485c <HAL_RCC_GetSysClockFreq+0x184>)
 8004846:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004848:	bf00      	nop
    }
  }
  return sysclockfreq;
 800484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800484c:	4618      	mov	r0, r3
 800484e:	3740      	adds	r7, #64	; 0x40
 8004850:	46bd      	mov	sp, r7
 8004852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004856:	bf00      	nop
 8004858:	40023800 	.word	0x40023800
 800485c:	00f42400 	.word	0x00f42400
 8004860:	017d7840 	.word	0x017d7840

08004864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <HAL_RCC_GetHCLKFreq+0x14>)
 800486a:	681b      	ldr	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000000 	.word	0x20000000

0800487c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004880:	f7ff fff0 	bl	8004864 <HAL_RCC_GetHCLKFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	0a9b      	lsrs	r3, r3, #10
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	4903      	ldr	r1, [pc, #12]	; (80048a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004892:	5ccb      	ldrb	r3, [r1, r3]
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40023800 	.word	0x40023800
 80048a0:	08007d70 	.word	0x08007d70

080048a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e07b      	b.n	80049ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d108      	bne.n	80048d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048c6:	d009      	beq.n	80048dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	61da      	str	r2, [r3, #28]
 80048ce:	e005      	b.n	80048dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fd fa3c 	bl	8001d74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004912:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004924:	431a      	orrs	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	691b      	ldr	r3, [r3, #16]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	f003 0301 	and.w	r3, r3, #1
 8004942:	431a      	orrs	r2, r3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494c:	431a      	orrs	r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	69db      	ldr	r3, [r3, #28]
 8004952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004956:	431a      	orrs	r2, r3
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6a1b      	ldr	r3, [r3, #32]
 800495c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004960:	ea42 0103 	orr.w	r1, r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004968:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	430a      	orrs	r2, r1
 8004972:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	0c1b      	lsrs	r3, r3, #16
 800497a:	f003 0104 	and.w	r1, r3, #4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	f003 0210 	and.w	r2, r3, #16
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800499c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b086      	sub	sp, #24
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	4613      	mov	r3, r2
 80049c4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049c6:	2300      	movs	r3, #0
 80049c8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_SPI_Transmit_DMA+0x20>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e09b      	b.n	8004b10 <HAL_SPI_Transmit_DMA+0x158>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d002      	beq.n	80049f2 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
 80049ee:	75fb      	strb	r3, [r7, #23]
    goto error;
 80049f0:	e089      	b.n	8004b06 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d002      	beq.n	80049fe <HAL_SPI_Transmit_DMA+0x46>
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d102      	bne.n	8004a04 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a02:	e080      	b.n	8004b06 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2203      	movs	r2, #3
 8004a08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	88fa      	ldrh	r2, [r7, #6]
 8004a1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	88fa      	ldrh	r2, [r7, #6]
 8004a22:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2200      	movs	r2, #0
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a4a:	d10f      	bne.n	8004a6c <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681a      	ldr	r2, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a5a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a6a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a70:	4a29      	ldr	r2, [pc, #164]	; (8004b18 <HAL_SPI_Transmit_DMA+0x160>)
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a78:	4a28      	ldr	r2, [pc, #160]	; (8004b1c <HAL_SPI_Transmit_DMA+0x164>)
 8004a7a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	4a27      	ldr	r2, [pc, #156]	; (8004b20 <HAL_SPI_Transmit_DMA+0x168>)
 8004a82:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a88:	2200      	movs	r2, #0
 8004a8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a94:	4619      	mov	r1, r3
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	330c      	adds	r3, #12
 8004a9c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004aa2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004aa4:	f7fd fd6c 	bl	8002580 <HAL_DMA_Start_IT>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d00c      	beq.n	8004ac8 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f043 0210 	orr.w	r2, r3, #16
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004ac6:	e01e      	b.n	8004b06 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d007      	beq.n	8004ae6 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ae4:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f042 0220 	orr.w	r2, r2, #32
 8004af4:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0202 	orr.w	r2, r2, #2
 8004b04:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	08004c09 	.word	0x08004c09
 8004b1c:	08004b61 	.word	0x08004b61
 8004b20:	08004c25 	.word	0x08004c25

08004b24 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8004b2c:	bf00      	nop
 8004b2e:	370c      	adds	r7, #12
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b086      	sub	sp, #24
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b6c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b6e:	f7fd fb17 	bl	80021a0 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b82:	d03b      	beq.n	8004bfc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0220 	bic.w	r2, r2, #32
 8004b92:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f022 0202 	bic.w	r2, r2, #2
 8004ba2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	2164      	movs	r1, #100	; 0x64
 8004ba8:	6978      	ldr	r0, [r7, #20]
 8004baa:	f000 f8e3 	bl	8004d74 <SPI_EndRxTxTransaction>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d005      	beq.n	8004bc0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb8:	f043 0220 	orr.w	r2, r3, #32
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc8:	2300      	movs	r3, #0
 8004bca:	60fb      	str	r3, [r7, #12]
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	60fb      	str	r3, [r7, #12]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2201      	movs	r2, #1
 8004be8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004bf4:	6978      	ldr	r0, [r7, #20]
 8004bf6:	f7ff ffa9 	bl	8004b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004bfa:	e002      	b.n	8004c02 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8004bfc:	6978      	ldr	r0, [r7, #20]
 8004bfe:	f7ff ff91 	bl	8004b24 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8004c16:	68f8      	ldr	r0, [r7, #12]
 8004c18:	f7ff ff8e 	bl	8004b38 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c1c:	bf00      	nop
 8004c1e:	3710      	adds	r7, #16
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	685a      	ldr	r2, [r3, #4]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0203 	bic.w	r2, r2, #3
 8004c40:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c46:	f043 0210 	orr.w	r2, r3, #16
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f7ff ff78 	bl	8004b4c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c5c:	bf00      	nop
 8004c5e:	3710      	adds	r7, #16
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b088      	sub	sp, #32
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	603b      	str	r3, [r7, #0]
 8004c70:	4613      	mov	r3, r2
 8004c72:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c74:	f7fd fa94 	bl	80021a0 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7c:	1a9b      	subs	r3, r3, r2
 8004c7e:	683a      	ldr	r2, [r7, #0]
 8004c80:	4413      	add	r3, r2
 8004c82:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c84:	f7fd fa8c 	bl	80021a0 <HAL_GetTick>
 8004c88:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c8a:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	015b      	lsls	r3, r3, #5
 8004c90:	0d1b      	lsrs	r3, r3, #20
 8004c92:	69fa      	ldr	r2, [r7, #28]
 8004c94:	fb02 f303 	mul.w	r3, r2, r3
 8004c98:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c9a:	e054      	b.n	8004d46 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca2:	d050      	beq.n	8004d46 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ca4:	f7fd fa7c 	bl	80021a0 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d902      	bls.n	8004cba <SPI_WaitFlagStateUntilTimeout+0x56>
 8004cb4:	69fb      	ldr	r3, [r7, #28]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d13d      	bne.n	8004d36 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004cc8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cd2:	d111      	bne.n	8004cf8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cdc:	d004      	beq.n	8004ce8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce6:	d107      	bne.n	8004cf8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cf6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d00:	d10f      	bne.n	8004d22 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d20:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e017      	b.n	8004d66 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	4013      	ands	r3, r2
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	bf0c      	ite	eq
 8004d56:	2301      	moveq	r3, #1
 8004d58:	2300      	movne	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	79fb      	ldrb	r3, [r7, #7]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d19b      	bne.n	8004c9c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d64:	2300      	movs	r3, #0
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3720      	adds	r7, #32
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000000 	.word	0x20000000

08004d74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af02      	add	r7, sp, #8
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d80:	4b1b      	ldr	r3, [pc, #108]	; (8004df0 <SPI_EndRxTxTransaction+0x7c>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1b      	ldr	r2, [pc, #108]	; (8004df4 <SPI_EndRxTxTransaction+0x80>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	0d5b      	lsrs	r3, r3, #21
 8004d8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d90:	fb02 f303 	mul.w	r3, r2, r3
 8004d94:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d9e:	d112      	bne.n	8004dc6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	2180      	movs	r1, #128	; 0x80
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f7ff ff5a 	bl	8004c64 <SPI_WaitFlagStateUntilTimeout>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d016      	beq.n	8004de4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dba:	f043 0220 	orr.w	r2, r3, #32
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e00f      	b.n	8004de6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ddc:	2b80      	cmp	r3, #128	; 0x80
 8004dde:	d0f2      	beq.n	8004dc6 <SPI_EndRxTxTransaction+0x52>
 8004de0:	e000      	b.n	8004de4 <SPI_EndRxTxTransaction+0x70>
        break;
 8004de2:	bf00      	nop
  }

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3718      	adds	r7, #24
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000000 	.word	0x20000000
 8004df4:	165e9f81 	.word	0x165e9f81

08004df8 <__cvt>:
 8004df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfc:	ec55 4b10 	vmov	r4, r5, d0
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	460e      	mov	r6, r1
 8004e04:	4619      	mov	r1, r3
 8004e06:	462b      	mov	r3, r5
 8004e08:	bfbb      	ittet	lt
 8004e0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e0e:	461d      	movlt	r5, r3
 8004e10:	2300      	movge	r3, #0
 8004e12:	232d      	movlt	r3, #45	; 0x2d
 8004e14:	700b      	strb	r3, [r1, #0]
 8004e16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e1c:	4691      	mov	r9, r2
 8004e1e:	f023 0820 	bic.w	r8, r3, #32
 8004e22:	bfbc      	itt	lt
 8004e24:	4622      	movlt	r2, r4
 8004e26:	4614      	movlt	r4, r2
 8004e28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e2c:	d005      	beq.n	8004e3a <__cvt+0x42>
 8004e2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e32:	d100      	bne.n	8004e36 <__cvt+0x3e>
 8004e34:	3601      	adds	r6, #1
 8004e36:	2102      	movs	r1, #2
 8004e38:	e000      	b.n	8004e3c <__cvt+0x44>
 8004e3a:	2103      	movs	r1, #3
 8004e3c:	ab03      	add	r3, sp, #12
 8004e3e:	9301      	str	r3, [sp, #4]
 8004e40:	ab02      	add	r3, sp, #8
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	ec45 4b10 	vmov	d0, r4, r5
 8004e48:	4653      	mov	r3, sl
 8004e4a:	4632      	mov	r2, r6
 8004e4c:	f000 fe68 	bl	8005b20 <_dtoa_r>
 8004e50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e54:	4607      	mov	r7, r0
 8004e56:	d102      	bne.n	8004e5e <__cvt+0x66>
 8004e58:	f019 0f01 	tst.w	r9, #1
 8004e5c:	d022      	beq.n	8004ea4 <__cvt+0xac>
 8004e5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e62:	eb07 0906 	add.w	r9, r7, r6
 8004e66:	d110      	bne.n	8004e8a <__cvt+0x92>
 8004e68:	783b      	ldrb	r3, [r7, #0]
 8004e6a:	2b30      	cmp	r3, #48	; 0x30
 8004e6c:	d10a      	bne.n	8004e84 <__cvt+0x8c>
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2300      	movs	r3, #0
 8004e72:	4620      	mov	r0, r4
 8004e74:	4629      	mov	r1, r5
 8004e76:	f7fb fe2f 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e7a:	b918      	cbnz	r0, 8004e84 <__cvt+0x8c>
 8004e7c:	f1c6 0601 	rsb	r6, r6, #1
 8004e80:	f8ca 6000 	str.w	r6, [sl]
 8004e84:	f8da 3000 	ldr.w	r3, [sl]
 8004e88:	4499      	add	r9, r3
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	4620      	mov	r0, r4
 8004e90:	4629      	mov	r1, r5
 8004e92:	f7fb fe21 	bl	8000ad8 <__aeabi_dcmpeq>
 8004e96:	b108      	cbz	r0, 8004e9c <__cvt+0xa4>
 8004e98:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e9c:	2230      	movs	r2, #48	; 0x30
 8004e9e:	9b03      	ldr	r3, [sp, #12]
 8004ea0:	454b      	cmp	r3, r9
 8004ea2:	d307      	bcc.n	8004eb4 <__cvt+0xbc>
 8004ea4:	9b03      	ldr	r3, [sp, #12]
 8004ea6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ea8:	1bdb      	subs	r3, r3, r7
 8004eaa:	4638      	mov	r0, r7
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	b004      	add	sp, #16
 8004eb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eb4:	1c59      	adds	r1, r3, #1
 8004eb6:	9103      	str	r1, [sp, #12]
 8004eb8:	701a      	strb	r2, [r3, #0]
 8004eba:	e7f0      	b.n	8004e9e <__cvt+0xa6>

08004ebc <__exponent>:
 8004ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	2900      	cmp	r1, #0
 8004ec2:	bfb8      	it	lt
 8004ec4:	4249      	neglt	r1, r1
 8004ec6:	f803 2b02 	strb.w	r2, [r3], #2
 8004eca:	bfb4      	ite	lt
 8004ecc:	222d      	movlt	r2, #45	; 0x2d
 8004ece:	222b      	movge	r2, #43	; 0x2b
 8004ed0:	2909      	cmp	r1, #9
 8004ed2:	7042      	strb	r2, [r0, #1]
 8004ed4:	dd2a      	ble.n	8004f2c <__exponent+0x70>
 8004ed6:	f10d 0207 	add.w	r2, sp, #7
 8004eda:	4617      	mov	r7, r2
 8004edc:	260a      	movs	r6, #10
 8004ede:	4694      	mov	ip, r2
 8004ee0:	fb91 f5f6 	sdiv	r5, r1, r6
 8004ee4:	fb06 1415 	mls	r4, r6, r5, r1
 8004ee8:	3430      	adds	r4, #48	; 0x30
 8004eea:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004eee:	460c      	mov	r4, r1
 8004ef0:	2c63      	cmp	r4, #99	; 0x63
 8004ef2:	f102 32ff 	add.w	r2, r2, #4294967295
 8004ef6:	4629      	mov	r1, r5
 8004ef8:	dcf1      	bgt.n	8004ede <__exponent+0x22>
 8004efa:	3130      	adds	r1, #48	; 0x30
 8004efc:	f1ac 0402 	sub.w	r4, ip, #2
 8004f00:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004f04:	1c41      	adds	r1, r0, #1
 8004f06:	4622      	mov	r2, r4
 8004f08:	42ba      	cmp	r2, r7
 8004f0a:	d30a      	bcc.n	8004f22 <__exponent+0x66>
 8004f0c:	f10d 0209 	add.w	r2, sp, #9
 8004f10:	eba2 020c 	sub.w	r2, r2, ip
 8004f14:	42bc      	cmp	r4, r7
 8004f16:	bf88      	it	hi
 8004f18:	2200      	movhi	r2, #0
 8004f1a:	4413      	add	r3, r2
 8004f1c:	1a18      	subs	r0, r3, r0
 8004f1e:	b003      	add	sp, #12
 8004f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f22:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004f26:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004f2a:	e7ed      	b.n	8004f08 <__exponent+0x4c>
 8004f2c:	2330      	movs	r3, #48	; 0x30
 8004f2e:	3130      	adds	r1, #48	; 0x30
 8004f30:	7083      	strb	r3, [r0, #2]
 8004f32:	70c1      	strb	r1, [r0, #3]
 8004f34:	1d03      	adds	r3, r0, #4
 8004f36:	e7f1      	b.n	8004f1c <__exponent+0x60>

08004f38 <_printf_float>:
 8004f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3c:	ed2d 8b02 	vpush	{d8}
 8004f40:	b08d      	sub	sp, #52	; 0x34
 8004f42:	460c      	mov	r4, r1
 8004f44:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f48:	4616      	mov	r6, r2
 8004f4a:	461f      	mov	r7, r3
 8004f4c:	4605      	mov	r5, r0
 8004f4e:	f000 fce7 	bl	8005920 <_localeconv_r>
 8004f52:	f8d0 a000 	ldr.w	sl, [r0]
 8004f56:	4650      	mov	r0, sl
 8004f58:	f7fb f992 	bl	8000280 <strlen>
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f60:	6823      	ldr	r3, [r4, #0]
 8004f62:	9305      	str	r3, [sp, #20]
 8004f64:	f8d8 3000 	ldr.w	r3, [r8]
 8004f68:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f6c:	3307      	adds	r3, #7
 8004f6e:	f023 0307 	bic.w	r3, r3, #7
 8004f72:	f103 0208 	add.w	r2, r3, #8
 8004f76:	f8c8 2000 	str.w	r2, [r8]
 8004f7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004f7e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f82:	9307      	str	r3, [sp, #28]
 8004f84:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f88:	ee08 0a10 	vmov	s16, r0
 8004f8c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004f90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f94:	4b9e      	ldr	r3, [pc, #632]	; (8005210 <_printf_float+0x2d8>)
 8004f96:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9a:	f7fb fdcf 	bl	8000b3c <__aeabi_dcmpun>
 8004f9e:	bb88      	cbnz	r0, 8005004 <_printf_float+0xcc>
 8004fa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fa4:	4b9a      	ldr	r3, [pc, #616]	; (8005210 <_printf_float+0x2d8>)
 8004fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8004faa:	f7fb fda9 	bl	8000b00 <__aeabi_dcmple>
 8004fae:	bb48      	cbnz	r0, 8005004 <_printf_float+0xcc>
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	4640      	mov	r0, r8
 8004fb6:	4649      	mov	r1, r9
 8004fb8:	f7fb fd98 	bl	8000aec <__aeabi_dcmplt>
 8004fbc:	b110      	cbz	r0, 8004fc4 <_printf_float+0x8c>
 8004fbe:	232d      	movs	r3, #45	; 0x2d
 8004fc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc4:	4a93      	ldr	r2, [pc, #588]	; (8005214 <_printf_float+0x2dc>)
 8004fc6:	4b94      	ldr	r3, [pc, #592]	; (8005218 <_printf_float+0x2e0>)
 8004fc8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004fcc:	bf94      	ite	ls
 8004fce:	4690      	movls	r8, r2
 8004fd0:	4698      	movhi	r8, r3
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	9b05      	ldr	r3, [sp, #20]
 8004fd8:	f023 0304 	bic.w	r3, r3, #4
 8004fdc:	6023      	str	r3, [r4, #0]
 8004fde:	f04f 0900 	mov.w	r9, #0
 8004fe2:	9700      	str	r7, [sp, #0]
 8004fe4:	4633      	mov	r3, r6
 8004fe6:	aa0b      	add	r2, sp, #44	; 0x2c
 8004fe8:	4621      	mov	r1, r4
 8004fea:	4628      	mov	r0, r5
 8004fec:	f000 f9da 	bl	80053a4 <_printf_common>
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	f040 8090 	bne.w	8005116 <_printf_float+0x1de>
 8004ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8004ffa:	b00d      	add	sp, #52	; 0x34
 8004ffc:	ecbd 8b02 	vpop	{d8}
 8005000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005004:	4642      	mov	r2, r8
 8005006:	464b      	mov	r3, r9
 8005008:	4640      	mov	r0, r8
 800500a:	4649      	mov	r1, r9
 800500c:	f7fb fd96 	bl	8000b3c <__aeabi_dcmpun>
 8005010:	b140      	cbz	r0, 8005024 <_printf_float+0xec>
 8005012:	464b      	mov	r3, r9
 8005014:	2b00      	cmp	r3, #0
 8005016:	bfbc      	itt	lt
 8005018:	232d      	movlt	r3, #45	; 0x2d
 800501a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800501e:	4a7f      	ldr	r2, [pc, #508]	; (800521c <_printf_float+0x2e4>)
 8005020:	4b7f      	ldr	r3, [pc, #508]	; (8005220 <_printf_float+0x2e8>)
 8005022:	e7d1      	b.n	8004fc8 <_printf_float+0x90>
 8005024:	6863      	ldr	r3, [r4, #4]
 8005026:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800502a:	9206      	str	r2, [sp, #24]
 800502c:	1c5a      	adds	r2, r3, #1
 800502e:	d13f      	bne.n	80050b0 <_printf_float+0x178>
 8005030:	2306      	movs	r3, #6
 8005032:	6063      	str	r3, [r4, #4]
 8005034:	9b05      	ldr	r3, [sp, #20]
 8005036:	6861      	ldr	r1, [r4, #4]
 8005038:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800503c:	2300      	movs	r3, #0
 800503e:	9303      	str	r3, [sp, #12]
 8005040:	ab0a      	add	r3, sp, #40	; 0x28
 8005042:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005046:	ab09      	add	r3, sp, #36	; 0x24
 8005048:	ec49 8b10 	vmov	d0, r8, r9
 800504c:	9300      	str	r3, [sp, #0]
 800504e:	6022      	str	r2, [r4, #0]
 8005050:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005054:	4628      	mov	r0, r5
 8005056:	f7ff fecf 	bl	8004df8 <__cvt>
 800505a:	9b06      	ldr	r3, [sp, #24]
 800505c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800505e:	2b47      	cmp	r3, #71	; 0x47
 8005060:	4680      	mov	r8, r0
 8005062:	d108      	bne.n	8005076 <_printf_float+0x13e>
 8005064:	1cc8      	adds	r0, r1, #3
 8005066:	db02      	blt.n	800506e <_printf_float+0x136>
 8005068:	6863      	ldr	r3, [r4, #4]
 800506a:	4299      	cmp	r1, r3
 800506c:	dd41      	ble.n	80050f2 <_printf_float+0x1ba>
 800506e:	f1ab 0302 	sub.w	r3, fp, #2
 8005072:	fa5f fb83 	uxtb.w	fp, r3
 8005076:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800507a:	d820      	bhi.n	80050be <_printf_float+0x186>
 800507c:	3901      	subs	r1, #1
 800507e:	465a      	mov	r2, fp
 8005080:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005084:	9109      	str	r1, [sp, #36]	; 0x24
 8005086:	f7ff ff19 	bl	8004ebc <__exponent>
 800508a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800508c:	1813      	adds	r3, r2, r0
 800508e:	2a01      	cmp	r2, #1
 8005090:	4681      	mov	r9, r0
 8005092:	6123      	str	r3, [r4, #16]
 8005094:	dc02      	bgt.n	800509c <_printf_float+0x164>
 8005096:	6822      	ldr	r2, [r4, #0]
 8005098:	07d2      	lsls	r2, r2, #31
 800509a:	d501      	bpl.n	80050a0 <_printf_float+0x168>
 800509c:	3301      	adds	r3, #1
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d09c      	beq.n	8004fe2 <_printf_float+0xaa>
 80050a8:	232d      	movs	r3, #45	; 0x2d
 80050aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050ae:	e798      	b.n	8004fe2 <_printf_float+0xaa>
 80050b0:	9a06      	ldr	r2, [sp, #24]
 80050b2:	2a47      	cmp	r2, #71	; 0x47
 80050b4:	d1be      	bne.n	8005034 <_printf_float+0xfc>
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1bc      	bne.n	8005034 <_printf_float+0xfc>
 80050ba:	2301      	movs	r3, #1
 80050bc:	e7b9      	b.n	8005032 <_printf_float+0xfa>
 80050be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80050c2:	d118      	bne.n	80050f6 <_printf_float+0x1be>
 80050c4:	2900      	cmp	r1, #0
 80050c6:	6863      	ldr	r3, [r4, #4]
 80050c8:	dd0b      	ble.n	80050e2 <_printf_float+0x1aa>
 80050ca:	6121      	str	r1, [r4, #16]
 80050cc:	b913      	cbnz	r3, 80050d4 <_printf_float+0x19c>
 80050ce:	6822      	ldr	r2, [r4, #0]
 80050d0:	07d0      	lsls	r0, r2, #31
 80050d2:	d502      	bpl.n	80050da <_printf_float+0x1a2>
 80050d4:	3301      	adds	r3, #1
 80050d6:	440b      	add	r3, r1
 80050d8:	6123      	str	r3, [r4, #16]
 80050da:	65a1      	str	r1, [r4, #88]	; 0x58
 80050dc:	f04f 0900 	mov.w	r9, #0
 80050e0:	e7de      	b.n	80050a0 <_printf_float+0x168>
 80050e2:	b913      	cbnz	r3, 80050ea <_printf_float+0x1b2>
 80050e4:	6822      	ldr	r2, [r4, #0]
 80050e6:	07d2      	lsls	r2, r2, #31
 80050e8:	d501      	bpl.n	80050ee <_printf_float+0x1b6>
 80050ea:	3302      	adds	r3, #2
 80050ec:	e7f4      	b.n	80050d8 <_printf_float+0x1a0>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e7f2      	b.n	80050d8 <_printf_float+0x1a0>
 80050f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80050f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050f8:	4299      	cmp	r1, r3
 80050fa:	db05      	blt.n	8005108 <_printf_float+0x1d0>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	6121      	str	r1, [r4, #16]
 8005100:	07d8      	lsls	r0, r3, #31
 8005102:	d5ea      	bpl.n	80050da <_printf_float+0x1a2>
 8005104:	1c4b      	adds	r3, r1, #1
 8005106:	e7e7      	b.n	80050d8 <_printf_float+0x1a0>
 8005108:	2900      	cmp	r1, #0
 800510a:	bfd4      	ite	le
 800510c:	f1c1 0202 	rsble	r2, r1, #2
 8005110:	2201      	movgt	r2, #1
 8005112:	4413      	add	r3, r2
 8005114:	e7e0      	b.n	80050d8 <_printf_float+0x1a0>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	055a      	lsls	r2, r3, #21
 800511a:	d407      	bmi.n	800512c <_printf_float+0x1f4>
 800511c:	6923      	ldr	r3, [r4, #16]
 800511e:	4642      	mov	r2, r8
 8005120:	4631      	mov	r1, r6
 8005122:	4628      	mov	r0, r5
 8005124:	47b8      	blx	r7
 8005126:	3001      	adds	r0, #1
 8005128:	d12c      	bne.n	8005184 <_printf_float+0x24c>
 800512a:	e764      	b.n	8004ff6 <_printf_float+0xbe>
 800512c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005130:	f240 80e0 	bls.w	80052f4 <_printf_float+0x3bc>
 8005134:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005138:	2200      	movs	r2, #0
 800513a:	2300      	movs	r3, #0
 800513c:	f7fb fccc 	bl	8000ad8 <__aeabi_dcmpeq>
 8005140:	2800      	cmp	r0, #0
 8005142:	d034      	beq.n	80051ae <_printf_float+0x276>
 8005144:	4a37      	ldr	r2, [pc, #220]	; (8005224 <_printf_float+0x2ec>)
 8005146:	2301      	movs	r3, #1
 8005148:	4631      	mov	r1, r6
 800514a:	4628      	mov	r0, r5
 800514c:	47b8      	blx	r7
 800514e:	3001      	adds	r0, #1
 8005150:	f43f af51 	beq.w	8004ff6 <_printf_float+0xbe>
 8005154:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005158:	429a      	cmp	r2, r3
 800515a:	db02      	blt.n	8005162 <_printf_float+0x22a>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	07d8      	lsls	r0, r3, #31
 8005160:	d510      	bpl.n	8005184 <_printf_float+0x24c>
 8005162:	ee18 3a10 	vmov	r3, s16
 8005166:	4652      	mov	r2, sl
 8005168:	4631      	mov	r1, r6
 800516a:	4628      	mov	r0, r5
 800516c:	47b8      	blx	r7
 800516e:	3001      	adds	r0, #1
 8005170:	f43f af41 	beq.w	8004ff6 <_printf_float+0xbe>
 8005174:	f04f 0800 	mov.w	r8, #0
 8005178:	f104 091a 	add.w	r9, r4, #26
 800517c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800517e:	3b01      	subs	r3, #1
 8005180:	4543      	cmp	r3, r8
 8005182:	dc09      	bgt.n	8005198 <_printf_float+0x260>
 8005184:	6823      	ldr	r3, [r4, #0]
 8005186:	079b      	lsls	r3, r3, #30
 8005188:	f100 8107 	bmi.w	800539a <_printf_float+0x462>
 800518c:	68e0      	ldr	r0, [r4, #12]
 800518e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005190:	4298      	cmp	r0, r3
 8005192:	bfb8      	it	lt
 8005194:	4618      	movlt	r0, r3
 8005196:	e730      	b.n	8004ffa <_printf_float+0xc2>
 8005198:	2301      	movs	r3, #1
 800519a:	464a      	mov	r2, r9
 800519c:	4631      	mov	r1, r6
 800519e:	4628      	mov	r0, r5
 80051a0:	47b8      	blx	r7
 80051a2:	3001      	adds	r0, #1
 80051a4:	f43f af27 	beq.w	8004ff6 <_printf_float+0xbe>
 80051a8:	f108 0801 	add.w	r8, r8, #1
 80051ac:	e7e6      	b.n	800517c <_printf_float+0x244>
 80051ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	dc39      	bgt.n	8005228 <_printf_float+0x2f0>
 80051b4:	4a1b      	ldr	r2, [pc, #108]	; (8005224 <_printf_float+0x2ec>)
 80051b6:	2301      	movs	r3, #1
 80051b8:	4631      	mov	r1, r6
 80051ba:	4628      	mov	r0, r5
 80051bc:	47b8      	blx	r7
 80051be:	3001      	adds	r0, #1
 80051c0:	f43f af19 	beq.w	8004ff6 <_printf_float+0xbe>
 80051c4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051c8:	4313      	orrs	r3, r2
 80051ca:	d102      	bne.n	80051d2 <_printf_float+0x29a>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	07d9      	lsls	r1, r3, #31
 80051d0:	d5d8      	bpl.n	8005184 <_printf_float+0x24c>
 80051d2:	ee18 3a10 	vmov	r3, s16
 80051d6:	4652      	mov	r2, sl
 80051d8:	4631      	mov	r1, r6
 80051da:	4628      	mov	r0, r5
 80051dc:	47b8      	blx	r7
 80051de:	3001      	adds	r0, #1
 80051e0:	f43f af09 	beq.w	8004ff6 <_printf_float+0xbe>
 80051e4:	f04f 0900 	mov.w	r9, #0
 80051e8:	f104 0a1a 	add.w	sl, r4, #26
 80051ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051ee:	425b      	negs	r3, r3
 80051f0:	454b      	cmp	r3, r9
 80051f2:	dc01      	bgt.n	80051f8 <_printf_float+0x2c0>
 80051f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051f6:	e792      	b.n	800511e <_printf_float+0x1e6>
 80051f8:	2301      	movs	r3, #1
 80051fa:	4652      	mov	r2, sl
 80051fc:	4631      	mov	r1, r6
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	f43f aef7 	beq.w	8004ff6 <_printf_float+0xbe>
 8005208:	f109 0901 	add.w	r9, r9, #1
 800520c:	e7ee      	b.n	80051ec <_printf_float+0x2b4>
 800520e:	bf00      	nop
 8005210:	7fefffff 	.word	0x7fefffff
 8005214:	08007d80 	.word	0x08007d80
 8005218:	08007d84 	.word	0x08007d84
 800521c:	08007d88 	.word	0x08007d88
 8005220:	08007d8c 	.word	0x08007d8c
 8005224:	08007d90 	.word	0x08007d90
 8005228:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800522a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800522c:	429a      	cmp	r2, r3
 800522e:	bfa8      	it	ge
 8005230:	461a      	movge	r2, r3
 8005232:	2a00      	cmp	r2, #0
 8005234:	4691      	mov	r9, r2
 8005236:	dc37      	bgt.n	80052a8 <_printf_float+0x370>
 8005238:	f04f 0b00 	mov.w	fp, #0
 800523c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005240:	f104 021a 	add.w	r2, r4, #26
 8005244:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005246:	9305      	str	r3, [sp, #20]
 8005248:	eba3 0309 	sub.w	r3, r3, r9
 800524c:	455b      	cmp	r3, fp
 800524e:	dc33      	bgt.n	80052b8 <_printf_float+0x380>
 8005250:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005254:	429a      	cmp	r2, r3
 8005256:	db3b      	blt.n	80052d0 <_printf_float+0x398>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	07da      	lsls	r2, r3, #31
 800525c:	d438      	bmi.n	80052d0 <_printf_float+0x398>
 800525e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005262:	eba2 0903 	sub.w	r9, r2, r3
 8005266:	9b05      	ldr	r3, [sp, #20]
 8005268:	1ad2      	subs	r2, r2, r3
 800526a:	4591      	cmp	r9, r2
 800526c:	bfa8      	it	ge
 800526e:	4691      	movge	r9, r2
 8005270:	f1b9 0f00 	cmp.w	r9, #0
 8005274:	dc35      	bgt.n	80052e2 <_printf_float+0x3aa>
 8005276:	f04f 0800 	mov.w	r8, #0
 800527a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800527e:	f104 0a1a 	add.w	sl, r4, #26
 8005282:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005286:	1a9b      	subs	r3, r3, r2
 8005288:	eba3 0309 	sub.w	r3, r3, r9
 800528c:	4543      	cmp	r3, r8
 800528e:	f77f af79 	ble.w	8005184 <_printf_float+0x24c>
 8005292:	2301      	movs	r3, #1
 8005294:	4652      	mov	r2, sl
 8005296:	4631      	mov	r1, r6
 8005298:	4628      	mov	r0, r5
 800529a:	47b8      	blx	r7
 800529c:	3001      	adds	r0, #1
 800529e:	f43f aeaa 	beq.w	8004ff6 <_printf_float+0xbe>
 80052a2:	f108 0801 	add.w	r8, r8, #1
 80052a6:	e7ec      	b.n	8005282 <_printf_float+0x34a>
 80052a8:	4613      	mov	r3, r2
 80052aa:	4631      	mov	r1, r6
 80052ac:	4642      	mov	r2, r8
 80052ae:	4628      	mov	r0, r5
 80052b0:	47b8      	blx	r7
 80052b2:	3001      	adds	r0, #1
 80052b4:	d1c0      	bne.n	8005238 <_printf_float+0x300>
 80052b6:	e69e      	b.n	8004ff6 <_printf_float+0xbe>
 80052b8:	2301      	movs	r3, #1
 80052ba:	4631      	mov	r1, r6
 80052bc:	4628      	mov	r0, r5
 80052be:	9205      	str	r2, [sp, #20]
 80052c0:	47b8      	blx	r7
 80052c2:	3001      	adds	r0, #1
 80052c4:	f43f ae97 	beq.w	8004ff6 <_printf_float+0xbe>
 80052c8:	9a05      	ldr	r2, [sp, #20]
 80052ca:	f10b 0b01 	add.w	fp, fp, #1
 80052ce:	e7b9      	b.n	8005244 <_printf_float+0x30c>
 80052d0:	ee18 3a10 	vmov	r3, s16
 80052d4:	4652      	mov	r2, sl
 80052d6:	4631      	mov	r1, r6
 80052d8:	4628      	mov	r0, r5
 80052da:	47b8      	blx	r7
 80052dc:	3001      	adds	r0, #1
 80052de:	d1be      	bne.n	800525e <_printf_float+0x326>
 80052e0:	e689      	b.n	8004ff6 <_printf_float+0xbe>
 80052e2:	9a05      	ldr	r2, [sp, #20]
 80052e4:	464b      	mov	r3, r9
 80052e6:	4442      	add	r2, r8
 80052e8:	4631      	mov	r1, r6
 80052ea:	4628      	mov	r0, r5
 80052ec:	47b8      	blx	r7
 80052ee:	3001      	adds	r0, #1
 80052f0:	d1c1      	bne.n	8005276 <_printf_float+0x33e>
 80052f2:	e680      	b.n	8004ff6 <_printf_float+0xbe>
 80052f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052f6:	2a01      	cmp	r2, #1
 80052f8:	dc01      	bgt.n	80052fe <_printf_float+0x3c6>
 80052fa:	07db      	lsls	r3, r3, #31
 80052fc:	d53a      	bpl.n	8005374 <_printf_float+0x43c>
 80052fe:	2301      	movs	r3, #1
 8005300:	4642      	mov	r2, r8
 8005302:	4631      	mov	r1, r6
 8005304:	4628      	mov	r0, r5
 8005306:	47b8      	blx	r7
 8005308:	3001      	adds	r0, #1
 800530a:	f43f ae74 	beq.w	8004ff6 <_printf_float+0xbe>
 800530e:	ee18 3a10 	vmov	r3, s16
 8005312:	4652      	mov	r2, sl
 8005314:	4631      	mov	r1, r6
 8005316:	4628      	mov	r0, r5
 8005318:	47b8      	blx	r7
 800531a:	3001      	adds	r0, #1
 800531c:	f43f ae6b 	beq.w	8004ff6 <_printf_float+0xbe>
 8005320:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005324:	2200      	movs	r2, #0
 8005326:	2300      	movs	r3, #0
 8005328:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800532c:	f7fb fbd4 	bl	8000ad8 <__aeabi_dcmpeq>
 8005330:	b9d8      	cbnz	r0, 800536a <_printf_float+0x432>
 8005332:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005336:	f108 0201 	add.w	r2, r8, #1
 800533a:	4631      	mov	r1, r6
 800533c:	4628      	mov	r0, r5
 800533e:	47b8      	blx	r7
 8005340:	3001      	adds	r0, #1
 8005342:	d10e      	bne.n	8005362 <_printf_float+0x42a>
 8005344:	e657      	b.n	8004ff6 <_printf_float+0xbe>
 8005346:	2301      	movs	r3, #1
 8005348:	4652      	mov	r2, sl
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	f43f ae50 	beq.w	8004ff6 <_printf_float+0xbe>
 8005356:	f108 0801 	add.w	r8, r8, #1
 800535a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800535c:	3b01      	subs	r3, #1
 800535e:	4543      	cmp	r3, r8
 8005360:	dcf1      	bgt.n	8005346 <_printf_float+0x40e>
 8005362:	464b      	mov	r3, r9
 8005364:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005368:	e6da      	b.n	8005120 <_printf_float+0x1e8>
 800536a:	f04f 0800 	mov.w	r8, #0
 800536e:	f104 0a1a 	add.w	sl, r4, #26
 8005372:	e7f2      	b.n	800535a <_printf_float+0x422>
 8005374:	2301      	movs	r3, #1
 8005376:	4642      	mov	r2, r8
 8005378:	e7df      	b.n	800533a <_printf_float+0x402>
 800537a:	2301      	movs	r3, #1
 800537c:	464a      	mov	r2, r9
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	47b8      	blx	r7
 8005384:	3001      	adds	r0, #1
 8005386:	f43f ae36 	beq.w	8004ff6 <_printf_float+0xbe>
 800538a:	f108 0801 	add.w	r8, r8, #1
 800538e:	68e3      	ldr	r3, [r4, #12]
 8005390:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005392:	1a5b      	subs	r3, r3, r1
 8005394:	4543      	cmp	r3, r8
 8005396:	dcf0      	bgt.n	800537a <_printf_float+0x442>
 8005398:	e6f8      	b.n	800518c <_printf_float+0x254>
 800539a:	f04f 0800 	mov.w	r8, #0
 800539e:	f104 0919 	add.w	r9, r4, #25
 80053a2:	e7f4      	b.n	800538e <_printf_float+0x456>

080053a4 <_printf_common>:
 80053a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053a8:	4616      	mov	r6, r2
 80053aa:	4699      	mov	r9, r3
 80053ac:	688a      	ldr	r2, [r1, #8]
 80053ae:	690b      	ldr	r3, [r1, #16]
 80053b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053b4:	4293      	cmp	r3, r2
 80053b6:	bfb8      	it	lt
 80053b8:	4613      	movlt	r3, r2
 80053ba:	6033      	str	r3, [r6, #0]
 80053bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053c0:	4607      	mov	r7, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	b10a      	cbz	r2, 80053ca <_printf_common+0x26>
 80053c6:	3301      	adds	r3, #1
 80053c8:	6033      	str	r3, [r6, #0]
 80053ca:	6823      	ldr	r3, [r4, #0]
 80053cc:	0699      	lsls	r1, r3, #26
 80053ce:	bf42      	ittt	mi
 80053d0:	6833      	ldrmi	r3, [r6, #0]
 80053d2:	3302      	addmi	r3, #2
 80053d4:	6033      	strmi	r3, [r6, #0]
 80053d6:	6825      	ldr	r5, [r4, #0]
 80053d8:	f015 0506 	ands.w	r5, r5, #6
 80053dc:	d106      	bne.n	80053ec <_printf_common+0x48>
 80053de:	f104 0a19 	add.w	sl, r4, #25
 80053e2:	68e3      	ldr	r3, [r4, #12]
 80053e4:	6832      	ldr	r2, [r6, #0]
 80053e6:	1a9b      	subs	r3, r3, r2
 80053e8:	42ab      	cmp	r3, r5
 80053ea:	dc26      	bgt.n	800543a <_printf_common+0x96>
 80053ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053f0:	1e13      	subs	r3, r2, #0
 80053f2:	6822      	ldr	r2, [r4, #0]
 80053f4:	bf18      	it	ne
 80053f6:	2301      	movne	r3, #1
 80053f8:	0692      	lsls	r2, r2, #26
 80053fa:	d42b      	bmi.n	8005454 <_printf_common+0xb0>
 80053fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005400:	4649      	mov	r1, r9
 8005402:	4638      	mov	r0, r7
 8005404:	47c0      	blx	r8
 8005406:	3001      	adds	r0, #1
 8005408:	d01e      	beq.n	8005448 <_printf_common+0xa4>
 800540a:	6823      	ldr	r3, [r4, #0]
 800540c:	6922      	ldr	r2, [r4, #16]
 800540e:	f003 0306 	and.w	r3, r3, #6
 8005412:	2b04      	cmp	r3, #4
 8005414:	bf02      	ittt	eq
 8005416:	68e5      	ldreq	r5, [r4, #12]
 8005418:	6833      	ldreq	r3, [r6, #0]
 800541a:	1aed      	subeq	r5, r5, r3
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	bf0c      	ite	eq
 8005420:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005424:	2500      	movne	r5, #0
 8005426:	4293      	cmp	r3, r2
 8005428:	bfc4      	itt	gt
 800542a:	1a9b      	subgt	r3, r3, r2
 800542c:	18ed      	addgt	r5, r5, r3
 800542e:	2600      	movs	r6, #0
 8005430:	341a      	adds	r4, #26
 8005432:	42b5      	cmp	r5, r6
 8005434:	d11a      	bne.n	800546c <_printf_common+0xc8>
 8005436:	2000      	movs	r0, #0
 8005438:	e008      	b.n	800544c <_printf_common+0xa8>
 800543a:	2301      	movs	r3, #1
 800543c:	4652      	mov	r2, sl
 800543e:	4649      	mov	r1, r9
 8005440:	4638      	mov	r0, r7
 8005442:	47c0      	blx	r8
 8005444:	3001      	adds	r0, #1
 8005446:	d103      	bne.n	8005450 <_printf_common+0xac>
 8005448:	f04f 30ff 	mov.w	r0, #4294967295
 800544c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005450:	3501      	adds	r5, #1
 8005452:	e7c6      	b.n	80053e2 <_printf_common+0x3e>
 8005454:	18e1      	adds	r1, r4, r3
 8005456:	1c5a      	adds	r2, r3, #1
 8005458:	2030      	movs	r0, #48	; 0x30
 800545a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800545e:	4422      	add	r2, r4
 8005460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005468:	3302      	adds	r3, #2
 800546a:	e7c7      	b.n	80053fc <_printf_common+0x58>
 800546c:	2301      	movs	r3, #1
 800546e:	4622      	mov	r2, r4
 8005470:	4649      	mov	r1, r9
 8005472:	4638      	mov	r0, r7
 8005474:	47c0      	blx	r8
 8005476:	3001      	adds	r0, #1
 8005478:	d0e6      	beq.n	8005448 <_printf_common+0xa4>
 800547a:	3601      	adds	r6, #1
 800547c:	e7d9      	b.n	8005432 <_printf_common+0x8e>
	...

08005480 <_printf_i>:
 8005480:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005484:	7e0f      	ldrb	r7, [r1, #24]
 8005486:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005488:	2f78      	cmp	r7, #120	; 0x78
 800548a:	4691      	mov	r9, r2
 800548c:	4680      	mov	r8, r0
 800548e:	460c      	mov	r4, r1
 8005490:	469a      	mov	sl, r3
 8005492:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005496:	d807      	bhi.n	80054a8 <_printf_i+0x28>
 8005498:	2f62      	cmp	r7, #98	; 0x62
 800549a:	d80a      	bhi.n	80054b2 <_printf_i+0x32>
 800549c:	2f00      	cmp	r7, #0
 800549e:	f000 80d4 	beq.w	800564a <_printf_i+0x1ca>
 80054a2:	2f58      	cmp	r7, #88	; 0x58
 80054a4:	f000 80c0 	beq.w	8005628 <_printf_i+0x1a8>
 80054a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054b0:	e03a      	b.n	8005528 <_printf_i+0xa8>
 80054b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054b6:	2b15      	cmp	r3, #21
 80054b8:	d8f6      	bhi.n	80054a8 <_printf_i+0x28>
 80054ba:	a101      	add	r1, pc, #4	; (adr r1, 80054c0 <_printf_i+0x40>)
 80054bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c0:	08005519 	.word	0x08005519
 80054c4:	0800552d 	.word	0x0800552d
 80054c8:	080054a9 	.word	0x080054a9
 80054cc:	080054a9 	.word	0x080054a9
 80054d0:	080054a9 	.word	0x080054a9
 80054d4:	080054a9 	.word	0x080054a9
 80054d8:	0800552d 	.word	0x0800552d
 80054dc:	080054a9 	.word	0x080054a9
 80054e0:	080054a9 	.word	0x080054a9
 80054e4:	080054a9 	.word	0x080054a9
 80054e8:	080054a9 	.word	0x080054a9
 80054ec:	08005631 	.word	0x08005631
 80054f0:	08005559 	.word	0x08005559
 80054f4:	080055eb 	.word	0x080055eb
 80054f8:	080054a9 	.word	0x080054a9
 80054fc:	080054a9 	.word	0x080054a9
 8005500:	08005653 	.word	0x08005653
 8005504:	080054a9 	.word	0x080054a9
 8005508:	08005559 	.word	0x08005559
 800550c:	080054a9 	.word	0x080054a9
 8005510:	080054a9 	.word	0x080054a9
 8005514:	080055f3 	.word	0x080055f3
 8005518:	682b      	ldr	r3, [r5, #0]
 800551a:	1d1a      	adds	r2, r3, #4
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	602a      	str	r2, [r5, #0]
 8005520:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005524:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005528:	2301      	movs	r3, #1
 800552a:	e09f      	b.n	800566c <_printf_i+0x1ec>
 800552c:	6820      	ldr	r0, [r4, #0]
 800552e:	682b      	ldr	r3, [r5, #0]
 8005530:	0607      	lsls	r7, r0, #24
 8005532:	f103 0104 	add.w	r1, r3, #4
 8005536:	6029      	str	r1, [r5, #0]
 8005538:	d501      	bpl.n	800553e <_printf_i+0xbe>
 800553a:	681e      	ldr	r6, [r3, #0]
 800553c:	e003      	b.n	8005546 <_printf_i+0xc6>
 800553e:	0646      	lsls	r6, r0, #25
 8005540:	d5fb      	bpl.n	800553a <_printf_i+0xba>
 8005542:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005546:	2e00      	cmp	r6, #0
 8005548:	da03      	bge.n	8005552 <_printf_i+0xd2>
 800554a:	232d      	movs	r3, #45	; 0x2d
 800554c:	4276      	negs	r6, r6
 800554e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005552:	485a      	ldr	r0, [pc, #360]	; (80056bc <_printf_i+0x23c>)
 8005554:	230a      	movs	r3, #10
 8005556:	e012      	b.n	800557e <_printf_i+0xfe>
 8005558:	682b      	ldr	r3, [r5, #0]
 800555a:	6820      	ldr	r0, [r4, #0]
 800555c:	1d19      	adds	r1, r3, #4
 800555e:	6029      	str	r1, [r5, #0]
 8005560:	0605      	lsls	r5, r0, #24
 8005562:	d501      	bpl.n	8005568 <_printf_i+0xe8>
 8005564:	681e      	ldr	r6, [r3, #0]
 8005566:	e002      	b.n	800556e <_printf_i+0xee>
 8005568:	0641      	lsls	r1, r0, #25
 800556a:	d5fb      	bpl.n	8005564 <_printf_i+0xe4>
 800556c:	881e      	ldrh	r6, [r3, #0]
 800556e:	4853      	ldr	r0, [pc, #332]	; (80056bc <_printf_i+0x23c>)
 8005570:	2f6f      	cmp	r7, #111	; 0x6f
 8005572:	bf0c      	ite	eq
 8005574:	2308      	moveq	r3, #8
 8005576:	230a      	movne	r3, #10
 8005578:	2100      	movs	r1, #0
 800557a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800557e:	6865      	ldr	r5, [r4, #4]
 8005580:	60a5      	str	r5, [r4, #8]
 8005582:	2d00      	cmp	r5, #0
 8005584:	bfa2      	ittt	ge
 8005586:	6821      	ldrge	r1, [r4, #0]
 8005588:	f021 0104 	bicge.w	r1, r1, #4
 800558c:	6021      	strge	r1, [r4, #0]
 800558e:	b90e      	cbnz	r6, 8005594 <_printf_i+0x114>
 8005590:	2d00      	cmp	r5, #0
 8005592:	d04b      	beq.n	800562c <_printf_i+0x1ac>
 8005594:	4615      	mov	r5, r2
 8005596:	fbb6 f1f3 	udiv	r1, r6, r3
 800559a:	fb03 6711 	mls	r7, r3, r1, r6
 800559e:	5dc7      	ldrb	r7, [r0, r7]
 80055a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055a4:	4637      	mov	r7, r6
 80055a6:	42bb      	cmp	r3, r7
 80055a8:	460e      	mov	r6, r1
 80055aa:	d9f4      	bls.n	8005596 <_printf_i+0x116>
 80055ac:	2b08      	cmp	r3, #8
 80055ae:	d10b      	bne.n	80055c8 <_printf_i+0x148>
 80055b0:	6823      	ldr	r3, [r4, #0]
 80055b2:	07de      	lsls	r6, r3, #31
 80055b4:	d508      	bpl.n	80055c8 <_printf_i+0x148>
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	6861      	ldr	r1, [r4, #4]
 80055ba:	4299      	cmp	r1, r3
 80055bc:	bfde      	ittt	le
 80055be:	2330      	movle	r3, #48	; 0x30
 80055c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055c8:	1b52      	subs	r2, r2, r5
 80055ca:	6122      	str	r2, [r4, #16]
 80055cc:	f8cd a000 	str.w	sl, [sp]
 80055d0:	464b      	mov	r3, r9
 80055d2:	aa03      	add	r2, sp, #12
 80055d4:	4621      	mov	r1, r4
 80055d6:	4640      	mov	r0, r8
 80055d8:	f7ff fee4 	bl	80053a4 <_printf_common>
 80055dc:	3001      	adds	r0, #1
 80055de:	d14a      	bne.n	8005676 <_printf_i+0x1f6>
 80055e0:	f04f 30ff 	mov.w	r0, #4294967295
 80055e4:	b004      	add	sp, #16
 80055e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	f043 0320 	orr.w	r3, r3, #32
 80055f0:	6023      	str	r3, [r4, #0]
 80055f2:	4833      	ldr	r0, [pc, #204]	; (80056c0 <_printf_i+0x240>)
 80055f4:	2778      	movs	r7, #120	; 0x78
 80055f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80055fa:	6823      	ldr	r3, [r4, #0]
 80055fc:	6829      	ldr	r1, [r5, #0]
 80055fe:	061f      	lsls	r7, r3, #24
 8005600:	f851 6b04 	ldr.w	r6, [r1], #4
 8005604:	d402      	bmi.n	800560c <_printf_i+0x18c>
 8005606:	065f      	lsls	r7, r3, #25
 8005608:	bf48      	it	mi
 800560a:	b2b6      	uxthmi	r6, r6
 800560c:	07df      	lsls	r7, r3, #31
 800560e:	bf48      	it	mi
 8005610:	f043 0320 	orrmi.w	r3, r3, #32
 8005614:	6029      	str	r1, [r5, #0]
 8005616:	bf48      	it	mi
 8005618:	6023      	strmi	r3, [r4, #0]
 800561a:	b91e      	cbnz	r6, 8005624 <_printf_i+0x1a4>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	f023 0320 	bic.w	r3, r3, #32
 8005622:	6023      	str	r3, [r4, #0]
 8005624:	2310      	movs	r3, #16
 8005626:	e7a7      	b.n	8005578 <_printf_i+0xf8>
 8005628:	4824      	ldr	r0, [pc, #144]	; (80056bc <_printf_i+0x23c>)
 800562a:	e7e4      	b.n	80055f6 <_printf_i+0x176>
 800562c:	4615      	mov	r5, r2
 800562e:	e7bd      	b.n	80055ac <_printf_i+0x12c>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	6826      	ldr	r6, [r4, #0]
 8005634:	6961      	ldr	r1, [r4, #20]
 8005636:	1d18      	adds	r0, r3, #4
 8005638:	6028      	str	r0, [r5, #0]
 800563a:	0635      	lsls	r5, r6, #24
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	d501      	bpl.n	8005644 <_printf_i+0x1c4>
 8005640:	6019      	str	r1, [r3, #0]
 8005642:	e002      	b.n	800564a <_printf_i+0x1ca>
 8005644:	0670      	lsls	r0, r6, #25
 8005646:	d5fb      	bpl.n	8005640 <_printf_i+0x1c0>
 8005648:	8019      	strh	r1, [r3, #0]
 800564a:	2300      	movs	r3, #0
 800564c:	6123      	str	r3, [r4, #16]
 800564e:	4615      	mov	r5, r2
 8005650:	e7bc      	b.n	80055cc <_printf_i+0x14c>
 8005652:	682b      	ldr	r3, [r5, #0]
 8005654:	1d1a      	adds	r2, r3, #4
 8005656:	602a      	str	r2, [r5, #0]
 8005658:	681d      	ldr	r5, [r3, #0]
 800565a:	6862      	ldr	r2, [r4, #4]
 800565c:	2100      	movs	r1, #0
 800565e:	4628      	mov	r0, r5
 8005660:	f7fa fdbe 	bl	80001e0 <memchr>
 8005664:	b108      	cbz	r0, 800566a <_printf_i+0x1ea>
 8005666:	1b40      	subs	r0, r0, r5
 8005668:	6060      	str	r0, [r4, #4]
 800566a:	6863      	ldr	r3, [r4, #4]
 800566c:	6123      	str	r3, [r4, #16]
 800566e:	2300      	movs	r3, #0
 8005670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005674:	e7aa      	b.n	80055cc <_printf_i+0x14c>
 8005676:	6923      	ldr	r3, [r4, #16]
 8005678:	462a      	mov	r2, r5
 800567a:	4649      	mov	r1, r9
 800567c:	4640      	mov	r0, r8
 800567e:	47d0      	blx	sl
 8005680:	3001      	adds	r0, #1
 8005682:	d0ad      	beq.n	80055e0 <_printf_i+0x160>
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	079b      	lsls	r3, r3, #30
 8005688:	d413      	bmi.n	80056b2 <_printf_i+0x232>
 800568a:	68e0      	ldr	r0, [r4, #12]
 800568c:	9b03      	ldr	r3, [sp, #12]
 800568e:	4298      	cmp	r0, r3
 8005690:	bfb8      	it	lt
 8005692:	4618      	movlt	r0, r3
 8005694:	e7a6      	b.n	80055e4 <_printf_i+0x164>
 8005696:	2301      	movs	r3, #1
 8005698:	4632      	mov	r2, r6
 800569a:	4649      	mov	r1, r9
 800569c:	4640      	mov	r0, r8
 800569e:	47d0      	blx	sl
 80056a0:	3001      	adds	r0, #1
 80056a2:	d09d      	beq.n	80055e0 <_printf_i+0x160>
 80056a4:	3501      	adds	r5, #1
 80056a6:	68e3      	ldr	r3, [r4, #12]
 80056a8:	9903      	ldr	r1, [sp, #12]
 80056aa:	1a5b      	subs	r3, r3, r1
 80056ac:	42ab      	cmp	r3, r5
 80056ae:	dcf2      	bgt.n	8005696 <_printf_i+0x216>
 80056b0:	e7eb      	b.n	800568a <_printf_i+0x20a>
 80056b2:	2500      	movs	r5, #0
 80056b4:	f104 0619 	add.w	r6, r4, #25
 80056b8:	e7f5      	b.n	80056a6 <_printf_i+0x226>
 80056ba:	bf00      	nop
 80056bc:	08007d92 	.word	0x08007d92
 80056c0:	08007da3 	.word	0x08007da3

080056c4 <std>:
 80056c4:	2300      	movs	r3, #0
 80056c6:	b510      	push	{r4, lr}
 80056c8:	4604      	mov	r4, r0
 80056ca:	e9c0 3300 	strd	r3, r3, [r0]
 80056ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80056d2:	6083      	str	r3, [r0, #8]
 80056d4:	8181      	strh	r1, [r0, #12]
 80056d6:	6643      	str	r3, [r0, #100]	; 0x64
 80056d8:	81c2      	strh	r2, [r0, #14]
 80056da:	6183      	str	r3, [r0, #24]
 80056dc:	4619      	mov	r1, r3
 80056de:	2208      	movs	r2, #8
 80056e0:	305c      	adds	r0, #92	; 0x5c
 80056e2:	f000 f914 	bl	800590e <memset>
 80056e6:	4b0d      	ldr	r3, [pc, #52]	; (800571c <std+0x58>)
 80056e8:	6263      	str	r3, [r4, #36]	; 0x24
 80056ea:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <std+0x5c>)
 80056ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80056ee:	4b0d      	ldr	r3, [pc, #52]	; (8005724 <std+0x60>)
 80056f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056f2:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <std+0x64>)
 80056f4:	6323      	str	r3, [r4, #48]	; 0x30
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <std+0x68>)
 80056f8:	6224      	str	r4, [r4, #32]
 80056fa:	429c      	cmp	r4, r3
 80056fc:	d006      	beq.n	800570c <std+0x48>
 80056fe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005702:	4294      	cmp	r4, r2
 8005704:	d002      	beq.n	800570c <std+0x48>
 8005706:	33d0      	adds	r3, #208	; 0xd0
 8005708:	429c      	cmp	r4, r3
 800570a:	d105      	bne.n	8005718 <std+0x54>
 800570c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005714:	f000 b978 	b.w	8005a08 <__retarget_lock_init_recursive>
 8005718:	bd10      	pop	{r4, pc}
 800571a:	bf00      	nop
 800571c:	08005889 	.word	0x08005889
 8005720:	080058ab 	.word	0x080058ab
 8005724:	080058e3 	.word	0x080058e3
 8005728:	08005907 	.word	0x08005907
 800572c:	2000037c 	.word	0x2000037c

08005730 <stdio_exit_handler>:
 8005730:	4a02      	ldr	r2, [pc, #8]	; (800573c <stdio_exit_handler+0xc>)
 8005732:	4903      	ldr	r1, [pc, #12]	; (8005740 <stdio_exit_handler+0x10>)
 8005734:	4803      	ldr	r0, [pc, #12]	; (8005744 <stdio_exit_handler+0x14>)
 8005736:	f000 b869 	b.w	800580c <_fwalk_sglue>
 800573a:	bf00      	nop
 800573c:	2000000c 	.word	0x2000000c
 8005740:	080073b9 	.word	0x080073b9
 8005744:	20000018 	.word	0x20000018

08005748 <cleanup_stdio>:
 8005748:	6841      	ldr	r1, [r0, #4]
 800574a:	4b0c      	ldr	r3, [pc, #48]	; (800577c <cleanup_stdio+0x34>)
 800574c:	4299      	cmp	r1, r3
 800574e:	b510      	push	{r4, lr}
 8005750:	4604      	mov	r4, r0
 8005752:	d001      	beq.n	8005758 <cleanup_stdio+0x10>
 8005754:	f001 fe30 	bl	80073b8 <_fflush_r>
 8005758:	68a1      	ldr	r1, [r4, #8]
 800575a:	4b09      	ldr	r3, [pc, #36]	; (8005780 <cleanup_stdio+0x38>)
 800575c:	4299      	cmp	r1, r3
 800575e:	d002      	beq.n	8005766 <cleanup_stdio+0x1e>
 8005760:	4620      	mov	r0, r4
 8005762:	f001 fe29 	bl	80073b8 <_fflush_r>
 8005766:	68e1      	ldr	r1, [r4, #12]
 8005768:	4b06      	ldr	r3, [pc, #24]	; (8005784 <cleanup_stdio+0x3c>)
 800576a:	4299      	cmp	r1, r3
 800576c:	d004      	beq.n	8005778 <cleanup_stdio+0x30>
 800576e:	4620      	mov	r0, r4
 8005770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005774:	f001 be20 	b.w	80073b8 <_fflush_r>
 8005778:	bd10      	pop	{r4, pc}
 800577a:	bf00      	nop
 800577c:	2000037c 	.word	0x2000037c
 8005780:	200003e4 	.word	0x200003e4
 8005784:	2000044c 	.word	0x2000044c

08005788 <global_stdio_init.part.0>:
 8005788:	b510      	push	{r4, lr}
 800578a:	4b0b      	ldr	r3, [pc, #44]	; (80057b8 <global_stdio_init.part.0+0x30>)
 800578c:	4c0b      	ldr	r4, [pc, #44]	; (80057bc <global_stdio_init.part.0+0x34>)
 800578e:	4a0c      	ldr	r2, [pc, #48]	; (80057c0 <global_stdio_init.part.0+0x38>)
 8005790:	601a      	str	r2, [r3, #0]
 8005792:	4620      	mov	r0, r4
 8005794:	2200      	movs	r2, #0
 8005796:	2104      	movs	r1, #4
 8005798:	f7ff ff94 	bl	80056c4 <std>
 800579c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80057a0:	2201      	movs	r2, #1
 80057a2:	2109      	movs	r1, #9
 80057a4:	f7ff ff8e 	bl	80056c4 <std>
 80057a8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80057ac:	2202      	movs	r2, #2
 80057ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b2:	2112      	movs	r1, #18
 80057b4:	f7ff bf86 	b.w	80056c4 <std>
 80057b8:	200004b4 	.word	0x200004b4
 80057bc:	2000037c 	.word	0x2000037c
 80057c0:	08005731 	.word	0x08005731

080057c4 <__sfp_lock_acquire>:
 80057c4:	4801      	ldr	r0, [pc, #4]	; (80057cc <__sfp_lock_acquire+0x8>)
 80057c6:	f000 b920 	b.w	8005a0a <__retarget_lock_acquire_recursive>
 80057ca:	bf00      	nop
 80057cc:	200004bd 	.word	0x200004bd

080057d0 <__sfp_lock_release>:
 80057d0:	4801      	ldr	r0, [pc, #4]	; (80057d8 <__sfp_lock_release+0x8>)
 80057d2:	f000 b91b 	b.w	8005a0c <__retarget_lock_release_recursive>
 80057d6:	bf00      	nop
 80057d8:	200004bd 	.word	0x200004bd

080057dc <__sinit>:
 80057dc:	b510      	push	{r4, lr}
 80057de:	4604      	mov	r4, r0
 80057e0:	f7ff fff0 	bl	80057c4 <__sfp_lock_acquire>
 80057e4:	6a23      	ldr	r3, [r4, #32]
 80057e6:	b11b      	cbz	r3, 80057f0 <__sinit+0x14>
 80057e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057ec:	f7ff bff0 	b.w	80057d0 <__sfp_lock_release>
 80057f0:	4b04      	ldr	r3, [pc, #16]	; (8005804 <__sinit+0x28>)
 80057f2:	6223      	str	r3, [r4, #32]
 80057f4:	4b04      	ldr	r3, [pc, #16]	; (8005808 <__sinit+0x2c>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d1f5      	bne.n	80057e8 <__sinit+0xc>
 80057fc:	f7ff ffc4 	bl	8005788 <global_stdio_init.part.0>
 8005800:	e7f2      	b.n	80057e8 <__sinit+0xc>
 8005802:	bf00      	nop
 8005804:	08005749 	.word	0x08005749
 8005808:	200004b4 	.word	0x200004b4

0800580c <_fwalk_sglue>:
 800580c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005810:	4607      	mov	r7, r0
 8005812:	4688      	mov	r8, r1
 8005814:	4614      	mov	r4, r2
 8005816:	2600      	movs	r6, #0
 8005818:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800581c:	f1b9 0901 	subs.w	r9, r9, #1
 8005820:	d505      	bpl.n	800582e <_fwalk_sglue+0x22>
 8005822:	6824      	ldr	r4, [r4, #0]
 8005824:	2c00      	cmp	r4, #0
 8005826:	d1f7      	bne.n	8005818 <_fwalk_sglue+0xc>
 8005828:	4630      	mov	r0, r6
 800582a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800582e:	89ab      	ldrh	r3, [r5, #12]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d907      	bls.n	8005844 <_fwalk_sglue+0x38>
 8005834:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005838:	3301      	adds	r3, #1
 800583a:	d003      	beq.n	8005844 <_fwalk_sglue+0x38>
 800583c:	4629      	mov	r1, r5
 800583e:	4638      	mov	r0, r7
 8005840:	47c0      	blx	r8
 8005842:	4306      	orrs	r6, r0
 8005844:	3568      	adds	r5, #104	; 0x68
 8005846:	e7e9      	b.n	800581c <_fwalk_sglue+0x10>

08005848 <siprintf>:
 8005848:	b40e      	push	{r1, r2, r3}
 800584a:	b500      	push	{lr}
 800584c:	b09c      	sub	sp, #112	; 0x70
 800584e:	ab1d      	add	r3, sp, #116	; 0x74
 8005850:	9002      	str	r0, [sp, #8]
 8005852:	9006      	str	r0, [sp, #24]
 8005854:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005858:	4809      	ldr	r0, [pc, #36]	; (8005880 <siprintf+0x38>)
 800585a:	9107      	str	r1, [sp, #28]
 800585c:	9104      	str	r1, [sp, #16]
 800585e:	4909      	ldr	r1, [pc, #36]	; (8005884 <siprintf+0x3c>)
 8005860:	f853 2b04 	ldr.w	r2, [r3], #4
 8005864:	9105      	str	r1, [sp, #20]
 8005866:	6800      	ldr	r0, [r0, #0]
 8005868:	9301      	str	r3, [sp, #4]
 800586a:	a902      	add	r1, sp, #8
 800586c:	f001 fc20 	bl	80070b0 <_svfiprintf_r>
 8005870:	9b02      	ldr	r3, [sp, #8]
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	b01c      	add	sp, #112	; 0x70
 8005878:	f85d eb04 	ldr.w	lr, [sp], #4
 800587c:	b003      	add	sp, #12
 800587e:	4770      	bx	lr
 8005880:	20000064 	.word	0x20000064
 8005884:	ffff0208 	.word	0xffff0208

08005888 <__sread>:
 8005888:	b510      	push	{r4, lr}
 800588a:	460c      	mov	r4, r1
 800588c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005890:	f000 f86c 	bl	800596c <_read_r>
 8005894:	2800      	cmp	r0, #0
 8005896:	bfab      	itete	ge
 8005898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800589a:	89a3      	ldrhlt	r3, [r4, #12]
 800589c:	181b      	addge	r3, r3, r0
 800589e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058a2:	bfac      	ite	ge
 80058a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80058a6:	81a3      	strhlt	r3, [r4, #12]
 80058a8:	bd10      	pop	{r4, pc}

080058aa <__swrite>:
 80058aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ae:	461f      	mov	r7, r3
 80058b0:	898b      	ldrh	r3, [r1, #12]
 80058b2:	05db      	lsls	r3, r3, #23
 80058b4:	4605      	mov	r5, r0
 80058b6:	460c      	mov	r4, r1
 80058b8:	4616      	mov	r6, r2
 80058ba:	d505      	bpl.n	80058c8 <__swrite+0x1e>
 80058bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c0:	2302      	movs	r3, #2
 80058c2:	2200      	movs	r2, #0
 80058c4:	f000 f840 	bl	8005948 <_lseek_r>
 80058c8:	89a3      	ldrh	r3, [r4, #12]
 80058ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d2:	81a3      	strh	r3, [r4, #12]
 80058d4:	4632      	mov	r2, r6
 80058d6:	463b      	mov	r3, r7
 80058d8:	4628      	mov	r0, r5
 80058da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80058de:	f000 b857 	b.w	8005990 <_write_r>

080058e2 <__sseek>:
 80058e2:	b510      	push	{r4, lr}
 80058e4:	460c      	mov	r4, r1
 80058e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058ea:	f000 f82d 	bl	8005948 <_lseek_r>
 80058ee:	1c43      	adds	r3, r0, #1
 80058f0:	89a3      	ldrh	r3, [r4, #12]
 80058f2:	bf15      	itete	ne
 80058f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80058f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80058fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80058fe:	81a3      	strheq	r3, [r4, #12]
 8005900:	bf18      	it	ne
 8005902:	81a3      	strhne	r3, [r4, #12]
 8005904:	bd10      	pop	{r4, pc}

08005906 <__sclose>:
 8005906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800590a:	f000 b80d 	b.w	8005928 <_close_r>

0800590e <memset>:
 800590e:	4402      	add	r2, r0
 8005910:	4603      	mov	r3, r0
 8005912:	4293      	cmp	r3, r2
 8005914:	d100      	bne.n	8005918 <memset+0xa>
 8005916:	4770      	bx	lr
 8005918:	f803 1b01 	strb.w	r1, [r3], #1
 800591c:	e7f9      	b.n	8005912 <memset+0x4>
	...

08005920 <_localeconv_r>:
 8005920:	4800      	ldr	r0, [pc, #0]	; (8005924 <_localeconv_r+0x4>)
 8005922:	4770      	bx	lr
 8005924:	20000158 	.word	0x20000158

08005928 <_close_r>:
 8005928:	b538      	push	{r3, r4, r5, lr}
 800592a:	4d06      	ldr	r5, [pc, #24]	; (8005944 <_close_r+0x1c>)
 800592c:	2300      	movs	r3, #0
 800592e:	4604      	mov	r4, r0
 8005930:	4608      	mov	r0, r1
 8005932:	602b      	str	r3, [r5, #0]
 8005934:	f7fc fb27 	bl	8001f86 <_close>
 8005938:	1c43      	adds	r3, r0, #1
 800593a:	d102      	bne.n	8005942 <_close_r+0x1a>
 800593c:	682b      	ldr	r3, [r5, #0]
 800593e:	b103      	cbz	r3, 8005942 <_close_r+0x1a>
 8005940:	6023      	str	r3, [r4, #0]
 8005942:	bd38      	pop	{r3, r4, r5, pc}
 8005944:	200004b8 	.word	0x200004b8

08005948 <_lseek_r>:
 8005948:	b538      	push	{r3, r4, r5, lr}
 800594a:	4d07      	ldr	r5, [pc, #28]	; (8005968 <_lseek_r+0x20>)
 800594c:	4604      	mov	r4, r0
 800594e:	4608      	mov	r0, r1
 8005950:	4611      	mov	r1, r2
 8005952:	2200      	movs	r2, #0
 8005954:	602a      	str	r2, [r5, #0]
 8005956:	461a      	mov	r2, r3
 8005958:	f7fc fb3c 	bl	8001fd4 <_lseek>
 800595c:	1c43      	adds	r3, r0, #1
 800595e:	d102      	bne.n	8005966 <_lseek_r+0x1e>
 8005960:	682b      	ldr	r3, [r5, #0]
 8005962:	b103      	cbz	r3, 8005966 <_lseek_r+0x1e>
 8005964:	6023      	str	r3, [r4, #0]
 8005966:	bd38      	pop	{r3, r4, r5, pc}
 8005968:	200004b8 	.word	0x200004b8

0800596c <_read_r>:
 800596c:	b538      	push	{r3, r4, r5, lr}
 800596e:	4d07      	ldr	r5, [pc, #28]	; (800598c <_read_r+0x20>)
 8005970:	4604      	mov	r4, r0
 8005972:	4608      	mov	r0, r1
 8005974:	4611      	mov	r1, r2
 8005976:	2200      	movs	r2, #0
 8005978:	602a      	str	r2, [r5, #0]
 800597a:	461a      	mov	r2, r3
 800597c:	f7fc faca 	bl	8001f14 <_read>
 8005980:	1c43      	adds	r3, r0, #1
 8005982:	d102      	bne.n	800598a <_read_r+0x1e>
 8005984:	682b      	ldr	r3, [r5, #0]
 8005986:	b103      	cbz	r3, 800598a <_read_r+0x1e>
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	bd38      	pop	{r3, r4, r5, pc}
 800598c:	200004b8 	.word	0x200004b8

08005990 <_write_r>:
 8005990:	b538      	push	{r3, r4, r5, lr}
 8005992:	4d07      	ldr	r5, [pc, #28]	; (80059b0 <_write_r+0x20>)
 8005994:	4604      	mov	r4, r0
 8005996:	4608      	mov	r0, r1
 8005998:	4611      	mov	r1, r2
 800599a:	2200      	movs	r2, #0
 800599c:	602a      	str	r2, [r5, #0]
 800599e:	461a      	mov	r2, r3
 80059a0:	f7fc fad5 	bl	8001f4e <_write>
 80059a4:	1c43      	adds	r3, r0, #1
 80059a6:	d102      	bne.n	80059ae <_write_r+0x1e>
 80059a8:	682b      	ldr	r3, [r5, #0]
 80059aa:	b103      	cbz	r3, 80059ae <_write_r+0x1e>
 80059ac:	6023      	str	r3, [r4, #0]
 80059ae:	bd38      	pop	{r3, r4, r5, pc}
 80059b0:	200004b8 	.word	0x200004b8

080059b4 <__errno>:
 80059b4:	4b01      	ldr	r3, [pc, #4]	; (80059bc <__errno+0x8>)
 80059b6:	6818      	ldr	r0, [r3, #0]
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20000064 	.word	0x20000064

080059c0 <__libc_init_array>:
 80059c0:	b570      	push	{r4, r5, r6, lr}
 80059c2:	4d0d      	ldr	r5, [pc, #52]	; (80059f8 <__libc_init_array+0x38>)
 80059c4:	4c0d      	ldr	r4, [pc, #52]	; (80059fc <__libc_init_array+0x3c>)
 80059c6:	1b64      	subs	r4, r4, r5
 80059c8:	10a4      	asrs	r4, r4, #2
 80059ca:	2600      	movs	r6, #0
 80059cc:	42a6      	cmp	r6, r4
 80059ce:	d109      	bne.n	80059e4 <__libc_init_array+0x24>
 80059d0:	4d0b      	ldr	r5, [pc, #44]	; (8005a00 <__libc_init_array+0x40>)
 80059d2:	4c0c      	ldr	r4, [pc, #48]	; (8005a04 <__libc_init_array+0x44>)
 80059d4:	f002 f894 	bl	8007b00 <_init>
 80059d8:	1b64      	subs	r4, r4, r5
 80059da:	10a4      	asrs	r4, r4, #2
 80059dc:	2600      	movs	r6, #0
 80059de:	42a6      	cmp	r6, r4
 80059e0:	d105      	bne.n	80059ee <__libc_init_array+0x2e>
 80059e2:	bd70      	pop	{r4, r5, r6, pc}
 80059e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e8:	4798      	blx	r3
 80059ea:	3601      	adds	r6, #1
 80059ec:	e7ee      	b.n	80059cc <__libc_init_array+0xc>
 80059ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f2:	4798      	blx	r3
 80059f4:	3601      	adds	r6, #1
 80059f6:	e7f2      	b.n	80059de <__libc_init_array+0x1e>
 80059f8:	080080fc 	.word	0x080080fc
 80059fc:	080080fc 	.word	0x080080fc
 8005a00:	080080fc 	.word	0x080080fc
 8005a04:	08008100 	.word	0x08008100

08005a08 <__retarget_lock_init_recursive>:
 8005a08:	4770      	bx	lr

08005a0a <__retarget_lock_acquire_recursive>:
 8005a0a:	4770      	bx	lr

08005a0c <__retarget_lock_release_recursive>:
 8005a0c:	4770      	bx	lr

08005a0e <quorem>:
 8005a0e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a12:	6903      	ldr	r3, [r0, #16]
 8005a14:	690c      	ldr	r4, [r1, #16]
 8005a16:	42a3      	cmp	r3, r4
 8005a18:	4607      	mov	r7, r0
 8005a1a:	db7e      	blt.n	8005b1a <quorem+0x10c>
 8005a1c:	3c01      	subs	r4, #1
 8005a1e:	f101 0814 	add.w	r8, r1, #20
 8005a22:	f100 0514 	add.w	r5, r0, #20
 8005a26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a2a:	9301      	str	r3, [sp, #4]
 8005a2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a34:	3301      	adds	r3, #1
 8005a36:	429a      	cmp	r2, r3
 8005a38:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a3c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a40:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a44:	d331      	bcc.n	8005aaa <quorem+0x9c>
 8005a46:	f04f 0e00 	mov.w	lr, #0
 8005a4a:	4640      	mov	r0, r8
 8005a4c:	46ac      	mov	ip, r5
 8005a4e:	46f2      	mov	sl, lr
 8005a50:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a54:	b293      	uxth	r3, r2
 8005a56:	fb06 e303 	mla	r3, r6, r3, lr
 8005a5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a5e:	0c1a      	lsrs	r2, r3, #16
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	ebaa 0303 	sub.w	r3, sl, r3
 8005a66:	f8dc a000 	ldr.w	sl, [ip]
 8005a6a:	fa13 f38a 	uxtah	r3, r3, sl
 8005a6e:	fb06 220e 	mla	r2, r6, lr, r2
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	9b00      	ldr	r3, [sp, #0]
 8005a76:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a7a:	b292      	uxth	r2, r2
 8005a7c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005a80:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005a84:	f8bd 3000 	ldrh.w	r3, [sp]
 8005a88:	4581      	cmp	r9, r0
 8005a8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005a8e:	f84c 3b04 	str.w	r3, [ip], #4
 8005a92:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005a96:	d2db      	bcs.n	8005a50 <quorem+0x42>
 8005a98:	f855 300b 	ldr.w	r3, [r5, fp]
 8005a9c:	b92b      	cbnz	r3, 8005aaa <quorem+0x9c>
 8005a9e:	9b01      	ldr	r3, [sp, #4]
 8005aa0:	3b04      	subs	r3, #4
 8005aa2:	429d      	cmp	r5, r3
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	d32c      	bcc.n	8005b02 <quorem+0xf4>
 8005aa8:	613c      	str	r4, [r7, #16]
 8005aaa:	4638      	mov	r0, r7
 8005aac:	f001 f9a6 	bl	8006dfc <__mcmp>
 8005ab0:	2800      	cmp	r0, #0
 8005ab2:	db22      	blt.n	8005afa <quorem+0xec>
 8005ab4:	3601      	adds	r6, #1
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	2000      	movs	r0, #0
 8005aba:	f858 2b04 	ldr.w	r2, [r8], #4
 8005abe:	f8d1 c000 	ldr.w	ip, [r1]
 8005ac2:	b293      	uxth	r3, r2
 8005ac4:	1ac3      	subs	r3, r0, r3
 8005ac6:	0c12      	lsrs	r2, r2, #16
 8005ac8:	fa13 f38c 	uxtah	r3, r3, ip
 8005acc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005ad0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ada:	45c1      	cmp	r9, r8
 8005adc:	f841 3b04 	str.w	r3, [r1], #4
 8005ae0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005ae4:	d2e9      	bcs.n	8005aba <quorem+0xac>
 8005ae6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005aea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005aee:	b922      	cbnz	r2, 8005afa <quorem+0xec>
 8005af0:	3b04      	subs	r3, #4
 8005af2:	429d      	cmp	r5, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	d30a      	bcc.n	8005b0e <quorem+0x100>
 8005af8:	613c      	str	r4, [r7, #16]
 8005afa:	4630      	mov	r0, r6
 8005afc:	b003      	add	sp, #12
 8005afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b02:	6812      	ldr	r2, [r2, #0]
 8005b04:	3b04      	subs	r3, #4
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	d1ce      	bne.n	8005aa8 <quorem+0x9a>
 8005b0a:	3c01      	subs	r4, #1
 8005b0c:	e7c9      	b.n	8005aa2 <quorem+0x94>
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	3b04      	subs	r3, #4
 8005b12:	2a00      	cmp	r2, #0
 8005b14:	d1f0      	bne.n	8005af8 <quorem+0xea>
 8005b16:	3c01      	subs	r4, #1
 8005b18:	e7eb      	b.n	8005af2 <quorem+0xe4>
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	e7ee      	b.n	8005afc <quorem+0xee>
	...

08005b20 <_dtoa_r>:
 8005b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b24:	ed2d 8b04 	vpush	{d8-d9}
 8005b28:	69c5      	ldr	r5, [r0, #28]
 8005b2a:	b093      	sub	sp, #76	; 0x4c
 8005b2c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005b30:	ec57 6b10 	vmov	r6, r7, d0
 8005b34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b38:	9107      	str	r1, [sp, #28]
 8005b3a:	4604      	mov	r4, r0
 8005b3c:	920a      	str	r2, [sp, #40]	; 0x28
 8005b3e:	930d      	str	r3, [sp, #52]	; 0x34
 8005b40:	b975      	cbnz	r5, 8005b60 <_dtoa_r+0x40>
 8005b42:	2010      	movs	r0, #16
 8005b44:	f000 fe2a 	bl	800679c <malloc>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	61e0      	str	r0, [r4, #28]
 8005b4c:	b920      	cbnz	r0, 8005b58 <_dtoa_r+0x38>
 8005b4e:	4bae      	ldr	r3, [pc, #696]	; (8005e08 <_dtoa_r+0x2e8>)
 8005b50:	21ef      	movs	r1, #239	; 0xef
 8005b52:	48ae      	ldr	r0, [pc, #696]	; (8005e0c <_dtoa_r+0x2ec>)
 8005b54:	f001 fc90 	bl	8007478 <__assert_func>
 8005b58:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b5c:	6005      	str	r5, [r0, #0]
 8005b5e:	60c5      	str	r5, [r0, #12]
 8005b60:	69e3      	ldr	r3, [r4, #28]
 8005b62:	6819      	ldr	r1, [r3, #0]
 8005b64:	b151      	cbz	r1, 8005b7c <_dtoa_r+0x5c>
 8005b66:	685a      	ldr	r2, [r3, #4]
 8005b68:	604a      	str	r2, [r1, #4]
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	4093      	lsls	r3, r2
 8005b6e:	608b      	str	r3, [r1, #8]
 8005b70:	4620      	mov	r0, r4
 8005b72:	f000 ff07 	bl	8006984 <_Bfree>
 8005b76:	69e3      	ldr	r3, [r4, #28]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	1e3b      	subs	r3, r7, #0
 8005b7e:	bfbb      	ittet	lt
 8005b80:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005b84:	9303      	strlt	r3, [sp, #12]
 8005b86:	2300      	movge	r3, #0
 8005b88:	2201      	movlt	r2, #1
 8005b8a:	bfac      	ite	ge
 8005b8c:	f8c8 3000 	strge.w	r3, [r8]
 8005b90:	f8c8 2000 	strlt.w	r2, [r8]
 8005b94:	4b9e      	ldr	r3, [pc, #632]	; (8005e10 <_dtoa_r+0x2f0>)
 8005b96:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005b9a:	ea33 0308 	bics.w	r3, r3, r8
 8005b9e:	d11b      	bne.n	8005bd8 <_dtoa_r+0xb8>
 8005ba0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ba2:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ba6:	6013      	str	r3, [r2, #0]
 8005ba8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005bac:	4333      	orrs	r3, r6
 8005bae:	f000 8593 	beq.w	80066d8 <_dtoa_r+0xbb8>
 8005bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bb4:	b963      	cbnz	r3, 8005bd0 <_dtoa_r+0xb0>
 8005bb6:	4b97      	ldr	r3, [pc, #604]	; (8005e14 <_dtoa_r+0x2f4>)
 8005bb8:	e027      	b.n	8005c0a <_dtoa_r+0xea>
 8005bba:	4b97      	ldr	r3, [pc, #604]	; (8005e18 <_dtoa_r+0x2f8>)
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005bc2:	6013      	str	r3, [r2, #0]
 8005bc4:	9800      	ldr	r0, [sp, #0]
 8005bc6:	b013      	add	sp, #76	; 0x4c
 8005bc8:	ecbd 8b04 	vpop	{d8-d9}
 8005bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd0:	4b90      	ldr	r3, [pc, #576]	; (8005e14 <_dtoa_r+0x2f4>)
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	3303      	adds	r3, #3
 8005bd6:	e7f3      	b.n	8005bc0 <_dtoa_r+0xa0>
 8005bd8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	ec51 0b17 	vmov	r0, r1, d7
 8005be2:	eeb0 8a47 	vmov.f32	s16, s14
 8005be6:	eef0 8a67 	vmov.f32	s17, s15
 8005bea:	2300      	movs	r3, #0
 8005bec:	f7fa ff74 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bf0:	4681      	mov	r9, r0
 8005bf2:	b160      	cbz	r0, 8005c0e <_dtoa_r+0xee>
 8005bf4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	f000 8568 	beq.w	80066d2 <_dtoa_r+0xbb2>
 8005c02:	4b86      	ldr	r3, [pc, #536]	; (8005e1c <_dtoa_r+0x2fc>)
 8005c04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005c06:	6013      	str	r3, [r2, #0]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	e7da      	b.n	8005bc4 <_dtoa_r+0xa4>
 8005c0e:	aa10      	add	r2, sp, #64	; 0x40
 8005c10:	a911      	add	r1, sp, #68	; 0x44
 8005c12:	4620      	mov	r0, r4
 8005c14:	eeb0 0a48 	vmov.f32	s0, s16
 8005c18:	eef0 0a68 	vmov.f32	s1, s17
 8005c1c:	f001 f994 	bl	8006f48 <__d2b>
 8005c20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005c24:	4682      	mov	sl, r0
 8005c26:	2d00      	cmp	r5, #0
 8005c28:	d07f      	beq.n	8005d2a <_dtoa_r+0x20a>
 8005c2a:	ee18 3a90 	vmov	r3, s17
 8005c2e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c32:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005c36:	ec51 0b18 	vmov	r0, r1, d8
 8005c3a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005c3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c42:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005c46:	4619      	mov	r1, r3
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4b75      	ldr	r3, [pc, #468]	; (8005e20 <_dtoa_r+0x300>)
 8005c4c:	f7fa fb24 	bl	8000298 <__aeabi_dsub>
 8005c50:	a367      	add	r3, pc, #412	; (adr r3, 8005df0 <_dtoa_r+0x2d0>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	f7fa fcd7 	bl	8000608 <__aeabi_dmul>
 8005c5a:	a367      	add	r3, pc, #412	; (adr r3, 8005df8 <_dtoa_r+0x2d8>)
 8005c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c60:	f7fa fb1c 	bl	800029c <__adddf3>
 8005c64:	4606      	mov	r6, r0
 8005c66:	4628      	mov	r0, r5
 8005c68:	460f      	mov	r7, r1
 8005c6a:	f7fa fc63 	bl	8000534 <__aeabi_i2d>
 8005c6e:	a364      	add	r3, pc, #400	; (adr r3, 8005e00 <_dtoa_r+0x2e0>)
 8005c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c74:	f7fa fcc8 	bl	8000608 <__aeabi_dmul>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	4639      	mov	r1, r7
 8005c80:	f7fa fb0c 	bl	800029c <__adddf3>
 8005c84:	4606      	mov	r6, r0
 8005c86:	460f      	mov	r7, r1
 8005c88:	f7fa ff6e 	bl	8000b68 <__aeabi_d2iz>
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	4683      	mov	fp, r0
 8005c90:	2300      	movs	r3, #0
 8005c92:	4630      	mov	r0, r6
 8005c94:	4639      	mov	r1, r7
 8005c96:	f7fa ff29 	bl	8000aec <__aeabi_dcmplt>
 8005c9a:	b148      	cbz	r0, 8005cb0 <_dtoa_r+0x190>
 8005c9c:	4658      	mov	r0, fp
 8005c9e:	f7fa fc49 	bl	8000534 <__aeabi_i2d>
 8005ca2:	4632      	mov	r2, r6
 8005ca4:	463b      	mov	r3, r7
 8005ca6:	f7fa ff17 	bl	8000ad8 <__aeabi_dcmpeq>
 8005caa:	b908      	cbnz	r0, 8005cb0 <_dtoa_r+0x190>
 8005cac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cb0:	f1bb 0f16 	cmp.w	fp, #22
 8005cb4:	d857      	bhi.n	8005d66 <_dtoa_r+0x246>
 8005cb6:	4b5b      	ldr	r3, [pc, #364]	; (8005e24 <_dtoa_r+0x304>)
 8005cb8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	ec51 0b18 	vmov	r0, r1, d8
 8005cc4:	f7fa ff12 	bl	8000aec <__aeabi_dcmplt>
 8005cc8:	2800      	cmp	r0, #0
 8005cca:	d04e      	beq.n	8005d6a <_dtoa_r+0x24a>
 8005ccc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	930c      	str	r3, [sp, #48]	; 0x30
 8005cd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cd6:	1b5b      	subs	r3, r3, r5
 8005cd8:	1e5a      	subs	r2, r3, #1
 8005cda:	bf45      	ittet	mi
 8005cdc:	f1c3 0301 	rsbmi	r3, r3, #1
 8005ce0:	9305      	strmi	r3, [sp, #20]
 8005ce2:	2300      	movpl	r3, #0
 8005ce4:	2300      	movmi	r3, #0
 8005ce6:	9206      	str	r2, [sp, #24]
 8005ce8:	bf54      	ite	pl
 8005cea:	9305      	strpl	r3, [sp, #20]
 8005cec:	9306      	strmi	r3, [sp, #24]
 8005cee:	f1bb 0f00 	cmp.w	fp, #0
 8005cf2:	db3c      	blt.n	8005d6e <_dtoa_r+0x24e>
 8005cf4:	9b06      	ldr	r3, [sp, #24]
 8005cf6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005cfa:	445b      	add	r3, fp
 8005cfc:	9306      	str	r3, [sp, #24]
 8005cfe:	2300      	movs	r3, #0
 8005d00:	9308      	str	r3, [sp, #32]
 8005d02:	9b07      	ldr	r3, [sp, #28]
 8005d04:	2b09      	cmp	r3, #9
 8005d06:	d868      	bhi.n	8005dda <_dtoa_r+0x2ba>
 8005d08:	2b05      	cmp	r3, #5
 8005d0a:	bfc4      	itt	gt
 8005d0c:	3b04      	subgt	r3, #4
 8005d0e:	9307      	strgt	r3, [sp, #28]
 8005d10:	9b07      	ldr	r3, [sp, #28]
 8005d12:	f1a3 0302 	sub.w	r3, r3, #2
 8005d16:	bfcc      	ite	gt
 8005d18:	2500      	movgt	r5, #0
 8005d1a:	2501      	movle	r5, #1
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	f200 8085 	bhi.w	8005e2c <_dtoa_r+0x30c>
 8005d22:	e8df f003 	tbb	[pc, r3]
 8005d26:	3b2e      	.short	0x3b2e
 8005d28:	5839      	.short	0x5839
 8005d2a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d2e:	441d      	add	r5, r3
 8005d30:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d34:	2b20      	cmp	r3, #32
 8005d36:	bfc1      	itttt	gt
 8005d38:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005d40:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005d44:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005d48:	bfd6      	itet	le
 8005d4a:	f1c3 0320 	rsble	r3, r3, #32
 8005d4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005d52:	fa06 f003 	lslle.w	r0, r6, r3
 8005d56:	f7fa fbdd 	bl	8000514 <__aeabi_ui2d>
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005d60:	3d01      	subs	r5, #1
 8005d62:	920e      	str	r2, [sp, #56]	; 0x38
 8005d64:	e76f      	b.n	8005c46 <_dtoa_r+0x126>
 8005d66:	2301      	movs	r3, #1
 8005d68:	e7b3      	b.n	8005cd2 <_dtoa_r+0x1b2>
 8005d6a:	900c      	str	r0, [sp, #48]	; 0x30
 8005d6c:	e7b2      	b.n	8005cd4 <_dtoa_r+0x1b4>
 8005d6e:	9b05      	ldr	r3, [sp, #20]
 8005d70:	eba3 030b 	sub.w	r3, r3, fp
 8005d74:	9305      	str	r3, [sp, #20]
 8005d76:	f1cb 0300 	rsb	r3, fp, #0
 8005d7a:	9308      	str	r3, [sp, #32]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005d80:	e7bf      	b.n	8005d02 <_dtoa_r+0x1e2>
 8005d82:	2300      	movs	r3, #0
 8005d84:	9309      	str	r3, [sp, #36]	; 0x24
 8005d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	dc52      	bgt.n	8005e32 <_dtoa_r+0x312>
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	9301      	str	r3, [sp, #4]
 8005d90:	9304      	str	r3, [sp, #16]
 8005d92:	461a      	mov	r2, r3
 8005d94:	920a      	str	r2, [sp, #40]	; 0x28
 8005d96:	e00b      	b.n	8005db0 <_dtoa_r+0x290>
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e7f3      	b.n	8005d84 <_dtoa_r+0x264>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8005da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005da2:	445b      	add	r3, fp
 8005da4:	9301      	str	r3, [sp, #4]
 8005da6:	3301      	adds	r3, #1
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	9304      	str	r3, [sp, #16]
 8005dac:	bfb8      	it	lt
 8005dae:	2301      	movlt	r3, #1
 8005db0:	69e0      	ldr	r0, [r4, #28]
 8005db2:	2100      	movs	r1, #0
 8005db4:	2204      	movs	r2, #4
 8005db6:	f102 0614 	add.w	r6, r2, #20
 8005dba:	429e      	cmp	r6, r3
 8005dbc:	d93d      	bls.n	8005e3a <_dtoa_r+0x31a>
 8005dbe:	6041      	str	r1, [r0, #4]
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 fd9f 	bl	8006904 <_Balloc>
 8005dc6:	9000      	str	r0, [sp, #0]
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d139      	bne.n	8005e40 <_dtoa_r+0x320>
 8005dcc:	4b16      	ldr	r3, [pc, #88]	; (8005e28 <_dtoa_r+0x308>)
 8005dce:	4602      	mov	r2, r0
 8005dd0:	f240 11af 	movw	r1, #431	; 0x1af
 8005dd4:	e6bd      	b.n	8005b52 <_dtoa_r+0x32>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e7e1      	b.n	8005d9e <_dtoa_r+0x27e>
 8005dda:	2501      	movs	r5, #1
 8005ddc:	2300      	movs	r3, #0
 8005dde:	9307      	str	r3, [sp, #28]
 8005de0:	9509      	str	r5, [sp, #36]	; 0x24
 8005de2:	f04f 33ff 	mov.w	r3, #4294967295
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	9304      	str	r3, [sp, #16]
 8005dea:	2200      	movs	r2, #0
 8005dec:	2312      	movs	r3, #18
 8005dee:	e7d1      	b.n	8005d94 <_dtoa_r+0x274>
 8005df0:	636f4361 	.word	0x636f4361
 8005df4:	3fd287a7 	.word	0x3fd287a7
 8005df8:	8b60c8b3 	.word	0x8b60c8b3
 8005dfc:	3fc68a28 	.word	0x3fc68a28
 8005e00:	509f79fb 	.word	0x509f79fb
 8005e04:	3fd34413 	.word	0x3fd34413
 8005e08:	08007dc1 	.word	0x08007dc1
 8005e0c:	08007dd8 	.word	0x08007dd8
 8005e10:	7ff00000 	.word	0x7ff00000
 8005e14:	08007dbd 	.word	0x08007dbd
 8005e18:	08007db4 	.word	0x08007db4
 8005e1c:	08007d91 	.word	0x08007d91
 8005e20:	3ff80000 	.word	0x3ff80000
 8005e24:	08007ec8 	.word	0x08007ec8
 8005e28:	08007e30 	.word	0x08007e30
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e30:	e7d7      	b.n	8005de2 <_dtoa_r+0x2c2>
 8005e32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	9304      	str	r3, [sp, #16]
 8005e38:	e7ba      	b.n	8005db0 <_dtoa_r+0x290>
 8005e3a:	3101      	adds	r1, #1
 8005e3c:	0052      	lsls	r2, r2, #1
 8005e3e:	e7ba      	b.n	8005db6 <_dtoa_r+0x296>
 8005e40:	69e3      	ldr	r3, [r4, #28]
 8005e42:	9a00      	ldr	r2, [sp, #0]
 8005e44:	601a      	str	r2, [r3, #0]
 8005e46:	9b04      	ldr	r3, [sp, #16]
 8005e48:	2b0e      	cmp	r3, #14
 8005e4a:	f200 80a8 	bhi.w	8005f9e <_dtoa_r+0x47e>
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	f000 80a5 	beq.w	8005f9e <_dtoa_r+0x47e>
 8005e54:	f1bb 0f00 	cmp.w	fp, #0
 8005e58:	dd38      	ble.n	8005ecc <_dtoa_r+0x3ac>
 8005e5a:	4bc0      	ldr	r3, [pc, #768]	; (800615c <_dtoa_r+0x63c>)
 8005e5c:	f00b 020f 	and.w	r2, fp, #15
 8005e60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e64:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005e68:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005e6c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005e70:	d019      	beq.n	8005ea6 <_dtoa_r+0x386>
 8005e72:	4bbb      	ldr	r3, [pc, #748]	; (8006160 <_dtoa_r+0x640>)
 8005e74:	ec51 0b18 	vmov	r0, r1, d8
 8005e78:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005e7c:	f7fa fcee 	bl	800085c <__aeabi_ddiv>
 8005e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e84:	f008 080f 	and.w	r8, r8, #15
 8005e88:	2503      	movs	r5, #3
 8005e8a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006160 <_dtoa_r+0x640>
 8005e8e:	f1b8 0f00 	cmp.w	r8, #0
 8005e92:	d10a      	bne.n	8005eaa <_dtoa_r+0x38a>
 8005e94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e98:	4632      	mov	r2, r6
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	f7fa fcde 	bl	800085c <__aeabi_ddiv>
 8005ea0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ea4:	e02b      	b.n	8005efe <_dtoa_r+0x3de>
 8005ea6:	2502      	movs	r5, #2
 8005ea8:	e7ef      	b.n	8005e8a <_dtoa_r+0x36a>
 8005eaa:	f018 0f01 	tst.w	r8, #1
 8005eae:	d008      	beq.n	8005ec2 <_dtoa_r+0x3a2>
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	4639      	mov	r1, r7
 8005eb4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005eb8:	f7fa fba6 	bl	8000608 <__aeabi_dmul>
 8005ebc:	3501      	adds	r5, #1
 8005ebe:	4606      	mov	r6, r0
 8005ec0:	460f      	mov	r7, r1
 8005ec2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ec6:	f109 0908 	add.w	r9, r9, #8
 8005eca:	e7e0      	b.n	8005e8e <_dtoa_r+0x36e>
 8005ecc:	f000 809f 	beq.w	800600e <_dtoa_r+0x4ee>
 8005ed0:	f1cb 0600 	rsb	r6, fp, #0
 8005ed4:	4ba1      	ldr	r3, [pc, #644]	; (800615c <_dtoa_r+0x63c>)
 8005ed6:	4fa2      	ldr	r7, [pc, #648]	; (8006160 <_dtoa_r+0x640>)
 8005ed8:	f006 020f 	and.w	r2, r6, #15
 8005edc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	ec51 0b18 	vmov	r0, r1, d8
 8005ee8:	f7fa fb8e 	bl	8000608 <__aeabi_dmul>
 8005eec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ef0:	1136      	asrs	r6, r6, #4
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	2502      	movs	r5, #2
 8005ef6:	2e00      	cmp	r6, #0
 8005ef8:	d17e      	bne.n	8005ff8 <_dtoa_r+0x4d8>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1d0      	bne.n	8005ea0 <_dtoa_r+0x380>
 8005efe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f00:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 8084 	beq.w	8006012 <_dtoa_r+0x4f2>
 8005f0a:	4b96      	ldr	r3, [pc, #600]	; (8006164 <_dtoa_r+0x644>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	4640      	mov	r0, r8
 8005f10:	4649      	mov	r1, r9
 8005f12:	f7fa fdeb 	bl	8000aec <__aeabi_dcmplt>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	d07b      	beq.n	8006012 <_dtoa_r+0x4f2>
 8005f1a:	9b04      	ldr	r3, [sp, #16]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d078      	beq.n	8006012 <_dtoa_r+0x4f2>
 8005f20:	9b01      	ldr	r3, [sp, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	dd39      	ble.n	8005f9a <_dtoa_r+0x47a>
 8005f26:	4b90      	ldr	r3, [pc, #576]	; (8006168 <_dtoa_r+0x648>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	4649      	mov	r1, r9
 8005f2e:	f7fa fb6b 	bl	8000608 <__aeabi_dmul>
 8005f32:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f36:	9e01      	ldr	r6, [sp, #4]
 8005f38:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005f3c:	3501      	adds	r5, #1
 8005f3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005f42:	4628      	mov	r0, r5
 8005f44:	f7fa faf6 	bl	8000534 <__aeabi_i2d>
 8005f48:	4642      	mov	r2, r8
 8005f4a:	464b      	mov	r3, r9
 8005f4c:	f7fa fb5c 	bl	8000608 <__aeabi_dmul>
 8005f50:	4b86      	ldr	r3, [pc, #536]	; (800616c <_dtoa_r+0x64c>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	f7fa f9a2 	bl	800029c <__adddf3>
 8005f58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005f5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f60:	9303      	str	r3, [sp, #12]
 8005f62:	2e00      	cmp	r6, #0
 8005f64:	d158      	bne.n	8006018 <_dtoa_r+0x4f8>
 8005f66:	4b82      	ldr	r3, [pc, #520]	; (8006170 <_dtoa_r+0x650>)
 8005f68:	2200      	movs	r2, #0
 8005f6a:	4640      	mov	r0, r8
 8005f6c:	4649      	mov	r1, r9
 8005f6e:	f7fa f993 	bl	8000298 <__aeabi_dsub>
 8005f72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f76:	4680      	mov	r8, r0
 8005f78:	4689      	mov	r9, r1
 8005f7a:	f7fa fdd5 	bl	8000b28 <__aeabi_dcmpgt>
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	f040 8296 	bne.w	80064b0 <_dtoa_r+0x990>
 8005f84:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005f88:	4640      	mov	r0, r8
 8005f8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005f8e:	4649      	mov	r1, r9
 8005f90:	f7fa fdac 	bl	8000aec <__aeabi_dcmplt>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	f040 8289 	bne.w	80064ac <_dtoa_r+0x98c>
 8005f9a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005f9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f2c0 814e 	blt.w	8006242 <_dtoa_r+0x722>
 8005fa6:	f1bb 0f0e 	cmp.w	fp, #14
 8005faa:	f300 814a 	bgt.w	8006242 <_dtoa_r+0x722>
 8005fae:	4b6b      	ldr	r3, [pc, #428]	; (800615c <_dtoa_r+0x63c>)
 8005fb0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005fb4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f280 80dc 	bge.w	8006178 <_dtoa_r+0x658>
 8005fc0:	9b04      	ldr	r3, [sp, #16]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f300 80d8 	bgt.w	8006178 <_dtoa_r+0x658>
 8005fc8:	f040 826f 	bne.w	80064aa <_dtoa_r+0x98a>
 8005fcc:	4b68      	ldr	r3, [pc, #416]	; (8006170 <_dtoa_r+0x650>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	f7fa fb18 	bl	8000608 <__aeabi_dmul>
 8005fd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005fdc:	f7fa fd9a 	bl	8000b14 <__aeabi_dcmpge>
 8005fe0:	9e04      	ldr	r6, [sp, #16]
 8005fe2:	4637      	mov	r7, r6
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	f040 8245 	bne.w	8006474 <_dtoa_r+0x954>
 8005fea:	9d00      	ldr	r5, [sp, #0]
 8005fec:	2331      	movs	r3, #49	; 0x31
 8005fee:	f805 3b01 	strb.w	r3, [r5], #1
 8005ff2:	f10b 0b01 	add.w	fp, fp, #1
 8005ff6:	e241      	b.n	800647c <_dtoa_r+0x95c>
 8005ff8:	07f2      	lsls	r2, r6, #31
 8005ffa:	d505      	bpl.n	8006008 <_dtoa_r+0x4e8>
 8005ffc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006000:	f7fa fb02 	bl	8000608 <__aeabi_dmul>
 8006004:	3501      	adds	r5, #1
 8006006:	2301      	movs	r3, #1
 8006008:	1076      	asrs	r6, r6, #1
 800600a:	3708      	adds	r7, #8
 800600c:	e773      	b.n	8005ef6 <_dtoa_r+0x3d6>
 800600e:	2502      	movs	r5, #2
 8006010:	e775      	b.n	8005efe <_dtoa_r+0x3de>
 8006012:	9e04      	ldr	r6, [sp, #16]
 8006014:	465f      	mov	r7, fp
 8006016:	e792      	b.n	8005f3e <_dtoa_r+0x41e>
 8006018:	9900      	ldr	r1, [sp, #0]
 800601a:	4b50      	ldr	r3, [pc, #320]	; (800615c <_dtoa_r+0x63c>)
 800601c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006020:	4431      	add	r1, r6
 8006022:	9102      	str	r1, [sp, #8]
 8006024:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006026:	eeb0 9a47 	vmov.f32	s18, s14
 800602a:	eef0 9a67 	vmov.f32	s19, s15
 800602e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006032:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006036:	2900      	cmp	r1, #0
 8006038:	d044      	beq.n	80060c4 <_dtoa_r+0x5a4>
 800603a:	494e      	ldr	r1, [pc, #312]	; (8006174 <_dtoa_r+0x654>)
 800603c:	2000      	movs	r0, #0
 800603e:	f7fa fc0d 	bl	800085c <__aeabi_ddiv>
 8006042:	ec53 2b19 	vmov	r2, r3, d9
 8006046:	f7fa f927 	bl	8000298 <__aeabi_dsub>
 800604a:	9d00      	ldr	r5, [sp, #0]
 800604c:	ec41 0b19 	vmov	d9, r0, r1
 8006050:	4649      	mov	r1, r9
 8006052:	4640      	mov	r0, r8
 8006054:	f7fa fd88 	bl	8000b68 <__aeabi_d2iz>
 8006058:	4606      	mov	r6, r0
 800605a:	f7fa fa6b 	bl	8000534 <__aeabi_i2d>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4640      	mov	r0, r8
 8006064:	4649      	mov	r1, r9
 8006066:	f7fa f917 	bl	8000298 <__aeabi_dsub>
 800606a:	3630      	adds	r6, #48	; 0x30
 800606c:	f805 6b01 	strb.w	r6, [r5], #1
 8006070:	ec53 2b19 	vmov	r2, r3, d9
 8006074:	4680      	mov	r8, r0
 8006076:	4689      	mov	r9, r1
 8006078:	f7fa fd38 	bl	8000aec <__aeabi_dcmplt>
 800607c:	2800      	cmp	r0, #0
 800607e:	d164      	bne.n	800614a <_dtoa_r+0x62a>
 8006080:	4642      	mov	r2, r8
 8006082:	464b      	mov	r3, r9
 8006084:	4937      	ldr	r1, [pc, #220]	; (8006164 <_dtoa_r+0x644>)
 8006086:	2000      	movs	r0, #0
 8006088:	f7fa f906 	bl	8000298 <__aeabi_dsub>
 800608c:	ec53 2b19 	vmov	r2, r3, d9
 8006090:	f7fa fd2c 	bl	8000aec <__aeabi_dcmplt>
 8006094:	2800      	cmp	r0, #0
 8006096:	f040 80b6 	bne.w	8006206 <_dtoa_r+0x6e6>
 800609a:	9b02      	ldr	r3, [sp, #8]
 800609c:	429d      	cmp	r5, r3
 800609e:	f43f af7c 	beq.w	8005f9a <_dtoa_r+0x47a>
 80060a2:	4b31      	ldr	r3, [pc, #196]	; (8006168 <_dtoa_r+0x648>)
 80060a4:	ec51 0b19 	vmov	r0, r1, d9
 80060a8:	2200      	movs	r2, #0
 80060aa:	f7fa faad 	bl	8000608 <__aeabi_dmul>
 80060ae:	4b2e      	ldr	r3, [pc, #184]	; (8006168 <_dtoa_r+0x648>)
 80060b0:	ec41 0b19 	vmov	d9, r0, r1
 80060b4:	2200      	movs	r2, #0
 80060b6:	4640      	mov	r0, r8
 80060b8:	4649      	mov	r1, r9
 80060ba:	f7fa faa5 	bl	8000608 <__aeabi_dmul>
 80060be:	4680      	mov	r8, r0
 80060c0:	4689      	mov	r9, r1
 80060c2:	e7c5      	b.n	8006050 <_dtoa_r+0x530>
 80060c4:	ec51 0b17 	vmov	r0, r1, d7
 80060c8:	f7fa fa9e 	bl	8000608 <__aeabi_dmul>
 80060cc:	9b02      	ldr	r3, [sp, #8]
 80060ce:	9d00      	ldr	r5, [sp, #0]
 80060d0:	930f      	str	r3, [sp, #60]	; 0x3c
 80060d2:	ec41 0b19 	vmov	d9, r0, r1
 80060d6:	4649      	mov	r1, r9
 80060d8:	4640      	mov	r0, r8
 80060da:	f7fa fd45 	bl	8000b68 <__aeabi_d2iz>
 80060de:	4606      	mov	r6, r0
 80060e0:	f7fa fa28 	bl	8000534 <__aeabi_i2d>
 80060e4:	3630      	adds	r6, #48	; 0x30
 80060e6:	4602      	mov	r2, r0
 80060e8:	460b      	mov	r3, r1
 80060ea:	4640      	mov	r0, r8
 80060ec:	4649      	mov	r1, r9
 80060ee:	f7fa f8d3 	bl	8000298 <__aeabi_dsub>
 80060f2:	f805 6b01 	strb.w	r6, [r5], #1
 80060f6:	9b02      	ldr	r3, [sp, #8]
 80060f8:	429d      	cmp	r5, r3
 80060fa:	4680      	mov	r8, r0
 80060fc:	4689      	mov	r9, r1
 80060fe:	f04f 0200 	mov.w	r2, #0
 8006102:	d124      	bne.n	800614e <_dtoa_r+0x62e>
 8006104:	4b1b      	ldr	r3, [pc, #108]	; (8006174 <_dtoa_r+0x654>)
 8006106:	ec51 0b19 	vmov	r0, r1, d9
 800610a:	f7fa f8c7 	bl	800029c <__adddf3>
 800610e:	4602      	mov	r2, r0
 8006110:	460b      	mov	r3, r1
 8006112:	4640      	mov	r0, r8
 8006114:	4649      	mov	r1, r9
 8006116:	f7fa fd07 	bl	8000b28 <__aeabi_dcmpgt>
 800611a:	2800      	cmp	r0, #0
 800611c:	d173      	bne.n	8006206 <_dtoa_r+0x6e6>
 800611e:	ec53 2b19 	vmov	r2, r3, d9
 8006122:	4914      	ldr	r1, [pc, #80]	; (8006174 <_dtoa_r+0x654>)
 8006124:	2000      	movs	r0, #0
 8006126:	f7fa f8b7 	bl	8000298 <__aeabi_dsub>
 800612a:	4602      	mov	r2, r0
 800612c:	460b      	mov	r3, r1
 800612e:	4640      	mov	r0, r8
 8006130:	4649      	mov	r1, r9
 8006132:	f7fa fcdb 	bl	8000aec <__aeabi_dcmplt>
 8006136:	2800      	cmp	r0, #0
 8006138:	f43f af2f 	beq.w	8005f9a <_dtoa_r+0x47a>
 800613c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800613e:	1e6b      	subs	r3, r5, #1
 8006140:	930f      	str	r3, [sp, #60]	; 0x3c
 8006142:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006146:	2b30      	cmp	r3, #48	; 0x30
 8006148:	d0f8      	beq.n	800613c <_dtoa_r+0x61c>
 800614a:	46bb      	mov	fp, r7
 800614c:	e04a      	b.n	80061e4 <_dtoa_r+0x6c4>
 800614e:	4b06      	ldr	r3, [pc, #24]	; (8006168 <_dtoa_r+0x648>)
 8006150:	f7fa fa5a 	bl	8000608 <__aeabi_dmul>
 8006154:	4680      	mov	r8, r0
 8006156:	4689      	mov	r9, r1
 8006158:	e7bd      	b.n	80060d6 <_dtoa_r+0x5b6>
 800615a:	bf00      	nop
 800615c:	08007ec8 	.word	0x08007ec8
 8006160:	08007ea0 	.word	0x08007ea0
 8006164:	3ff00000 	.word	0x3ff00000
 8006168:	40240000 	.word	0x40240000
 800616c:	401c0000 	.word	0x401c0000
 8006170:	40140000 	.word	0x40140000
 8006174:	3fe00000 	.word	0x3fe00000
 8006178:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800617c:	9d00      	ldr	r5, [sp, #0]
 800617e:	4642      	mov	r2, r8
 8006180:	464b      	mov	r3, r9
 8006182:	4630      	mov	r0, r6
 8006184:	4639      	mov	r1, r7
 8006186:	f7fa fb69 	bl	800085c <__aeabi_ddiv>
 800618a:	f7fa fced 	bl	8000b68 <__aeabi_d2iz>
 800618e:	9001      	str	r0, [sp, #4]
 8006190:	f7fa f9d0 	bl	8000534 <__aeabi_i2d>
 8006194:	4642      	mov	r2, r8
 8006196:	464b      	mov	r3, r9
 8006198:	f7fa fa36 	bl	8000608 <__aeabi_dmul>
 800619c:	4602      	mov	r2, r0
 800619e:	460b      	mov	r3, r1
 80061a0:	4630      	mov	r0, r6
 80061a2:	4639      	mov	r1, r7
 80061a4:	f7fa f878 	bl	8000298 <__aeabi_dsub>
 80061a8:	9e01      	ldr	r6, [sp, #4]
 80061aa:	9f04      	ldr	r7, [sp, #16]
 80061ac:	3630      	adds	r6, #48	; 0x30
 80061ae:	f805 6b01 	strb.w	r6, [r5], #1
 80061b2:	9e00      	ldr	r6, [sp, #0]
 80061b4:	1bae      	subs	r6, r5, r6
 80061b6:	42b7      	cmp	r7, r6
 80061b8:	4602      	mov	r2, r0
 80061ba:	460b      	mov	r3, r1
 80061bc:	d134      	bne.n	8006228 <_dtoa_r+0x708>
 80061be:	f7fa f86d 	bl	800029c <__adddf3>
 80061c2:	4642      	mov	r2, r8
 80061c4:	464b      	mov	r3, r9
 80061c6:	4606      	mov	r6, r0
 80061c8:	460f      	mov	r7, r1
 80061ca:	f7fa fcad 	bl	8000b28 <__aeabi_dcmpgt>
 80061ce:	b9c8      	cbnz	r0, 8006204 <_dtoa_r+0x6e4>
 80061d0:	4642      	mov	r2, r8
 80061d2:	464b      	mov	r3, r9
 80061d4:	4630      	mov	r0, r6
 80061d6:	4639      	mov	r1, r7
 80061d8:	f7fa fc7e 	bl	8000ad8 <__aeabi_dcmpeq>
 80061dc:	b110      	cbz	r0, 80061e4 <_dtoa_r+0x6c4>
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	07db      	lsls	r3, r3, #31
 80061e2:	d40f      	bmi.n	8006204 <_dtoa_r+0x6e4>
 80061e4:	4651      	mov	r1, sl
 80061e6:	4620      	mov	r0, r4
 80061e8:	f000 fbcc 	bl	8006984 <_Bfree>
 80061ec:	2300      	movs	r3, #0
 80061ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061f0:	702b      	strb	r3, [r5, #0]
 80061f2:	f10b 0301 	add.w	r3, fp, #1
 80061f6:	6013      	str	r3, [r2, #0]
 80061f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	f43f ace2 	beq.w	8005bc4 <_dtoa_r+0xa4>
 8006200:	601d      	str	r5, [r3, #0]
 8006202:	e4df      	b.n	8005bc4 <_dtoa_r+0xa4>
 8006204:	465f      	mov	r7, fp
 8006206:	462b      	mov	r3, r5
 8006208:	461d      	mov	r5, r3
 800620a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800620e:	2a39      	cmp	r2, #57	; 0x39
 8006210:	d106      	bne.n	8006220 <_dtoa_r+0x700>
 8006212:	9a00      	ldr	r2, [sp, #0]
 8006214:	429a      	cmp	r2, r3
 8006216:	d1f7      	bne.n	8006208 <_dtoa_r+0x6e8>
 8006218:	9900      	ldr	r1, [sp, #0]
 800621a:	2230      	movs	r2, #48	; 0x30
 800621c:	3701      	adds	r7, #1
 800621e:	700a      	strb	r2, [r1, #0]
 8006220:	781a      	ldrb	r2, [r3, #0]
 8006222:	3201      	adds	r2, #1
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	e790      	b.n	800614a <_dtoa_r+0x62a>
 8006228:	4ba3      	ldr	r3, [pc, #652]	; (80064b8 <_dtoa_r+0x998>)
 800622a:	2200      	movs	r2, #0
 800622c:	f7fa f9ec 	bl	8000608 <__aeabi_dmul>
 8006230:	2200      	movs	r2, #0
 8006232:	2300      	movs	r3, #0
 8006234:	4606      	mov	r6, r0
 8006236:	460f      	mov	r7, r1
 8006238:	f7fa fc4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800623c:	2800      	cmp	r0, #0
 800623e:	d09e      	beq.n	800617e <_dtoa_r+0x65e>
 8006240:	e7d0      	b.n	80061e4 <_dtoa_r+0x6c4>
 8006242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006244:	2a00      	cmp	r2, #0
 8006246:	f000 80ca 	beq.w	80063de <_dtoa_r+0x8be>
 800624a:	9a07      	ldr	r2, [sp, #28]
 800624c:	2a01      	cmp	r2, #1
 800624e:	f300 80ad 	bgt.w	80063ac <_dtoa_r+0x88c>
 8006252:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006254:	2a00      	cmp	r2, #0
 8006256:	f000 80a5 	beq.w	80063a4 <_dtoa_r+0x884>
 800625a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800625e:	9e08      	ldr	r6, [sp, #32]
 8006260:	9d05      	ldr	r5, [sp, #20]
 8006262:	9a05      	ldr	r2, [sp, #20]
 8006264:	441a      	add	r2, r3
 8006266:	9205      	str	r2, [sp, #20]
 8006268:	9a06      	ldr	r2, [sp, #24]
 800626a:	2101      	movs	r1, #1
 800626c:	441a      	add	r2, r3
 800626e:	4620      	mov	r0, r4
 8006270:	9206      	str	r2, [sp, #24]
 8006272:	f000 fc3d 	bl	8006af0 <__i2b>
 8006276:	4607      	mov	r7, r0
 8006278:	b165      	cbz	r5, 8006294 <_dtoa_r+0x774>
 800627a:	9b06      	ldr	r3, [sp, #24]
 800627c:	2b00      	cmp	r3, #0
 800627e:	dd09      	ble.n	8006294 <_dtoa_r+0x774>
 8006280:	42ab      	cmp	r3, r5
 8006282:	9a05      	ldr	r2, [sp, #20]
 8006284:	bfa8      	it	ge
 8006286:	462b      	movge	r3, r5
 8006288:	1ad2      	subs	r2, r2, r3
 800628a:	9205      	str	r2, [sp, #20]
 800628c:	9a06      	ldr	r2, [sp, #24]
 800628e:	1aed      	subs	r5, r5, r3
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	9306      	str	r3, [sp, #24]
 8006294:	9b08      	ldr	r3, [sp, #32]
 8006296:	b1f3      	cbz	r3, 80062d6 <_dtoa_r+0x7b6>
 8006298:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800629a:	2b00      	cmp	r3, #0
 800629c:	f000 80a3 	beq.w	80063e6 <_dtoa_r+0x8c6>
 80062a0:	2e00      	cmp	r6, #0
 80062a2:	dd10      	ble.n	80062c6 <_dtoa_r+0x7a6>
 80062a4:	4639      	mov	r1, r7
 80062a6:	4632      	mov	r2, r6
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 fce1 	bl	8006c70 <__pow5mult>
 80062ae:	4652      	mov	r2, sl
 80062b0:	4601      	mov	r1, r0
 80062b2:	4607      	mov	r7, r0
 80062b4:	4620      	mov	r0, r4
 80062b6:	f000 fc31 	bl	8006b1c <__multiply>
 80062ba:	4651      	mov	r1, sl
 80062bc:	4680      	mov	r8, r0
 80062be:	4620      	mov	r0, r4
 80062c0:	f000 fb60 	bl	8006984 <_Bfree>
 80062c4:	46c2      	mov	sl, r8
 80062c6:	9b08      	ldr	r3, [sp, #32]
 80062c8:	1b9a      	subs	r2, r3, r6
 80062ca:	d004      	beq.n	80062d6 <_dtoa_r+0x7b6>
 80062cc:	4651      	mov	r1, sl
 80062ce:	4620      	mov	r0, r4
 80062d0:	f000 fcce 	bl	8006c70 <__pow5mult>
 80062d4:	4682      	mov	sl, r0
 80062d6:	2101      	movs	r1, #1
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fc09 	bl	8006af0 <__i2b>
 80062de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	4606      	mov	r6, r0
 80062e4:	f340 8081 	ble.w	80063ea <_dtoa_r+0x8ca>
 80062e8:	461a      	mov	r2, r3
 80062ea:	4601      	mov	r1, r0
 80062ec:	4620      	mov	r0, r4
 80062ee:	f000 fcbf 	bl	8006c70 <__pow5mult>
 80062f2:	9b07      	ldr	r3, [sp, #28]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	4606      	mov	r6, r0
 80062f8:	dd7a      	ble.n	80063f0 <_dtoa_r+0x8d0>
 80062fa:	f04f 0800 	mov.w	r8, #0
 80062fe:	6933      	ldr	r3, [r6, #16]
 8006300:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006304:	6918      	ldr	r0, [r3, #16]
 8006306:	f000 fba5 	bl	8006a54 <__hi0bits>
 800630a:	f1c0 0020 	rsb	r0, r0, #32
 800630e:	9b06      	ldr	r3, [sp, #24]
 8006310:	4418      	add	r0, r3
 8006312:	f010 001f 	ands.w	r0, r0, #31
 8006316:	f000 8094 	beq.w	8006442 <_dtoa_r+0x922>
 800631a:	f1c0 0320 	rsb	r3, r0, #32
 800631e:	2b04      	cmp	r3, #4
 8006320:	f340 8085 	ble.w	800642e <_dtoa_r+0x90e>
 8006324:	9b05      	ldr	r3, [sp, #20]
 8006326:	f1c0 001c 	rsb	r0, r0, #28
 800632a:	4403      	add	r3, r0
 800632c:	9305      	str	r3, [sp, #20]
 800632e:	9b06      	ldr	r3, [sp, #24]
 8006330:	4403      	add	r3, r0
 8006332:	4405      	add	r5, r0
 8006334:	9306      	str	r3, [sp, #24]
 8006336:	9b05      	ldr	r3, [sp, #20]
 8006338:	2b00      	cmp	r3, #0
 800633a:	dd05      	ble.n	8006348 <_dtoa_r+0x828>
 800633c:	4651      	mov	r1, sl
 800633e:	461a      	mov	r2, r3
 8006340:	4620      	mov	r0, r4
 8006342:	f000 fcef 	bl	8006d24 <__lshift>
 8006346:	4682      	mov	sl, r0
 8006348:	9b06      	ldr	r3, [sp, #24]
 800634a:	2b00      	cmp	r3, #0
 800634c:	dd05      	ble.n	800635a <_dtoa_r+0x83a>
 800634e:	4631      	mov	r1, r6
 8006350:	461a      	mov	r2, r3
 8006352:	4620      	mov	r0, r4
 8006354:	f000 fce6 	bl	8006d24 <__lshift>
 8006358:	4606      	mov	r6, r0
 800635a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800635c:	2b00      	cmp	r3, #0
 800635e:	d072      	beq.n	8006446 <_dtoa_r+0x926>
 8006360:	4631      	mov	r1, r6
 8006362:	4650      	mov	r0, sl
 8006364:	f000 fd4a 	bl	8006dfc <__mcmp>
 8006368:	2800      	cmp	r0, #0
 800636a:	da6c      	bge.n	8006446 <_dtoa_r+0x926>
 800636c:	2300      	movs	r3, #0
 800636e:	4651      	mov	r1, sl
 8006370:	220a      	movs	r2, #10
 8006372:	4620      	mov	r0, r4
 8006374:	f000 fb28 	bl	80069c8 <__multadd>
 8006378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800637a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800637e:	4682      	mov	sl, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	f000 81b0 	beq.w	80066e6 <_dtoa_r+0xbc6>
 8006386:	2300      	movs	r3, #0
 8006388:	4639      	mov	r1, r7
 800638a:	220a      	movs	r2, #10
 800638c:	4620      	mov	r0, r4
 800638e:	f000 fb1b 	bl	80069c8 <__multadd>
 8006392:	9b01      	ldr	r3, [sp, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	4607      	mov	r7, r0
 8006398:	f300 8096 	bgt.w	80064c8 <_dtoa_r+0x9a8>
 800639c:	9b07      	ldr	r3, [sp, #28]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	dc59      	bgt.n	8006456 <_dtoa_r+0x936>
 80063a2:	e091      	b.n	80064c8 <_dtoa_r+0x9a8>
 80063a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063aa:	e758      	b.n	800625e <_dtoa_r+0x73e>
 80063ac:	9b04      	ldr	r3, [sp, #16]
 80063ae:	1e5e      	subs	r6, r3, #1
 80063b0:	9b08      	ldr	r3, [sp, #32]
 80063b2:	42b3      	cmp	r3, r6
 80063b4:	bfbf      	itttt	lt
 80063b6:	9b08      	ldrlt	r3, [sp, #32]
 80063b8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80063ba:	9608      	strlt	r6, [sp, #32]
 80063bc:	1af3      	sublt	r3, r6, r3
 80063be:	bfb4      	ite	lt
 80063c0:	18d2      	addlt	r2, r2, r3
 80063c2:	1b9e      	subge	r6, r3, r6
 80063c4:	9b04      	ldr	r3, [sp, #16]
 80063c6:	bfbc      	itt	lt
 80063c8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80063ca:	2600      	movlt	r6, #0
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	bfb7      	itett	lt
 80063d0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80063d4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80063d8:	1a9d      	sublt	r5, r3, r2
 80063da:	2300      	movlt	r3, #0
 80063dc:	e741      	b.n	8006262 <_dtoa_r+0x742>
 80063de:	9e08      	ldr	r6, [sp, #32]
 80063e0:	9d05      	ldr	r5, [sp, #20]
 80063e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80063e4:	e748      	b.n	8006278 <_dtoa_r+0x758>
 80063e6:	9a08      	ldr	r2, [sp, #32]
 80063e8:	e770      	b.n	80062cc <_dtoa_r+0x7ac>
 80063ea:	9b07      	ldr	r3, [sp, #28]
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	dc19      	bgt.n	8006424 <_dtoa_r+0x904>
 80063f0:	9b02      	ldr	r3, [sp, #8]
 80063f2:	b9bb      	cbnz	r3, 8006424 <_dtoa_r+0x904>
 80063f4:	9b03      	ldr	r3, [sp, #12]
 80063f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063fa:	b99b      	cbnz	r3, 8006424 <_dtoa_r+0x904>
 80063fc:	9b03      	ldr	r3, [sp, #12]
 80063fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006402:	0d1b      	lsrs	r3, r3, #20
 8006404:	051b      	lsls	r3, r3, #20
 8006406:	b183      	cbz	r3, 800642a <_dtoa_r+0x90a>
 8006408:	9b05      	ldr	r3, [sp, #20]
 800640a:	3301      	adds	r3, #1
 800640c:	9305      	str	r3, [sp, #20]
 800640e:	9b06      	ldr	r3, [sp, #24]
 8006410:	3301      	adds	r3, #1
 8006412:	9306      	str	r3, [sp, #24]
 8006414:	f04f 0801 	mov.w	r8, #1
 8006418:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800641a:	2b00      	cmp	r3, #0
 800641c:	f47f af6f 	bne.w	80062fe <_dtoa_r+0x7de>
 8006420:	2001      	movs	r0, #1
 8006422:	e774      	b.n	800630e <_dtoa_r+0x7ee>
 8006424:	f04f 0800 	mov.w	r8, #0
 8006428:	e7f6      	b.n	8006418 <_dtoa_r+0x8f8>
 800642a:	4698      	mov	r8, r3
 800642c:	e7f4      	b.n	8006418 <_dtoa_r+0x8f8>
 800642e:	d082      	beq.n	8006336 <_dtoa_r+0x816>
 8006430:	9a05      	ldr	r2, [sp, #20]
 8006432:	331c      	adds	r3, #28
 8006434:	441a      	add	r2, r3
 8006436:	9205      	str	r2, [sp, #20]
 8006438:	9a06      	ldr	r2, [sp, #24]
 800643a:	441a      	add	r2, r3
 800643c:	441d      	add	r5, r3
 800643e:	9206      	str	r2, [sp, #24]
 8006440:	e779      	b.n	8006336 <_dtoa_r+0x816>
 8006442:	4603      	mov	r3, r0
 8006444:	e7f4      	b.n	8006430 <_dtoa_r+0x910>
 8006446:	9b04      	ldr	r3, [sp, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	dc37      	bgt.n	80064bc <_dtoa_r+0x99c>
 800644c:	9b07      	ldr	r3, [sp, #28]
 800644e:	2b02      	cmp	r3, #2
 8006450:	dd34      	ble.n	80064bc <_dtoa_r+0x99c>
 8006452:	9b04      	ldr	r3, [sp, #16]
 8006454:	9301      	str	r3, [sp, #4]
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	b963      	cbnz	r3, 8006474 <_dtoa_r+0x954>
 800645a:	4631      	mov	r1, r6
 800645c:	2205      	movs	r2, #5
 800645e:	4620      	mov	r0, r4
 8006460:	f000 fab2 	bl	80069c8 <__multadd>
 8006464:	4601      	mov	r1, r0
 8006466:	4606      	mov	r6, r0
 8006468:	4650      	mov	r0, sl
 800646a:	f000 fcc7 	bl	8006dfc <__mcmp>
 800646e:	2800      	cmp	r0, #0
 8006470:	f73f adbb 	bgt.w	8005fea <_dtoa_r+0x4ca>
 8006474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006476:	9d00      	ldr	r5, [sp, #0]
 8006478:	ea6f 0b03 	mvn.w	fp, r3
 800647c:	f04f 0800 	mov.w	r8, #0
 8006480:	4631      	mov	r1, r6
 8006482:	4620      	mov	r0, r4
 8006484:	f000 fa7e 	bl	8006984 <_Bfree>
 8006488:	2f00      	cmp	r7, #0
 800648a:	f43f aeab 	beq.w	80061e4 <_dtoa_r+0x6c4>
 800648e:	f1b8 0f00 	cmp.w	r8, #0
 8006492:	d005      	beq.n	80064a0 <_dtoa_r+0x980>
 8006494:	45b8      	cmp	r8, r7
 8006496:	d003      	beq.n	80064a0 <_dtoa_r+0x980>
 8006498:	4641      	mov	r1, r8
 800649a:	4620      	mov	r0, r4
 800649c:	f000 fa72 	bl	8006984 <_Bfree>
 80064a0:	4639      	mov	r1, r7
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 fa6e 	bl	8006984 <_Bfree>
 80064a8:	e69c      	b.n	80061e4 <_dtoa_r+0x6c4>
 80064aa:	2600      	movs	r6, #0
 80064ac:	4637      	mov	r7, r6
 80064ae:	e7e1      	b.n	8006474 <_dtoa_r+0x954>
 80064b0:	46bb      	mov	fp, r7
 80064b2:	4637      	mov	r7, r6
 80064b4:	e599      	b.n	8005fea <_dtoa_r+0x4ca>
 80064b6:	bf00      	nop
 80064b8:	40240000 	.word	0x40240000
 80064bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	f000 80c8 	beq.w	8006654 <_dtoa_r+0xb34>
 80064c4:	9b04      	ldr	r3, [sp, #16]
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	2d00      	cmp	r5, #0
 80064ca:	dd05      	ble.n	80064d8 <_dtoa_r+0x9b8>
 80064cc:	4639      	mov	r1, r7
 80064ce:	462a      	mov	r2, r5
 80064d0:	4620      	mov	r0, r4
 80064d2:	f000 fc27 	bl	8006d24 <__lshift>
 80064d6:	4607      	mov	r7, r0
 80064d8:	f1b8 0f00 	cmp.w	r8, #0
 80064dc:	d05b      	beq.n	8006596 <_dtoa_r+0xa76>
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fa0f 	bl	8006904 <_Balloc>
 80064e6:	4605      	mov	r5, r0
 80064e8:	b928      	cbnz	r0, 80064f6 <_dtoa_r+0x9d6>
 80064ea:	4b83      	ldr	r3, [pc, #524]	; (80066f8 <_dtoa_r+0xbd8>)
 80064ec:	4602      	mov	r2, r0
 80064ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80064f2:	f7ff bb2e 	b.w	8005b52 <_dtoa_r+0x32>
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	3202      	adds	r2, #2
 80064fa:	0092      	lsls	r2, r2, #2
 80064fc:	f107 010c 	add.w	r1, r7, #12
 8006500:	300c      	adds	r0, #12
 8006502:	f000 ffab 	bl	800745c <memcpy>
 8006506:	2201      	movs	r2, #1
 8006508:	4629      	mov	r1, r5
 800650a:	4620      	mov	r0, r4
 800650c:	f000 fc0a 	bl	8006d24 <__lshift>
 8006510:	9b00      	ldr	r3, [sp, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	9304      	str	r3, [sp, #16]
 8006516:	e9dd 2300 	ldrd	r2, r3, [sp]
 800651a:	4413      	add	r3, r2
 800651c:	9308      	str	r3, [sp, #32]
 800651e:	9b02      	ldr	r3, [sp, #8]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	46b8      	mov	r8, r7
 8006526:	9306      	str	r3, [sp, #24]
 8006528:	4607      	mov	r7, r0
 800652a:	9b04      	ldr	r3, [sp, #16]
 800652c:	4631      	mov	r1, r6
 800652e:	3b01      	subs	r3, #1
 8006530:	4650      	mov	r0, sl
 8006532:	9301      	str	r3, [sp, #4]
 8006534:	f7ff fa6b 	bl	8005a0e <quorem>
 8006538:	4641      	mov	r1, r8
 800653a:	9002      	str	r0, [sp, #8]
 800653c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006540:	4650      	mov	r0, sl
 8006542:	f000 fc5b 	bl	8006dfc <__mcmp>
 8006546:	463a      	mov	r2, r7
 8006548:	9005      	str	r0, [sp, #20]
 800654a:	4631      	mov	r1, r6
 800654c:	4620      	mov	r0, r4
 800654e:	f000 fc71 	bl	8006e34 <__mdiff>
 8006552:	68c2      	ldr	r2, [r0, #12]
 8006554:	4605      	mov	r5, r0
 8006556:	bb02      	cbnz	r2, 800659a <_dtoa_r+0xa7a>
 8006558:	4601      	mov	r1, r0
 800655a:	4650      	mov	r0, sl
 800655c:	f000 fc4e 	bl	8006dfc <__mcmp>
 8006560:	4602      	mov	r2, r0
 8006562:	4629      	mov	r1, r5
 8006564:	4620      	mov	r0, r4
 8006566:	9209      	str	r2, [sp, #36]	; 0x24
 8006568:	f000 fa0c 	bl	8006984 <_Bfree>
 800656c:	9b07      	ldr	r3, [sp, #28]
 800656e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006570:	9d04      	ldr	r5, [sp, #16]
 8006572:	ea43 0102 	orr.w	r1, r3, r2
 8006576:	9b06      	ldr	r3, [sp, #24]
 8006578:	4319      	orrs	r1, r3
 800657a:	d110      	bne.n	800659e <_dtoa_r+0xa7e>
 800657c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006580:	d029      	beq.n	80065d6 <_dtoa_r+0xab6>
 8006582:	9b05      	ldr	r3, [sp, #20]
 8006584:	2b00      	cmp	r3, #0
 8006586:	dd02      	ble.n	800658e <_dtoa_r+0xa6e>
 8006588:	9b02      	ldr	r3, [sp, #8]
 800658a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800658e:	9b01      	ldr	r3, [sp, #4]
 8006590:	f883 9000 	strb.w	r9, [r3]
 8006594:	e774      	b.n	8006480 <_dtoa_r+0x960>
 8006596:	4638      	mov	r0, r7
 8006598:	e7ba      	b.n	8006510 <_dtoa_r+0x9f0>
 800659a:	2201      	movs	r2, #1
 800659c:	e7e1      	b.n	8006562 <_dtoa_r+0xa42>
 800659e:	9b05      	ldr	r3, [sp, #20]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	db04      	blt.n	80065ae <_dtoa_r+0xa8e>
 80065a4:	9907      	ldr	r1, [sp, #28]
 80065a6:	430b      	orrs	r3, r1
 80065a8:	9906      	ldr	r1, [sp, #24]
 80065aa:	430b      	orrs	r3, r1
 80065ac:	d120      	bne.n	80065f0 <_dtoa_r+0xad0>
 80065ae:	2a00      	cmp	r2, #0
 80065b0:	dded      	ble.n	800658e <_dtoa_r+0xa6e>
 80065b2:	4651      	mov	r1, sl
 80065b4:	2201      	movs	r2, #1
 80065b6:	4620      	mov	r0, r4
 80065b8:	f000 fbb4 	bl	8006d24 <__lshift>
 80065bc:	4631      	mov	r1, r6
 80065be:	4682      	mov	sl, r0
 80065c0:	f000 fc1c 	bl	8006dfc <__mcmp>
 80065c4:	2800      	cmp	r0, #0
 80065c6:	dc03      	bgt.n	80065d0 <_dtoa_r+0xab0>
 80065c8:	d1e1      	bne.n	800658e <_dtoa_r+0xa6e>
 80065ca:	f019 0f01 	tst.w	r9, #1
 80065ce:	d0de      	beq.n	800658e <_dtoa_r+0xa6e>
 80065d0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065d4:	d1d8      	bne.n	8006588 <_dtoa_r+0xa68>
 80065d6:	9a01      	ldr	r2, [sp, #4]
 80065d8:	2339      	movs	r3, #57	; 0x39
 80065da:	7013      	strb	r3, [r2, #0]
 80065dc:	462b      	mov	r3, r5
 80065de:	461d      	mov	r5, r3
 80065e0:	3b01      	subs	r3, #1
 80065e2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065e6:	2a39      	cmp	r2, #57	; 0x39
 80065e8:	d06c      	beq.n	80066c4 <_dtoa_r+0xba4>
 80065ea:	3201      	adds	r2, #1
 80065ec:	701a      	strb	r2, [r3, #0]
 80065ee:	e747      	b.n	8006480 <_dtoa_r+0x960>
 80065f0:	2a00      	cmp	r2, #0
 80065f2:	dd07      	ble.n	8006604 <_dtoa_r+0xae4>
 80065f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80065f8:	d0ed      	beq.n	80065d6 <_dtoa_r+0xab6>
 80065fa:	9a01      	ldr	r2, [sp, #4]
 80065fc:	f109 0301 	add.w	r3, r9, #1
 8006600:	7013      	strb	r3, [r2, #0]
 8006602:	e73d      	b.n	8006480 <_dtoa_r+0x960>
 8006604:	9b04      	ldr	r3, [sp, #16]
 8006606:	9a08      	ldr	r2, [sp, #32]
 8006608:	f803 9c01 	strb.w	r9, [r3, #-1]
 800660c:	4293      	cmp	r3, r2
 800660e:	d043      	beq.n	8006698 <_dtoa_r+0xb78>
 8006610:	4651      	mov	r1, sl
 8006612:	2300      	movs	r3, #0
 8006614:	220a      	movs	r2, #10
 8006616:	4620      	mov	r0, r4
 8006618:	f000 f9d6 	bl	80069c8 <__multadd>
 800661c:	45b8      	cmp	r8, r7
 800661e:	4682      	mov	sl, r0
 8006620:	f04f 0300 	mov.w	r3, #0
 8006624:	f04f 020a 	mov.w	r2, #10
 8006628:	4641      	mov	r1, r8
 800662a:	4620      	mov	r0, r4
 800662c:	d107      	bne.n	800663e <_dtoa_r+0xb1e>
 800662e:	f000 f9cb 	bl	80069c8 <__multadd>
 8006632:	4680      	mov	r8, r0
 8006634:	4607      	mov	r7, r0
 8006636:	9b04      	ldr	r3, [sp, #16]
 8006638:	3301      	adds	r3, #1
 800663a:	9304      	str	r3, [sp, #16]
 800663c:	e775      	b.n	800652a <_dtoa_r+0xa0a>
 800663e:	f000 f9c3 	bl	80069c8 <__multadd>
 8006642:	4639      	mov	r1, r7
 8006644:	4680      	mov	r8, r0
 8006646:	2300      	movs	r3, #0
 8006648:	220a      	movs	r2, #10
 800664a:	4620      	mov	r0, r4
 800664c:	f000 f9bc 	bl	80069c8 <__multadd>
 8006650:	4607      	mov	r7, r0
 8006652:	e7f0      	b.n	8006636 <_dtoa_r+0xb16>
 8006654:	9b04      	ldr	r3, [sp, #16]
 8006656:	9301      	str	r3, [sp, #4]
 8006658:	9d00      	ldr	r5, [sp, #0]
 800665a:	4631      	mov	r1, r6
 800665c:	4650      	mov	r0, sl
 800665e:	f7ff f9d6 	bl	8005a0e <quorem>
 8006662:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006666:	9b00      	ldr	r3, [sp, #0]
 8006668:	f805 9b01 	strb.w	r9, [r5], #1
 800666c:	1aea      	subs	r2, r5, r3
 800666e:	9b01      	ldr	r3, [sp, #4]
 8006670:	4293      	cmp	r3, r2
 8006672:	dd07      	ble.n	8006684 <_dtoa_r+0xb64>
 8006674:	4651      	mov	r1, sl
 8006676:	2300      	movs	r3, #0
 8006678:	220a      	movs	r2, #10
 800667a:	4620      	mov	r0, r4
 800667c:	f000 f9a4 	bl	80069c8 <__multadd>
 8006680:	4682      	mov	sl, r0
 8006682:	e7ea      	b.n	800665a <_dtoa_r+0xb3a>
 8006684:	9b01      	ldr	r3, [sp, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	bfc8      	it	gt
 800668a:	461d      	movgt	r5, r3
 800668c:	9b00      	ldr	r3, [sp, #0]
 800668e:	bfd8      	it	le
 8006690:	2501      	movle	r5, #1
 8006692:	441d      	add	r5, r3
 8006694:	f04f 0800 	mov.w	r8, #0
 8006698:	4651      	mov	r1, sl
 800669a:	2201      	movs	r2, #1
 800669c:	4620      	mov	r0, r4
 800669e:	f000 fb41 	bl	8006d24 <__lshift>
 80066a2:	4631      	mov	r1, r6
 80066a4:	4682      	mov	sl, r0
 80066a6:	f000 fba9 	bl	8006dfc <__mcmp>
 80066aa:	2800      	cmp	r0, #0
 80066ac:	dc96      	bgt.n	80065dc <_dtoa_r+0xabc>
 80066ae:	d102      	bne.n	80066b6 <_dtoa_r+0xb96>
 80066b0:	f019 0f01 	tst.w	r9, #1
 80066b4:	d192      	bne.n	80065dc <_dtoa_r+0xabc>
 80066b6:	462b      	mov	r3, r5
 80066b8:	461d      	mov	r5, r3
 80066ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066be:	2a30      	cmp	r2, #48	; 0x30
 80066c0:	d0fa      	beq.n	80066b8 <_dtoa_r+0xb98>
 80066c2:	e6dd      	b.n	8006480 <_dtoa_r+0x960>
 80066c4:	9a00      	ldr	r2, [sp, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d189      	bne.n	80065de <_dtoa_r+0xabe>
 80066ca:	f10b 0b01 	add.w	fp, fp, #1
 80066ce:	2331      	movs	r3, #49	; 0x31
 80066d0:	e796      	b.n	8006600 <_dtoa_r+0xae0>
 80066d2:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <_dtoa_r+0xbdc>)
 80066d4:	f7ff ba99 	b.w	8005c0a <_dtoa_r+0xea>
 80066d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066da:	2b00      	cmp	r3, #0
 80066dc:	f47f aa6d 	bne.w	8005bba <_dtoa_r+0x9a>
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <_dtoa_r+0xbe0>)
 80066e2:	f7ff ba92 	b.w	8005c0a <_dtoa_r+0xea>
 80066e6:	9b01      	ldr	r3, [sp, #4]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	dcb5      	bgt.n	8006658 <_dtoa_r+0xb38>
 80066ec:	9b07      	ldr	r3, [sp, #28]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	f73f aeb1 	bgt.w	8006456 <_dtoa_r+0x936>
 80066f4:	e7b0      	b.n	8006658 <_dtoa_r+0xb38>
 80066f6:	bf00      	nop
 80066f8:	08007e30 	.word	0x08007e30
 80066fc:	08007d90 	.word	0x08007d90
 8006700:	08007db4 	.word	0x08007db4

08006704 <_free_r>:
 8006704:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006706:	2900      	cmp	r1, #0
 8006708:	d044      	beq.n	8006794 <_free_r+0x90>
 800670a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800670e:	9001      	str	r0, [sp, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	f1a1 0404 	sub.w	r4, r1, #4
 8006716:	bfb8      	it	lt
 8006718:	18e4      	addlt	r4, r4, r3
 800671a:	f000 f8e7 	bl	80068ec <__malloc_lock>
 800671e:	4a1e      	ldr	r2, [pc, #120]	; (8006798 <_free_r+0x94>)
 8006720:	9801      	ldr	r0, [sp, #4]
 8006722:	6813      	ldr	r3, [r2, #0]
 8006724:	b933      	cbnz	r3, 8006734 <_free_r+0x30>
 8006726:	6063      	str	r3, [r4, #4]
 8006728:	6014      	str	r4, [r2, #0]
 800672a:	b003      	add	sp, #12
 800672c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006730:	f000 b8e2 	b.w	80068f8 <__malloc_unlock>
 8006734:	42a3      	cmp	r3, r4
 8006736:	d908      	bls.n	800674a <_free_r+0x46>
 8006738:	6825      	ldr	r5, [r4, #0]
 800673a:	1961      	adds	r1, r4, r5
 800673c:	428b      	cmp	r3, r1
 800673e:	bf01      	itttt	eq
 8006740:	6819      	ldreq	r1, [r3, #0]
 8006742:	685b      	ldreq	r3, [r3, #4]
 8006744:	1949      	addeq	r1, r1, r5
 8006746:	6021      	streq	r1, [r4, #0]
 8006748:	e7ed      	b.n	8006726 <_free_r+0x22>
 800674a:	461a      	mov	r2, r3
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	b10b      	cbz	r3, 8006754 <_free_r+0x50>
 8006750:	42a3      	cmp	r3, r4
 8006752:	d9fa      	bls.n	800674a <_free_r+0x46>
 8006754:	6811      	ldr	r1, [r2, #0]
 8006756:	1855      	adds	r5, r2, r1
 8006758:	42a5      	cmp	r5, r4
 800675a:	d10b      	bne.n	8006774 <_free_r+0x70>
 800675c:	6824      	ldr	r4, [r4, #0]
 800675e:	4421      	add	r1, r4
 8006760:	1854      	adds	r4, r2, r1
 8006762:	42a3      	cmp	r3, r4
 8006764:	6011      	str	r1, [r2, #0]
 8006766:	d1e0      	bne.n	800672a <_free_r+0x26>
 8006768:	681c      	ldr	r4, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	6053      	str	r3, [r2, #4]
 800676e:	440c      	add	r4, r1
 8006770:	6014      	str	r4, [r2, #0]
 8006772:	e7da      	b.n	800672a <_free_r+0x26>
 8006774:	d902      	bls.n	800677c <_free_r+0x78>
 8006776:	230c      	movs	r3, #12
 8006778:	6003      	str	r3, [r0, #0]
 800677a:	e7d6      	b.n	800672a <_free_r+0x26>
 800677c:	6825      	ldr	r5, [r4, #0]
 800677e:	1961      	adds	r1, r4, r5
 8006780:	428b      	cmp	r3, r1
 8006782:	bf04      	itt	eq
 8006784:	6819      	ldreq	r1, [r3, #0]
 8006786:	685b      	ldreq	r3, [r3, #4]
 8006788:	6063      	str	r3, [r4, #4]
 800678a:	bf04      	itt	eq
 800678c:	1949      	addeq	r1, r1, r5
 800678e:	6021      	streq	r1, [r4, #0]
 8006790:	6054      	str	r4, [r2, #4]
 8006792:	e7ca      	b.n	800672a <_free_r+0x26>
 8006794:	b003      	add	sp, #12
 8006796:	bd30      	pop	{r4, r5, pc}
 8006798:	200004c0 	.word	0x200004c0

0800679c <malloc>:
 800679c:	4b02      	ldr	r3, [pc, #8]	; (80067a8 <malloc+0xc>)
 800679e:	4601      	mov	r1, r0
 80067a0:	6818      	ldr	r0, [r3, #0]
 80067a2:	f000 b823 	b.w	80067ec <_malloc_r>
 80067a6:	bf00      	nop
 80067a8:	20000064 	.word	0x20000064

080067ac <sbrk_aligned>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4e0e      	ldr	r6, [pc, #56]	; (80067e8 <sbrk_aligned+0x3c>)
 80067b0:	460c      	mov	r4, r1
 80067b2:	6831      	ldr	r1, [r6, #0]
 80067b4:	4605      	mov	r5, r0
 80067b6:	b911      	cbnz	r1, 80067be <sbrk_aligned+0x12>
 80067b8:	f000 fe40 	bl	800743c <_sbrk_r>
 80067bc:	6030      	str	r0, [r6, #0]
 80067be:	4621      	mov	r1, r4
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 fe3b 	bl	800743c <_sbrk_r>
 80067c6:	1c43      	adds	r3, r0, #1
 80067c8:	d00a      	beq.n	80067e0 <sbrk_aligned+0x34>
 80067ca:	1cc4      	adds	r4, r0, #3
 80067cc:	f024 0403 	bic.w	r4, r4, #3
 80067d0:	42a0      	cmp	r0, r4
 80067d2:	d007      	beq.n	80067e4 <sbrk_aligned+0x38>
 80067d4:	1a21      	subs	r1, r4, r0
 80067d6:	4628      	mov	r0, r5
 80067d8:	f000 fe30 	bl	800743c <_sbrk_r>
 80067dc:	3001      	adds	r0, #1
 80067de:	d101      	bne.n	80067e4 <sbrk_aligned+0x38>
 80067e0:	f04f 34ff 	mov.w	r4, #4294967295
 80067e4:	4620      	mov	r0, r4
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	200004c4 	.word	0x200004c4

080067ec <_malloc_r>:
 80067ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067f0:	1ccd      	adds	r5, r1, #3
 80067f2:	f025 0503 	bic.w	r5, r5, #3
 80067f6:	3508      	adds	r5, #8
 80067f8:	2d0c      	cmp	r5, #12
 80067fa:	bf38      	it	cc
 80067fc:	250c      	movcc	r5, #12
 80067fe:	2d00      	cmp	r5, #0
 8006800:	4607      	mov	r7, r0
 8006802:	db01      	blt.n	8006808 <_malloc_r+0x1c>
 8006804:	42a9      	cmp	r1, r5
 8006806:	d905      	bls.n	8006814 <_malloc_r+0x28>
 8006808:	230c      	movs	r3, #12
 800680a:	603b      	str	r3, [r7, #0]
 800680c:	2600      	movs	r6, #0
 800680e:	4630      	mov	r0, r6
 8006810:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006814:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80068e8 <_malloc_r+0xfc>
 8006818:	f000 f868 	bl	80068ec <__malloc_lock>
 800681c:	f8d8 3000 	ldr.w	r3, [r8]
 8006820:	461c      	mov	r4, r3
 8006822:	bb5c      	cbnz	r4, 800687c <_malloc_r+0x90>
 8006824:	4629      	mov	r1, r5
 8006826:	4638      	mov	r0, r7
 8006828:	f7ff ffc0 	bl	80067ac <sbrk_aligned>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	4604      	mov	r4, r0
 8006830:	d155      	bne.n	80068de <_malloc_r+0xf2>
 8006832:	f8d8 4000 	ldr.w	r4, [r8]
 8006836:	4626      	mov	r6, r4
 8006838:	2e00      	cmp	r6, #0
 800683a:	d145      	bne.n	80068c8 <_malloc_r+0xdc>
 800683c:	2c00      	cmp	r4, #0
 800683e:	d048      	beq.n	80068d2 <_malloc_r+0xe6>
 8006840:	6823      	ldr	r3, [r4, #0]
 8006842:	4631      	mov	r1, r6
 8006844:	4638      	mov	r0, r7
 8006846:	eb04 0903 	add.w	r9, r4, r3
 800684a:	f000 fdf7 	bl	800743c <_sbrk_r>
 800684e:	4581      	cmp	r9, r0
 8006850:	d13f      	bne.n	80068d2 <_malloc_r+0xe6>
 8006852:	6821      	ldr	r1, [r4, #0]
 8006854:	1a6d      	subs	r5, r5, r1
 8006856:	4629      	mov	r1, r5
 8006858:	4638      	mov	r0, r7
 800685a:	f7ff ffa7 	bl	80067ac <sbrk_aligned>
 800685e:	3001      	adds	r0, #1
 8006860:	d037      	beq.n	80068d2 <_malloc_r+0xe6>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	442b      	add	r3, r5
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	f8d8 3000 	ldr.w	r3, [r8]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d038      	beq.n	80068e2 <_malloc_r+0xf6>
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	42a2      	cmp	r2, r4
 8006874:	d12b      	bne.n	80068ce <_malloc_r+0xe2>
 8006876:	2200      	movs	r2, #0
 8006878:	605a      	str	r2, [r3, #4]
 800687a:	e00f      	b.n	800689c <_malloc_r+0xb0>
 800687c:	6822      	ldr	r2, [r4, #0]
 800687e:	1b52      	subs	r2, r2, r5
 8006880:	d41f      	bmi.n	80068c2 <_malloc_r+0xd6>
 8006882:	2a0b      	cmp	r2, #11
 8006884:	d917      	bls.n	80068b6 <_malloc_r+0xca>
 8006886:	1961      	adds	r1, r4, r5
 8006888:	42a3      	cmp	r3, r4
 800688a:	6025      	str	r5, [r4, #0]
 800688c:	bf18      	it	ne
 800688e:	6059      	strne	r1, [r3, #4]
 8006890:	6863      	ldr	r3, [r4, #4]
 8006892:	bf08      	it	eq
 8006894:	f8c8 1000 	streq.w	r1, [r8]
 8006898:	5162      	str	r2, [r4, r5]
 800689a:	604b      	str	r3, [r1, #4]
 800689c:	4638      	mov	r0, r7
 800689e:	f104 060b 	add.w	r6, r4, #11
 80068a2:	f000 f829 	bl	80068f8 <__malloc_unlock>
 80068a6:	f026 0607 	bic.w	r6, r6, #7
 80068aa:	1d23      	adds	r3, r4, #4
 80068ac:	1af2      	subs	r2, r6, r3
 80068ae:	d0ae      	beq.n	800680e <_malloc_r+0x22>
 80068b0:	1b9b      	subs	r3, r3, r6
 80068b2:	50a3      	str	r3, [r4, r2]
 80068b4:	e7ab      	b.n	800680e <_malloc_r+0x22>
 80068b6:	42a3      	cmp	r3, r4
 80068b8:	6862      	ldr	r2, [r4, #4]
 80068ba:	d1dd      	bne.n	8006878 <_malloc_r+0x8c>
 80068bc:	f8c8 2000 	str.w	r2, [r8]
 80068c0:	e7ec      	b.n	800689c <_malloc_r+0xb0>
 80068c2:	4623      	mov	r3, r4
 80068c4:	6864      	ldr	r4, [r4, #4]
 80068c6:	e7ac      	b.n	8006822 <_malloc_r+0x36>
 80068c8:	4634      	mov	r4, r6
 80068ca:	6876      	ldr	r6, [r6, #4]
 80068cc:	e7b4      	b.n	8006838 <_malloc_r+0x4c>
 80068ce:	4613      	mov	r3, r2
 80068d0:	e7cc      	b.n	800686c <_malloc_r+0x80>
 80068d2:	230c      	movs	r3, #12
 80068d4:	603b      	str	r3, [r7, #0]
 80068d6:	4638      	mov	r0, r7
 80068d8:	f000 f80e 	bl	80068f8 <__malloc_unlock>
 80068dc:	e797      	b.n	800680e <_malloc_r+0x22>
 80068de:	6025      	str	r5, [r4, #0]
 80068e0:	e7dc      	b.n	800689c <_malloc_r+0xb0>
 80068e2:	605b      	str	r3, [r3, #4]
 80068e4:	deff      	udf	#255	; 0xff
 80068e6:	bf00      	nop
 80068e8:	200004c0 	.word	0x200004c0

080068ec <__malloc_lock>:
 80068ec:	4801      	ldr	r0, [pc, #4]	; (80068f4 <__malloc_lock+0x8>)
 80068ee:	f7ff b88c 	b.w	8005a0a <__retarget_lock_acquire_recursive>
 80068f2:	bf00      	nop
 80068f4:	200004bc 	.word	0x200004bc

080068f8 <__malloc_unlock>:
 80068f8:	4801      	ldr	r0, [pc, #4]	; (8006900 <__malloc_unlock+0x8>)
 80068fa:	f7ff b887 	b.w	8005a0c <__retarget_lock_release_recursive>
 80068fe:	bf00      	nop
 8006900:	200004bc 	.word	0x200004bc

08006904 <_Balloc>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	69c6      	ldr	r6, [r0, #28]
 8006908:	4604      	mov	r4, r0
 800690a:	460d      	mov	r5, r1
 800690c:	b976      	cbnz	r6, 800692c <_Balloc+0x28>
 800690e:	2010      	movs	r0, #16
 8006910:	f7ff ff44 	bl	800679c <malloc>
 8006914:	4602      	mov	r2, r0
 8006916:	61e0      	str	r0, [r4, #28]
 8006918:	b920      	cbnz	r0, 8006924 <_Balloc+0x20>
 800691a:	4b18      	ldr	r3, [pc, #96]	; (800697c <_Balloc+0x78>)
 800691c:	4818      	ldr	r0, [pc, #96]	; (8006980 <_Balloc+0x7c>)
 800691e:	216b      	movs	r1, #107	; 0x6b
 8006920:	f000 fdaa 	bl	8007478 <__assert_func>
 8006924:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006928:	6006      	str	r6, [r0, #0]
 800692a:	60c6      	str	r6, [r0, #12]
 800692c:	69e6      	ldr	r6, [r4, #28]
 800692e:	68f3      	ldr	r3, [r6, #12]
 8006930:	b183      	cbz	r3, 8006954 <_Balloc+0x50>
 8006932:	69e3      	ldr	r3, [r4, #28]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800693a:	b9b8      	cbnz	r0, 800696c <_Balloc+0x68>
 800693c:	2101      	movs	r1, #1
 800693e:	fa01 f605 	lsl.w	r6, r1, r5
 8006942:	1d72      	adds	r2, r6, #5
 8006944:	0092      	lsls	r2, r2, #2
 8006946:	4620      	mov	r0, r4
 8006948:	f000 fdb4 	bl	80074b4 <_calloc_r>
 800694c:	b160      	cbz	r0, 8006968 <_Balloc+0x64>
 800694e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006952:	e00e      	b.n	8006972 <_Balloc+0x6e>
 8006954:	2221      	movs	r2, #33	; 0x21
 8006956:	2104      	movs	r1, #4
 8006958:	4620      	mov	r0, r4
 800695a:	f000 fdab 	bl	80074b4 <_calloc_r>
 800695e:	69e3      	ldr	r3, [r4, #28]
 8006960:	60f0      	str	r0, [r6, #12]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1e4      	bne.n	8006932 <_Balloc+0x2e>
 8006968:	2000      	movs	r0, #0
 800696a:	bd70      	pop	{r4, r5, r6, pc}
 800696c:	6802      	ldr	r2, [r0, #0]
 800696e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006972:	2300      	movs	r3, #0
 8006974:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006978:	e7f7      	b.n	800696a <_Balloc+0x66>
 800697a:	bf00      	nop
 800697c:	08007dc1 	.word	0x08007dc1
 8006980:	08007e41 	.word	0x08007e41

08006984 <_Bfree>:
 8006984:	b570      	push	{r4, r5, r6, lr}
 8006986:	69c6      	ldr	r6, [r0, #28]
 8006988:	4605      	mov	r5, r0
 800698a:	460c      	mov	r4, r1
 800698c:	b976      	cbnz	r6, 80069ac <_Bfree+0x28>
 800698e:	2010      	movs	r0, #16
 8006990:	f7ff ff04 	bl	800679c <malloc>
 8006994:	4602      	mov	r2, r0
 8006996:	61e8      	str	r0, [r5, #28]
 8006998:	b920      	cbnz	r0, 80069a4 <_Bfree+0x20>
 800699a:	4b09      	ldr	r3, [pc, #36]	; (80069c0 <_Bfree+0x3c>)
 800699c:	4809      	ldr	r0, [pc, #36]	; (80069c4 <_Bfree+0x40>)
 800699e:	218f      	movs	r1, #143	; 0x8f
 80069a0:	f000 fd6a 	bl	8007478 <__assert_func>
 80069a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80069a8:	6006      	str	r6, [r0, #0]
 80069aa:	60c6      	str	r6, [r0, #12]
 80069ac:	b13c      	cbz	r4, 80069be <_Bfree+0x3a>
 80069ae:	69eb      	ldr	r3, [r5, #28]
 80069b0:	6862      	ldr	r2, [r4, #4]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80069b8:	6021      	str	r1, [r4, #0]
 80069ba:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80069be:	bd70      	pop	{r4, r5, r6, pc}
 80069c0:	08007dc1 	.word	0x08007dc1
 80069c4:	08007e41 	.word	0x08007e41

080069c8 <__multadd>:
 80069c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069cc:	690d      	ldr	r5, [r1, #16]
 80069ce:	4607      	mov	r7, r0
 80069d0:	460c      	mov	r4, r1
 80069d2:	461e      	mov	r6, r3
 80069d4:	f101 0c14 	add.w	ip, r1, #20
 80069d8:	2000      	movs	r0, #0
 80069da:	f8dc 3000 	ldr.w	r3, [ip]
 80069de:	b299      	uxth	r1, r3
 80069e0:	fb02 6101 	mla	r1, r2, r1, r6
 80069e4:	0c1e      	lsrs	r6, r3, #16
 80069e6:	0c0b      	lsrs	r3, r1, #16
 80069e8:	fb02 3306 	mla	r3, r2, r6, r3
 80069ec:	b289      	uxth	r1, r1
 80069ee:	3001      	adds	r0, #1
 80069f0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80069f4:	4285      	cmp	r5, r0
 80069f6:	f84c 1b04 	str.w	r1, [ip], #4
 80069fa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80069fe:	dcec      	bgt.n	80069da <__multadd+0x12>
 8006a00:	b30e      	cbz	r6, 8006a46 <__multadd+0x7e>
 8006a02:	68a3      	ldr	r3, [r4, #8]
 8006a04:	42ab      	cmp	r3, r5
 8006a06:	dc19      	bgt.n	8006a3c <__multadd+0x74>
 8006a08:	6861      	ldr	r1, [r4, #4]
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	3101      	adds	r1, #1
 8006a0e:	f7ff ff79 	bl	8006904 <_Balloc>
 8006a12:	4680      	mov	r8, r0
 8006a14:	b928      	cbnz	r0, 8006a22 <__multadd+0x5a>
 8006a16:	4602      	mov	r2, r0
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <__multadd+0x84>)
 8006a1a:	480d      	ldr	r0, [pc, #52]	; (8006a50 <__multadd+0x88>)
 8006a1c:	21ba      	movs	r1, #186	; 0xba
 8006a1e:	f000 fd2b 	bl	8007478 <__assert_func>
 8006a22:	6922      	ldr	r2, [r4, #16]
 8006a24:	3202      	adds	r2, #2
 8006a26:	f104 010c 	add.w	r1, r4, #12
 8006a2a:	0092      	lsls	r2, r2, #2
 8006a2c:	300c      	adds	r0, #12
 8006a2e:	f000 fd15 	bl	800745c <memcpy>
 8006a32:	4621      	mov	r1, r4
 8006a34:	4638      	mov	r0, r7
 8006a36:	f7ff ffa5 	bl	8006984 <_Bfree>
 8006a3a:	4644      	mov	r4, r8
 8006a3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006a40:	3501      	adds	r5, #1
 8006a42:	615e      	str	r6, [r3, #20]
 8006a44:	6125      	str	r5, [r4, #16]
 8006a46:	4620      	mov	r0, r4
 8006a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a4c:	08007e30 	.word	0x08007e30
 8006a50:	08007e41 	.word	0x08007e41

08006a54 <__hi0bits>:
 8006a54:	0c03      	lsrs	r3, r0, #16
 8006a56:	041b      	lsls	r3, r3, #16
 8006a58:	b9d3      	cbnz	r3, 8006a90 <__hi0bits+0x3c>
 8006a5a:	0400      	lsls	r0, r0, #16
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006a62:	bf04      	itt	eq
 8006a64:	0200      	lsleq	r0, r0, #8
 8006a66:	3308      	addeq	r3, #8
 8006a68:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006a6c:	bf04      	itt	eq
 8006a6e:	0100      	lsleq	r0, r0, #4
 8006a70:	3304      	addeq	r3, #4
 8006a72:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006a76:	bf04      	itt	eq
 8006a78:	0080      	lsleq	r0, r0, #2
 8006a7a:	3302      	addeq	r3, #2
 8006a7c:	2800      	cmp	r0, #0
 8006a7e:	db05      	blt.n	8006a8c <__hi0bits+0x38>
 8006a80:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006a84:	f103 0301 	add.w	r3, r3, #1
 8006a88:	bf08      	it	eq
 8006a8a:	2320      	moveq	r3, #32
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	4770      	bx	lr
 8006a90:	2300      	movs	r3, #0
 8006a92:	e7e4      	b.n	8006a5e <__hi0bits+0xa>

08006a94 <__lo0bits>:
 8006a94:	6803      	ldr	r3, [r0, #0]
 8006a96:	f013 0207 	ands.w	r2, r3, #7
 8006a9a:	d00c      	beq.n	8006ab6 <__lo0bits+0x22>
 8006a9c:	07d9      	lsls	r1, r3, #31
 8006a9e:	d422      	bmi.n	8006ae6 <__lo0bits+0x52>
 8006aa0:	079a      	lsls	r2, r3, #30
 8006aa2:	bf49      	itett	mi
 8006aa4:	085b      	lsrmi	r3, r3, #1
 8006aa6:	089b      	lsrpl	r3, r3, #2
 8006aa8:	6003      	strmi	r3, [r0, #0]
 8006aaa:	2201      	movmi	r2, #1
 8006aac:	bf5c      	itt	pl
 8006aae:	6003      	strpl	r3, [r0, #0]
 8006ab0:	2202      	movpl	r2, #2
 8006ab2:	4610      	mov	r0, r2
 8006ab4:	4770      	bx	lr
 8006ab6:	b299      	uxth	r1, r3
 8006ab8:	b909      	cbnz	r1, 8006abe <__lo0bits+0x2a>
 8006aba:	0c1b      	lsrs	r3, r3, #16
 8006abc:	2210      	movs	r2, #16
 8006abe:	b2d9      	uxtb	r1, r3
 8006ac0:	b909      	cbnz	r1, 8006ac6 <__lo0bits+0x32>
 8006ac2:	3208      	adds	r2, #8
 8006ac4:	0a1b      	lsrs	r3, r3, #8
 8006ac6:	0719      	lsls	r1, r3, #28
 8006ac8:	bf04      	itt	eq
 8006aca:	091b      	lsreq	r3, r3, #4
 8006acc:	3204      	addeq	r2, #4
 8006ace:	0799      	lsls	r1, r3, #30
 8006ad0:	bf04      	itt	eq
 8006ad2:	089b      	lsreq	r3, r3, #2
 8006ad4:	3202      	addeq	r2, #2
 8006ad6:	07d9      	lsls	r1, r3, #31
 8006ad8:	d403      	bmi.n	8006ae2 <__lo0bits+0x4e>
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	f102 0201 	add.w	r2, r2, #1
 8006ae0:	d003      	beq.n	8006aea <__lo0bits+0x56>
 8006ae2:	6003      	str	r3, [r0, #0]
 8006ae4:	e7e5      	b.n	8006ab2 <__lo0bits+0x1e>
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	e7e3      	b.n	8006ab2 <__lo0bits+0x1e>
 8006aea:	2220      	movs	r2, #32
 8006aec:	e7e1      	b.n	8006ab2 <__lo0bits+0x1e>
	...

08006af0 <__i2b>:
 8006af0:	b510      	push	{r4, lr}
 8006af2:	460c      	mov	r4, r1
 8006af4:	2101      	movs	r1, #1
 8006af6:	f7ff ff05 	bl	8006904 <_Balloc>
 8006afa:	4602      	mov	r2, r0
 8006afc:	b928      	cbnz	r0, 8006b0a <__i2b+0x1a>
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <__i2b+0x24>)
 8006b00:	4805      	ldr	r0, [pc, #20]	; (8006b18 <__i2b+0x28>)
 8006b02:	f240 1145 	movw	r1, #325	; 0x145
 8006b06:	f000 fcb7 	bl	8007478 <__assert_func>
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	6144      	str	r4, [r0, #20]
 8006b0e:	6103      	str	r3, [r0, #16]
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	bf00      	nop
 8006b14:	08007e30 	.word	0x08007e30
 8006b18:	08007e41 	.word	0x08007e41

08006b1c <__multiply>:
 8006b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b20:	4691      	mov	r9, r2
 8006b22:	690a      	ldr	r2, [r1, #16]
 8006b24:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	bfb8      	it	lt
 8006b2c:	460b      	movlt	r3, r1
 8006b2e:	460c      	mov	r4, r1
 8006b30:	bfbc      	itt	lt
 8006b32:	464c      	movlt	r4, r9
 8006b34:	4699      	movlt	r9, r3
 8006b36:	6927      	ldr	r7, [r4, #16]
 8006b38:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006b3c:	68a3      	ldr	r3, [r4, #8]
 8006b3e:	6861      	ldr	r1, [r4, #4]
 8006b40:	eb07 060a 	add.w	r6, r7, sl
 8006b44:	42b3      	cmp	r3, r6
 8006b46:	b085      	sub	sp, #20
 8006b48:	bfb8      	it	lt
 8006b4a:	3101      	addlt	r1, #1
 8006b4c:	f7ff feda 	bl	8006904 <_Balloc>
 8006b50:	b930      	cbnz	r0, 8006b60 <__multiply+0x44>
 8006b52:	4602      	mov	r2, r0
 8006b54:	4b44      	ldr	r3, [pc, #272]	; (8006c68 <__multiply+0x14c>)
 8006b56:	4845      	ldr	r0, [pc, #276]	; (8006c6c <__multiply+0x150>)
 8006b58:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006b5c:	f000 fc8c 	bl	8007478 <__assert_func>
 8006b60:	f100 0514 	add.w	r5, r0, #20
 8006b64:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006b68:	462b      	mov	r3, r5
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	4543      	cmp	r3, r8
 8006b6e:	d321      	bcc.n	8006bb4 <__multiply+0x98>
 8006b70:	f104 0314 	add.w	r3, r4, #20
 8006b74:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006b78:	f109 0314 	add.w	r3, r9, #20
 8006b7c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006b80:	9202      	str	r2, [sp, #8]
 8006b82:	1b3a      	subs	r2, r7, r4
 8006b84:	3a15      	subs	r2, #21
 8006b86:	f022 0203 	bic.w	r2, r2, #3
 8006b8a:	3204      	adds	r2, #4
 8006b8c:	f104 0115 	add.w	r1, r4, #21
 8006b90:	428f      	cmp	r7, r1
 8006b92:	bf38      	it	cc
 8006b94:	2204      	movcc	r2, #4
 8006b96:	9201      	str	r2, [sp, #4]
 8006b98:	9a02      	ldr	r2, [sp, #8]
 8006b9a:	9303      	str	r3, [sp, #12]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d80c      	bhi.n	8006bba <__multiply+0x9e>
 8006ba0:	2e00      	cmp	r6, #0
 8006ba2:	dd03      	ble.n	8006bac <__multiply+0x90>
 8006ba4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d05b      	beq.n	8006c64 <__multiply+0x148>
 8006bac:	6106      	str	r6, [r0, #16]
 8006bae:	b005      	add	sp, #20
 8006bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bb4:	f843 2b04 	str.w	r2, [r3], #4
 8006bb8:	e7d8      	b.n	8006b6c <__multiply+0x50>
 8006bba:	f8b3 a000 	ldrh.w	sl, [r3]
 8006bbe:	f1ba 0f00 	cmp.w	sl, #0
 8006bc2:	d024      	beq.n	8006c0e <__multiply+0xf2>
 8006bc4:	f104 0e14 	add.w	lr, r4, #20
 8006bc8:	46a9      	mov	r9, r5
 8006bca:	f04f 0c00 	mov.w	ip, #0
 8006bce:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006bd2:	f8d9 1000 	ldr.w	r1, [r9]
 8006bd6:	fa1f fb82 	uxth.w	fp, r2
 8006bda:	b289      	uxth	r1, r1
 8006bdc:	fb0a 110b 	mla	r1, sl, fp, r1
 8006be0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006be4:	f8d9 2000 	ldr.w	r2, [r9]
 8006be8:	4461      	add	r1, ip
 8006bea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006bee:	fb0a c20b 	mla	r2, sl, fp, ip
 8006bf2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006bf6:	b289      	uxth	r1, r1
 8006bf8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006bfc:	4577      	cmp	r7, lr
 8006bfe:	f849 1b04 	str.w	r1, [r9], #4
 8006c02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006c06:	d8e2      	bhi.n	8006bce <__multiply+0xb2>
 8006c08:	9a01      	ldr	r2, [sp, #4]
 8006c0a:	f845 c002 	str.w	ip, [r5, r2]
 8006c0e:	9a03      	ldr	r2, [sp, #12]
 8006c10:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006c14:	3304      	adds	r3, #4
 8006c16:	f1b9 0f00 	cmp.w	r9, #0
 8006c1a:	d021      	beq.n	8006c60 <__multiply+0x144>
 8006c1c:	6829      	ldr	r1, [r5, #0]
 8006c1e:	f104 0c14 	add.w	ip, r4, #20
 8006c22:	46ae      	mov	lr, r5
 8006c24:	f04f 0a00 	mov.w	sl, #0
 8006c28:	f8bc b000 	ldrh.w	fp, [ip]
 8006c2c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006c30:	fb09 220b 	mla	r2, r9, fp, r2
 8006c34:	4452      	add	r2, sl
 8006c36:	b289      	uxth	r1, r1
 8006c38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006c3c:	f84e 1b04 	str.w	r1, [lr], #4
 8006c40:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006c44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c48:	f8be 1000 	ldrh.w	r1, [lr]
 8006c4c:	fb09 110a 	mla	r1, r9, sl, r1
 8006c50:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006c54:	4567      	cmp	r7, ip
 8006c56:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006c5a:	d8e5      	bhi.n	8006c28 <__multiply+0x10c>
 8006c5c:	9a01      	ldr	r2, [sp, #4]
 8006c5e:	50a9      	str	r1, [r5, r2]
 8006c60:	3504      	adds	r5, #4
 8006c62:	e799      	b.n	8006b98 <__multiply+0x7c>
 8006c64:	3e01      	subs	r6, #1
 8006c66:	e79b      	b.n	8006ba0 <__multiply+0x84>
 8006c68:	08007e30 	.word	0x08007e30
 8006c6c:	08007e41 	.word	0x08007e41

08006c70 <__pow5mult>:
 8006c70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c74:	4615      	mov	r5, r2
 8006c76:	f012 0203 	ands.w	r2, r2, #3
 8006c7a:	4606      	mov	r6, r0
 8006c7c:	460f      	mov	r7, r1
 8006c7e:	d007      	beq.n	8006c90 <__pow5mult+0x20>
 8006c80:	4c25      	ldr	r4, [pc, #148]	; (8006d18 <__pow5mult+0xa8>)
 8006c82:	3a01      	subs	r2, #1
 8006c84:	2300      	movs	r3, #0
 8006c86:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006c8a:	f7ff fe9d 	bl	80069c8 <__multadd>
 8006c8e:	4607      	mov	r7, r0
 8006c90:	10ad      	asrs	r5, r5, #2
 8006c92:	d03d      	beq.n	8006d10 <__pow5mult+0xa0>
 8006c94:	69f4      	ldr	r4, [r6, #28]
 8006c96:	b97c      	cbnz	r4, 8006cb8 <__pow5mult+0x48>
 8006c98:	2010      	movs	r0, #16
 8006c9a:	f7ff fd7f 	bl	800679c <malloc>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	61f0      	str	r0, [r6, #28]
 8006ca2:	b928      	cbnz	r0, 8006cb0 <__pow5mult+0x40>
 8006ca4:	4b1d      	ldr	r3, [pc, #116]	; (8006d1c <__pow5mult+0xac>)
 8006ca6:	481e      	ldr	r0, [pc, #120]	; (8006d20 <__pow5mult+0xb0>)
 8006ca8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006cac:	f000 fbe4 	bl	8007478 <__assert_func>
 8006cb0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006cb4:	6004      	str	r4, [r0, #0]
 8006cb6:	60c4      	str	r4, [r0, #12]
 8006cb8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006cbc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006cc0:	b94c      	cbnz	r4, 8006cd6 <__pow5mult+0x66>
 8006cc2:	f240 2171 	movw	r1, #625	; 0x271
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff ff12 	bl	8006af0 <__i2b>
 8006ccc:	2300      	movs	r3, #0
 8006cce:	f8c8 0008 	str.w	r0, [r8, #8]
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	6003      	str	r3, [r0, #0]
 8006cd6:	f04f 0900 	mov.w	r9, #0
 8006cda:	07eb      	lsls	r3, r5, #31
 8006cdc:	d50a      	bpl.n	8006cf4 <__pow5mult+0x84>
 8006cde:	4639      	mov	r1, r7
 8006ce0:	4622      	mov	r2, r4
 8006ce2:	4630      	mov	r0, r6
 8006ce4:	f7ff ff1a 	bl	8006b1c <__multiply>
 8006ce8:	4639      	mov	r1, r7
 8006cea:	4680      	mov	r8, r0
 8006cec:	4630      	mov	r0, r6
 8006cee:	f7ff fe49 	bl	8006984 <_Bfree>
 8006cf2:	4647      	mov	r7, r8
 8006cf4:	106d      	asrs	r5, r5, #1
 8006cf6:	d00b      	beq.n	8006d10 <__pow5mult+0xa0>
 8006cf8:	6820      	ldr	r0, [r4, #0]
 8006cfa:	b938      	cbnz	r0, 8006d0c <__pow5mult+0x9c>
 8006cfc:	4622      	mov	r2, r4
 8006cfe:	4621      	mov	r1, r4
 8006d00:	4630      	mov	r0, r6
 8006d02:	f7ff ff0b 	bl	8006b1c <__multiply>
 8006d06:	6020      	str	r0, [r4, #0]
 8006d08:	f8c0 9000 	str.w	r9, [r0]
 8006d0c:	4604      	mov	r4, r0
 8006d0e:	e7e4      	b.n	8006cda <__pow5mult+0x6a>
 8006d10:	4638      	mov	r0, r7
 8006d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d16:	bf00      	nop
 8006d18:	08007f90 	.word	0x08007f90
 8006d1c:	08007dc1 	.word	0x08007dc1
 8006d20:	08007e41 	.word	0x08007e41

08006d24 <__lshift>:
 8006d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d28:	460c      	mov	r4, r1
 8006d2a:	6849      	ldr	r1, [r1, #4]
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006d32:	68a3      	ldr	r3, [r4, #8]
 8006d34:	4607      	mov	r7, r0
 8006d36:	4691      	mov	r9, r2
 8006d38:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d3c:	f108 0601 	add.w	r6, r8, #1
 8006d40:	42b3      	cmp	r3, r6
 8006d42:	db0b      	blt.n	8006d5c <__lshift+0x38>
 8006d44:	4638      	mov	r0, r7
 8006d46:	f7ff fddd 	bl	8006904 <_Balloc>
 8006d4a:	4605      	mov	r5, r0
 8006d4c:	b948      	cbnz	r0, 8006d62 <__lshift+0x3e>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	4b28      	ldr	r3, [pc, #160]	; (8006df4 <__lshift+0xd0>)
 8006d52:	4829      	ldr	r0, [pc, #164]	; (8006df8 <__lshift+0xd4>)
 8006d54:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006d58:	f000 fb8e 	bl	8007478 <__assert_func>
 8006d5c:	3101      	adds	r1, #1
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	e7ee      	b.n	8006d40 <__lshift+0x1c>
 8006d62:	2300      	movs	r3, #0
 8006d64:	f100 0114 	add.w	r1, r0, #20
 8006d68:	f100 0210 	add.w	r2, r0, #16
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	4553      	cmp	r3, sl
 8006d70:	db33      	blt.n	8006dda <__lshift+0xb6>
 8006d72:	6920      	ldr	r0, [r4, #16]
 8006d74:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006d78:	f104 0314 	add.w	r3, r4, #20
 8006d7c:	f019 091f 	ands.w	r9, r9, #31
 8006d80:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006d84:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006d88:	d02b      	beq.n	8006de2 <__lshift+0xbe>
 8006d8a:	f1c9 0e20 	rsb	lr, r9, #32
 8006d8e:	468a      	mov	sl, r1
 8006d90:	2200      	movs	r2, #0
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	fa00 f009 	lsl.w	r0, r0, r9
 8006d98:	4310      	orrs	r0, r2
 8006d9a:	f84a 0b04 	str.w	r0, [sl], #4
 8006d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006da2:	459c      	cmp	ip, r3
 8006da4:	fa22 f20e 	lsr.w	r2, r2, lr
 8006da8:	d8f3      	bhi.n	8006d92 <__lshift+0x6e>
 8006daa:	ebac 0304 	sub.w	r3, ip, r4
 8006dae:	3b15      	subs	r3, #21
 8006db0:	f023 0303 	bic.w	r3, r3, #3
 8006db4:	3304      	adds	r3, #4
 8006db6:	f104 0015 	add.w	r0, r4, #21
 8006dba:	4584      	cmp	ip, r0
 8006dbc:	bf38      	it	cc
 8006dbe:	2304      	movcc	r3, #4
 8006dc0:	50ca      	str	r2, [r1, r3]
 8006dc2:	b10a      	cbz	r2, 8006dc8 <__lshift+0xa4>
 8006dc4:	f108 0602 	add.w	r6, r8, #2
 8006dc8:	3e01      	subs	r6, #1
 8006dca:	4638      	mov	r0, r7
 8006dcc:	612e      	str	r6, [r5, #16]
 8006dce:	4621      	mov	r1, r4
 8006dd0:	f7ff fdd8 	bl	8006984 <_Bfree>
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dda:	f842 0f04 	str.w	r0, [r2, #4]!
 8006dde:	3301      	adds	r3, #1
 8006de0:	e7c5      	b.n	8006d6e <__lshift+0x4a>
 8006de2:	3904      	subs	r1, #4
 8006de4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006de8:	f841 2f04 	str.w	r2, [r1, #4]!
 8006dec:	459c      	cmp	ip, r3
 8006dee:	d8f9      	bhi.n	8006de4 <__lshift+0xc0>
 8006df0:	e7ea      	b.n	8006dc8 <__lshift+0xa4>
 8006df2:	bf00      	nop
 8006df4:	08007e30 	.word	0x08007e30
 8006df8:	08007e41 	.word	0x08007e41

08006dfc <__mcmp>:
 8006dfc:	b530      	push	{r4, r5, lr}
 8006dfe:	6902      	ldr	r2, [r0, #16]
 8006e00:	690c      	ldr	r4, [r1, #16]
 8006e02:	1b12      	subs	r2, r2, r4
 8006e04:	d10e      	bne.n	8006e24 <__mcmp+0x28>
 8006e06:	f100 0314 	add.w	r3, r0, #20
 8006e0a:	3114      	adds	r1, #20
 8006e0c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006e10:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006e14:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006e18:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006e1c:	42a5      	cmp	r5, r4
 8006e1e:	d003      	beq.n	8006e28 <__mcmp+0x2c>
 8006e20:	d305      	bcc.n	8006e2e <__mcmp+0x32>
 8006e22:	2201      	movs	r2, #1
 8006e24:	4610      	mov	r0, r2
 8006e26:	bd30      	pop	{r4, r5, pc}
 8006e28:	4283      	cmp	r3, r0
 8006e2a:	d3f3      	bcc.n	8006e14 <__mcmp+0x18>
 8006e2c:	e7fa      	b.n	8006e24 <__mcmp+0x28>
 8006e2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006e32:	e7f7      	b.n	8006e24 <__mcmp+0x28>

08006e34 <__mdiff>:
 8006e34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e38:	460c      	mov	r4, r1
 8006e3a:	4606      	mov	r6, r0
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4620      	mov	r0, r4
 8006e40:	4690      	mov	r8, r2
 8006e42:	f7ff ffdb 	bl	8006dfc <__mcmp>
 8006e46:	1e05      	subs	r5, r0, #0
 8006e48:	d110      	bne.n	8006e6c <__mdiff+0x38>
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7ff fd59 	bl	8006904 <_Balloc>
 8006e52:	b930      	cbnz	r0, 8006e62 <__mdiff+0x2e>
 8006e54:	4b3a      	ldr	r3, [pc, #232]	; (8006f40 <__mdiff+0x10c>)
 8006e56:	4602      	mov	r2, r0
 8006e58:	f240 2137 	movw	r1, #567	; 0x237
 8006e5c:	4839      	ldr	r0, [pc, #228]	; (8006f44 <__mdiff+0x110>)
 8006e5e:	f000 fb0b 	bl	8007478 <__assert_func>
 8006e62:	2301      	movs	r3, #1
 8006e64:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006e68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e6c:	bfa4      	itt	ge
 8006e6e:	4643      	movge	r3, r8
 8006e70:	46a0      	movge	r8, r4
 8006e72:	4630      	mov	r0, r6
 8006e74:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006e78:	bfa6      	itte	ge
 8006e7a:	461c      	movge	r4, r3
 8006e7c:	2500      	movge	r5, #0
 8006e7e:	2501      	movlt	r5, #1
 8006e80:	f7ff fd40 	bl	8006904 <_Balloc>
 8006e84:	b920      	cbnz	r0, 8006e90 <__mdiff+0x5c>
 8006e86:	4b2e      	ldr	r3, [pc, #184]	; (8006f40 <__mdiff+0x10c>)
 8006e88:	4602      	mov	r2, r0
 8006e8a:	f240 2145 	movw	r1, #581	; 0x245
 8006e8e:	e7e5      	b.n	8006e5c <__mdiff+0x28>
 8006e90:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006e94:	6926      	ldr	r6, [r4, #16]
 8006e96:	60c5      	str	r5, [r0, #12]
 8006e98:	f104 0914 	add.w	r9, r4, #20
 8006e9c:	f108 0514 	add.w	r5, r8, #20
 8006ea0:	f100 0e14 	add.w	lr, r0, #20
 8006ea4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ea8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006eac:	f108 0210 	add.w	r2, r8, #16
 8006eb0:	46f2      	mov	sl, lr
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006eb8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006ebc:	fa11 f88b 	uxtah	r8, r1, fp
 8006ec0:	b299      	uxth	r1, r3
 8006ec2:	0c1b      	lsrs	r3, r3, #16
 8006ec4:	eba8 0801 	sub.w	r8, r8, r1
 8006ec8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006ecc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ed0:	fa1f f888 	uxth.w	r8, r8
 8006ed4:	1419      	asrs	r1, r3, #16
 8006ed6:	454e      	cmp	r6, r9
 8006ed8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006edc:	f84a 3b04 	str.w	r3, [sl], #4
 8006ee0:	d8e8      	bhi.n	8006eb4 <__mdiff+0x80>
 8006ee2:	1b33      	subs	r3, r6, r4
 8006ee4:	3b15      	subs	r3, #21
 8006ee6:	f023 0303 	bic.w	r3, r3, #3
 8006eea:	3304      	adds	r3, #4
 8006eec:	3415      	adds	r4, #21
 8006eee:	42a6      	cmp	r6, r4
 8006ef0:	bf38      	it	cc
 8006ef2:	2304      	movcc	r3, #4
 8006ef4:	441d      	add	r5, r3
 8006ef6:	4473      	add	r3, lr
 8006ef8:	469e      	mov	lr, r3
 8006efa:	462e      	mov	r6, r5
 8006efc:	4566      	cmp	r6, ip
 8006efe:	d30e      	bcc.n	8006f1e <__mdiff+0xea>
 8006f00:	f10c 0203 	add.w	r2, ip, #3
 8006f04:	1b52      	subs	r2, r2, r5
 8006f06:	f022 0203 	bic.w	r2, r2, #3
 8006f0a:	3d03      	subs	r5, #3
 8006f0c:	45ac      	cmp	ip, r5
 8006f0e:	bf38      	it	cc
 8006f10:	2200      	movcc	r2, #0
 8006f12:	4413      	add	r3, r2
 8006f14:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006f18:	b17a      	cbz	r2, 8006f3a <__mdiff+0x106>
 8006f1a:	6107      	str	r7, [r0, #16]
 8006f1c:	e7a4      	b.n	8006e68 <__mdiff+0x34>
 8006f1e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006f22:	fa11 f288 	uxtah	r2, r1, r8
 8006f26:	1414      	asrs	r4, r2, #16
 8006f28:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006f2c:	b292      	uxth	r2, r2
 8006f2e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006f32:	f84e 2b04 	str.w	r2, [lr], #4
 8006f36:	1421      	asrs	r1, r4, #16
 8006f38:	e7e0      	b.n	8006efc <__mdiff+0xc8>
 8006f3a:	3f01      	subs	r7, #1
 8006f3c:	e7ea      	b.n	8006f14 <__mdiff+0xe0>
 8006f3e:	bf00      	nop
 8006f40:	08007e30 	.word	0x08007e30
 8006f44:	08007e41 	.word	0x08007e41

08006f48 <__d2b>:
 8006f48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f4c:	460f      	mov	r7, r1
 8006f4e:	2101      	movs	r1, #1
 8006f50:	ec59 8b10 	vmov	r8, r9, d0
 8006f54:	4616      	mov	r6, r2
 8006f56:	f7ff fcd5 	bl	8006904 <_Balloc>
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	b930      	cbnz	r0, 8006f6c <__d2b+0x24>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	4b24      	ldr	r3, [pc, #144]	; (8006ff4 <__d2b+0xac>)
 8006f62:	4825      	ldr	r0, [pc, #148]	; (8006ff8 <__d2b+0xb0>)
 8006f64:	f240 310f 	movw	r1, #783	; 0x30f
 8006f68:	f000 fa86 	bl	8007478 <__assert_func>
 8006f6c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f70:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f74:	bb2d      	cbnz	r5, 8006fc2 <__d2b+0x7a>
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	f1b8 0300 	subs.w	r3, r8, #0
 8006f7c:	d026      	beq.n	8006fcc <__d2b+0x84>
 8006f7e:	4668      	mov	r0, sp
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	f7ff fd87 	bl	8006a94 <__lo0bits>
 8006f86:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f8a:	b1e8      	cbz	r0, 8006fc8 <__d2b+0x80>
 8006f8c:	f1c0 0320 	rsb	r3, r0, #32
 8006f90:	fa02 f303 	lsl.w	r3, r2, r3
 8006f94:	430b      	orrs	r3, r1
 8006f96:	40c2      	lsrs	r2, r0
 8006f98:	6163      	str	r3, [r4, #20]
 8006f9a:	9201      	str	r2, [sp, #4]
 8006f9c:	9b01      	ldr	r3, [sp, #4]
 8006f9e:	61a3      	str	r3, [r4, #24]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	bf14      	ite	ne
 8006fa4:	2202      	movne	r2, #2
 8006fa6:	2201      	moveq	r2, #1
 8006fa8:	6122      	str	r2, [r4, #16]
 8006faa:	b1bd      	cbz	r5, 8006fdc <__d2b+0x94>
 8006fac:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006fb0:	4405      	add	r5, r0
 8006fb2:	603d      	str	r5, [r7, #0]
 8006fb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006fb8:	6030      	str	r0, [r6, #0]
 8006fba:	4620      	mov	r0, r4
 8006fbc:	b003      	add	sp, #12
 8006fbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006fc2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006fc6:	e7d6      	b.n	8006f76 <__d2b+0x2e>
 8006fc8:	6161      	str	r1, [r4, #20]
 8006fca:	e7e7      	b.n	8006f9c <__d2b+0x54>
 8006fcc:	a801      	add	r0, sp, #4
 8006fce:	f7ff fd61 	bl	8006a94 <__lo0bits>
 8006fd2:	9b01      	ldr	r3, [sp, #4]
 8006fd4:	6163      	str	r3, [r4, #20]
 8006fd6:	3020      	adds	r0, #32
 8006fd8:	2201      	movs	r2, #1
 8006fda:	e7e5      	b.n	8006fa8 <__d2b+0x60>
 8006fdc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006fe0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fe4:	6038      	str	r0, [r7, #0]
 8006fe6:	6918      	ldr	r0, [r3, #16]
 8006fe8:	f7ff fd34 	bl	8006a54 <__hi0bits>
 8006fec:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006ff0:	e7e2      	b.n	8006fb8 <__d2b+0x70>
 8006ff2:	bf00      	nop
 8006ff4:	08007e30 	.word	0x08007e30
 8006ff8:	08007e41 	.word	0x08007e41

08006ffc <__ssputs_r>:
 8006ffc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007000:	688e      	ldr	r6, [r1, #8]
 8007002:	461f      	mov	r7, r3
 8007004:	42be      	cmp	r6, r7
 8007006:	680b      	ldr	r3, [r1, #0]
 8007008:	4682      	mov	sl, r0
 800700a:	460c      	mov	r4, r1
 800700c:	4690      	mov	r8, r2
 800700e:	d82c      	bhi.n	800706a <__ssputs_r+0x6e>
 8007010:	898a      	ldrh	r2, [r1, #12]
 8007012:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007016:	d026      	beq.n	8007066 <__ssputs_r+0x6a>
 8007018:	6965      	ldr	r5, [r4, #20]
 800701a:	6909      	ldr	r1, [r1, #16]
 800701c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007020:	eba3 0901 	sub.w	r9, r3, r1
 8007024:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007028:	1c7b      	adds	r3, r7, #1
 800702a:	444b      	add	r3, r9
 800702c:	106d      	asrs	r5, r5, #1
 800702e:	429d      	cmp	r5, r3
 8007030:	bf38      	it	cc
 8007032:	461d      	movcc	r5, r3
 8007034:	0553      	lsls	r3, r2, #21
 8007036:	d527      	bpl.n	8007088 <__ssputs_r+0x8c>
 8007038:	4629      	mov	r1, r5
 800703a:	f7ff fbd7 	bl	80067ec <_malloc_r>
 800703e:	4606      	mov	r6, r0
 8007040:	b360      	cbz	r0, 800709c <__ssputs_r+0xa0>
 8007042:	6921      	ldr	r1, [r4, #16]
 8007044:	464a      	mov	r2, r9
 8007046:	f000 fa09 	bl	800745c <memcpy>
 800704a:	89a3      	ldrh	r3, [r4, #12]
 800704c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007050:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007054:	81a3      	strh	r3, [r4, #12]
 8007056:	6126      	str	r6, [r4, #16]
 8007058:	6165      	str	r5, [r4, #20]
 800705a:	444e      	add	r6, r9
 800705c:	eba5 0509 	sub.w	r5, r5, r9
 8007060:	6026      	str	r6, [r4, #0]
 8007062:	60a5      	str	r5, [r4, #8]
 8007064:	463e      	mov	r6, r7
 8007066:	42be      	cmp	r6, r7
 8007068:	d900      	bls.n	800706c <__ssputs_r+0x70>
 800706a:	463e      	mov	r6, r7
 800706c:	6820      	ldr	r0, [r4, #0]
 800706e:	4632      	mov	r2, r6
 8007070:	4641      	mov	r1, r8
 8007072:	f000 f9c9 	bl	8007408 <memmove>
 8007076:	68a3      	ldr	r3, [r4, #8]
 8007078:	1b9b      	subs	r3, r3, r6
 800707a:	60a3      	str	r3, [r4, #8]
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	4433      	add	r3, r6
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	2000      	movs	r0, #0
 8007084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007088:	462a      	mov	r2, r5
 800708a:	f000 fa3b 	bl	8007504 <_realloc_r>
 800708e:	4606      	mov	r6, r0
 8007090:	2800      	cmp	r0, #0
 8007092:	d1e0      	bne.n	8007056 <__ssputs_r+0x5a>
 8007094:	6921      	ldr	r1, [r4, #16]
 8007096:	4650      	mov	r0, sl
 8007098:	f7ff fb34 	bl	8006704 <_free_r>
 800709c:	230c      	movs	r3, #12
 800709e:	f8ca 3000 	str.w	r3, [sl]
 80070a2:	89a3      	ldrh	r3, [r4, #12]
 80070a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070a8:	81a3      	strh	r3, [r4, #12]
 80070aa:	f04f 30ff 	mov.w	r0, #4294967295
 80070ae:	e7e9      	b.n	8007084 <__ssputs_r+0x88>

080070b0 <_svfiprintf_r>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	4698      	mov	r8, r3
 80070b6:	898b      	ldrh	r3, [r1, #12]
 80070b8:	061b      	lsls	r3, r3, #24
 80070ba:	b09d      	sub	sp, #116	; 0x74
 80070bc:	4607      	mov	r7, r0
 80070be:	460d      	mov	r5, r1
 80070c0:	4614      	mov	r4, r2
 80070c2:	d50e      	bpl.n	80070e2 <_svfiprintf_r+0x32>
 80070c4:	690b      	ldr	r3, [r1, #16]
 80070c6:	b963      	cbnz	r3, 80070e2 <_svfiprintf_r+0x32>
 80070c8:	2140      	movs	r1, #64	; 0x40
 80070ca:	f7ff fb8f 	bl	80067ec <_malloc_r>
 80070ce:	6028      	str	r0, [r5, #0]
 80070d0:	6128      	str	r0, [r5, #16]
 80070d2:	b920      	cbnz	r0, 80070de <_svfiprintf_r+0x2e>
 80070d4:	230c      	movs	r3, #12
 80070d6:	603b      	str	r3, [r7, #0]
 80070d8:	f04f 30ff 	mov.w	r0, #4294967295
 80070dc:	e0d0      	b.n	8007280 <_svfiprintf_r+0x1d0>
 80070de:	2340      	movs	r3, #64	; 0x40
 80070e0:	616b      	str	r3, [r5, #20]
 80070e2:	2300      	movs	r3, #0
 80070e4:	9309      	str	r3, [sp, #36]	; 0x24
 80070e6:	2320      	movs	r3, #32
 80070e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80070f0:	2330      	movs	r3, #48	; 0x30
 80070f2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007298 <_svfiprintf_r+0x1e8>
 80070f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070fa:	f04f 0901 	mov.w	r9, #1
 80070fe:	4623      	mov	r3, r4
 8007100:	469a      	mov	sl, r3
 8007102:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007106:	b10a      	cbz	r2, 800710c <_svfiprintf_r+0x5c>
 8007108:	2a25      	cmp	r2, #37	; 0x25
 800710a:	d1f9      	bne.n	8007100 <_svfiprintf_r+0x50>
 800710c:	ebba 0b04 	subs.w	fp, sl, r4
 8007110:	d00b      	beq.n	800712a <_svfiprintf_r+0x7a>
 8007112:	465b      	mov	r3, fp
 8007114:	4622      	mov	r2, r4
 8007116:	4629      	mov	r1, r5
 8007118:	4638      	mov	r0, r7
 800711a:	f7ff ff6f 	bl	8006ffc <__ssputs_r>
 800711e:	3001      	adds	r0, #1
 8007120:	f000 80a9 	beq.w	8007276 <_svfiprintf_r+0x1c6>
 8007124:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007126:	445a      	add	r2, fp
 8007128:	9209      	str	r2, [sp, #36]	; 0x24
 800712a:	f89a 3000 	ldrb.w	r3, [sl]
 800712e:	2b00      	cmp	r3, #0
 8007130:	f000 80a1 	beq.w	8007276 <_svfiprintf_r+0x1c6>
 8007134:	2300      	movs	r3, #0
 8007136:	f04f 32ff 	mov.w	r2, #4294967295
 800713a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800713e:	f10a 0a01 	add.w	sl, sl, #1
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	9307      	str	r3, [sp, #28]
 8007146:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800714a:	931a      	str	r3, [sp, #104]	; 0x68
 800714c:	4654      	mov	r4, sl
 800714e:	2205      	movs	r2, #5
 8007150:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007154:	4850      	ldr	r0, [pc, #320]	; (8007298 <_svfiprintf_r+0x1e8>)
 8007156:	f7f9 f843 	bl	80001e0 <memchr>
 800715a:	9a04      	ldr	r2, [sp, #16]
 800715c:	b9d8      	cbnz	r0, 8007196 <_svfiprintf_r+0xe6>
 800715e:	06d0      	lsls	r0, r2, #27
 8007160:	bf44      	itt	mi
 8007162:	2320      	movmi	r3, #32
 8007164:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007168:	0711      	lsls	r1, r2, #28
 800716a:	bf44      	itt	mi
 800716c:	232b      	movmi	r3, #43	; 0x2b
 800716e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007172:	f89a 3000 	ldrb.w	r3, [sl]
 8007176:	2b2a      	cmp	r3, #42	; 0x2a
 8007178:	d015      	beq.n	80071a6 <_svfiprintf_r+0xf6>
 800717a:	9a07      	ldr	r2, [sp, #28]
 800717c:	4654      	mov	r4, sl
 800717e:	2000      	movs	r0, #0
 8007180:	f04f 0c0a 	mov.w	ip, #10
 8007184:	4621      	mov	r1, r4
 8007186:	f811 3b01 	ldrb.w	r3, [r1], #1
 800718a:	3b30      	subs	r3, #48	; 0x30
 800718c:	2b09      	cmp	r3, #9
 800718e:	d94d      	bls.n	800722c <_svfiprintf_r+0x17c>
 8007190:	b1b0      	cbz	r0, 80071c0 <_svfiprintf_r+0x110>
 8007192:	9207      	str	r2, [sp, #28]
 8007194:	e014      	b.n	80071c0 <_svfiprintf_r+0x110>
 8007196:	eba0 0308 	sub.w	r3, r0, r8
 800719a:	fa09 f303 	lsl.w	r3, r9, r3
 800719e:	4313      	orrs	r3, r2
 80071a0:	9304      	str	r3, [sp, #16]
 80071a2:	46a2      	mov	sl, r4
 80071a4:	e7d2      	b.n	800714c <_svfiprintf_r+0x9c>
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	1d19      	adds	r1, r3, #4
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	9103      	str	r1, [sp, #12]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	bfbb      	ittet	lt
 80071b2:	425b      	neglt	r3, r3
 80071b4:	f042 0202 	orrlt.w	r2, r2, #2
 80071b8:	9307      	strge	r3, [sp, #28]
 80071ba:	9307      	strlt	r3, [sp, #28]
 80071bc:	bfb8      	it	lt
 80071be:	9204      	strlt	r2, [sp, #16]
 80071c0:	7823      	ldrb	r3, [r4, #0]
 80071c2:	2b2e      	cmp	r3, #46	; 0x2e
 80071c4:	d10c      	bne.n	80071e0 <_svfiprintf_r+0x130>
 80071c6:	7863      	ldrb	r3, [r4, #1]
 80071c8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ca:	d134      	bne.n	8007236 <_svfiprintf_r+0x186>
 80071cc:	9b03      	ldr	r3, [sp, #12]
 80071ce:	1d1a      	adds	r2, r3, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	9203      	str	r2, [sp, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bfb8      	it	lt
 80071d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80071dc:	3402      	adds	r4, #2
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80072a8 <_svfiprintf_r+0x1f8>
 80071e4:	7821      	ldrb	r1, [r4, #0]
 80071e6:	2203      	movs	r2, #3
 80071e8:	4650      	mov	r0, sl
 80071ea:	f7f8 fff9 	bl	80001e0 <memchr>
 80071ee:	b138      	cbz	r0, 8007200 <_svfiprintf_r+0x150>
 80071f0:	9b04      	ldr	r3, [sp, #16]
 80071f2:	eba0 000a 	sub.w	r0, r0, sl
 80071f6:	2240      	movs	r2, #64	; 0x40
 80071f8:	4082      	lsls	r2, r0
 80071fa:	4313      	orrs	r3, r2
 80071fc:	3401      	adds	r4, #1
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007204:	4825      	ldr	r0, [pc, #148]	; (800729c <_svfiprintf_r+0x1ec>)
 8007206:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800720a:	2206      	movs	r2, #6
 800720c:	f7f8 ffe8 	bl	80001e0 <memchr>
 8007210:	2800      	cmp	r0, #0
 8007212:	d038      	beq.n	8007286 <_svfiprintf_r+0x1d6>
 8007214:	4b22      	ldr	r3, [pc, #136]	; (80072a0 <_svfiprintf_r+0x1f0>)
 8007216:	bb1b      	cbnz	r3, 8007260 <_svfiprintf_r+0x1b0>
 8007218:	9b03      	ldr	r3, [sp, #12]
 800721a:	3307      	adds	r3, #7
 800721c:	f023 0307 	bic.w	r3, r3, #7
 8007220:	3308      	adds	r3, #8
 8007222:	9303      	str	r3, [sp, #12]
 8007224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007226:	4433      	add	r3, r6
 8007228:	9309      	str	r3, [sp, #36]	; 0x24
 800722a:	e768      	b.n	80070fe <_svfiprintf_r+0x4e>
 800722c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007230:	460c      	mov	r4, r1
 8007232:	2001      	movs	r0, #1
 8007234:	e7a6      	b.n	8007184 <_svfiprintf_r+0xd4>
 8007236:	2300      	movs	r3, #0
 8007238:	3401      	adds	r4, #1
 800723a:	9305      	str	r3, [sp, #20]
 800723c:	4619      	mov	r1, r3
 800723e:	f04f 0c0a 	mov.w	ip, #10
 8007242:	4620      	mov	r0, r4
 8007244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007248:	3a30      	subs	r2, #48	; 0x30
 800724a:	2a09      	cmp	r2, #9
 800724c:	d903      	bls.n	8007256 <_svfiprintf_r+0x1a6>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0c6      	beq.n	80071e0 <_svfiprintf_r+0x130>
 8007252:	9105      	str	r1, [sp, #20]
 8007254:	e7c4      	b.n	80071e0 <_svfiprintf_r+0x130>
 8007256:	fb0c 2101 	mla	r1, ip, r1, r2
 800725a:	4604      	mov	r4, r0
 800725c:	2301      	movs	r3, #1
 800725e:	e7f0      	b.n	8007242 <_svfiprintf_r+0x192>
 8007260:	ab03      	add	r3, sp, #12
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	462a      	mov	r2, r5
 8007266:	4b0f      	ldr	r3, [pc, #60]	; (80072a4 <_svfiprintf_r+0x1f4>)
 8007268:	a904      	add	r1, sp, #16
 800726a:	4638      	mov	r0, r7
 800726c:	f7fd fe64 	bl	8004f38 <_printf_float>
 8007270:	1c42      	adds	r2, r0, #1
 8007272:	4606      	mov	r6, r0
 8007274:	d1d6      	bne.n	8007224 <_svfiprintf_r+0x174>
 8007276:	89ab      	ldrh	r3, [r5, #12]
 8007278:	065b      	lsls	r3, r3, #25
 800727a:	f53f af2d 	bmi.w	80070d8 <_svfiprintf_r+0x28>
 800727e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007280:	b01d      	add	sp, #116	; 0x74
 8007282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007286:	ab03      	add	r3, sp, #12
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	462a      	mov	r2, r5
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <_svfiprintf_r+0x1f4>)
 800728e:	a904      	add	r1, sp, #16
 8007290:	4638      	mov	r0, r7
 8007292:	f7fe f8f5 	bl	8005480 <_printf_i>
 8007296:	e7eb      	b.n	8007270 <_svfiprintf_r+0x1c0>
 8007298:	08007f9c 	.word	0x08007f9c
 800729c:	08007fa6 	.word	0x08007fa6
 80072a0:	08004f39 	.word	0x08004f39
 80072a4:	08006ffd 	.word	0x08006ffd
 80072a8:	08007fa2 	.word	0x08007fa2

080072ac <__sflush_r>:
 80072ac:	898a      	ldrh	r2, [r1, #12]
 80072ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072b2:	4605      	mov	r5, r0
 80072b4:	0710      	lsls	r0, r2, #28
 80072b6:	460c      	mov	r4, r1
 80072b8:	d458      	bmi.n	800736c <__sflush_r+0xc0>
 80072ba:	684b      	ldr	r3, [r1, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dc05      	bgt.n	80072cc <__sflush_r+0x20>
 80072c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dc02      	bgt.n	80072cc <__sflush_r+0x20>
 80072c6:	2000      	movs	r0, #0
 80072c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072ce:	2e00      	cmp	r6, #0
 80072d0:	d0f9      	beq.n	80072c6 <__sflush_r+0x1a>
 80072d2:	2300      	movs	r3, #0
 80072d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072d8:	682f      	ldr	r7, [r5, #0]
 80072da:	6a21      	ldr	r1, [r4, #32]
 80072dc:	602b      	str	r3, [r5, #0]
 80072de:	d032      	beq.n	8007346 <__sflush_r+0x9a>
 80072e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072e2:	89a3      	ldrh	r3, [r4, #12]
 80072e4:	075a      	lsls	r2, r3, #29
 80072e6:	d505      	bpl.n	80072f4 <__sflush_r+0x48>
 80072e8:	6863      	ldr	r3, [r4, #4]
 80072ea:	1ac0      	subs	r0, r0, r3
 80072ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072ee:	b10b      	cbz	r3, 80072f4 <__sflush_r+0x48>
 80072f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072f2:	1ac0      	subs	r0, r0, r3
 80072f4:	2300      	movs	r3, #0
 80072f6:	4602      	mov	r2, r0
 80072f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072fa:	6a21      	ldr	r1, [r4, #32]
 80072fc:	4628      	mov	r0, r5
 80072fe:	47b0      	blx	r6
 8007300:	1c43      	adds	r3, r0, #1
 8007302:	89a3      	ldrh	r3, [r4, #12]
 8007304:	d106      	bne.n	8007314 <__sflush_r+0x68>
 8007306:	6829      	ldr	r1, [r5, #0]
 8007308:	291d      	cmp	r1, #29
 800730a:	d82b      	bhi.n	8007364 <__sflush_r+0xb8>
 800730c:	4a29      	ldr	r2, [pc, #164]	; (80073b4 <__sflush_r+0x108>)
 800730e:	410a      	asrs	r2, r1
 8007310:	07d6      	lsls	r6, r2, #31
 8007312:	d427      	bmi.n	8007364 <__sflush_r+0xb8>
 8007314:	2200      	movs	r2, #0
 8007316:	6062      	str	r2, [r4, #4]
 8007318:	04d9      	lsls	r1, r3, #19
 800731a:	6922      	ldr	r2, [r4, #16]
 800731c:	6022      	str	r2, [r4, #0]
 800731e:	d504      	bpl.n	800732a <__sflush_r+0x7e>
 8007320:	1c42      	adds	r2, r0, #1
 8007322:	d101      	bne.n	8007328 <__sflush_r+0x7c>
 8007324:	682b      	ldr	r3, [r5, #0]
 8007326:	b903      	cbnz	r3, 800732a <__sflush_r+0x7e>
 8007328:	6560      	str	r0, [r4, #84]	; 0x54
 800732a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800732c:	602f      	str	r7, [r5, #0]
 800732e:	2900      	cmp	r1, #0
 8007330:	d0c9      	beq.n	80072c6 <__sflush_r+0x1a>
 8007332:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007336:	4299      	cmp	r1, r3
 8007338:	d002      	beq.n	8007340 <__sflush_r+0x94>
 800733a:	4628      	mov	r0, r5
 800733c:	f7ff f9e2 	bl	8006704 <_free_r>
 8007340:	2000      	movs	r0, #0
 8007342:	6360      	str	r0, [r4, #52]	; 0x34
 8007344:	e7c0      	b.n	80072c8 <__sflush_r+0x1c>
 8007346:	2301      	movs	r3, #1
 8007348:	4628      	mov	r0, r5
 800734a:	47b0      	blx	r6
 800734c:	1c41      	adds	r1, r0, #1
 800734e:	d1c8      	bne.n	80072e2 <__sflush_r+0x36>
 8007350:	682b      	ldr	r3, [r5, #0]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d0c5      	beq.n	80072e2 <__sflush_r+0x36>
 8007356:	2b1d      	cmp	r3, #29
 8007358:	d001      	beq.n	800735e <__sflush_r+0xb2>
 800735a:	2b16      	cmp	r3, #22
 800735c:	d101      	bne.n	8007362 <__sflush_r+0xb6>
 800735e:	602f      	str	r7, [r5, #0]
 8007360:	e7b1      	b.n	80072c6 <__sflush_r+0x1a>
 8007362:	89a3      	ldrh	r3, [r4, #12]
 8007364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	e7ad      	b.n	80072c8 <__sflush_r+0x1c>
 800736c:	690f      	ldr	r7, [r1, #16]
 800736e:	2f00      	cmp	r7, #0
 8007370:	d0a9      	beq.n	80072c6 <__sflush_r+0x1a>
 8007372:	0793      	lsls	r3, r2, #30
 8007374:	680e      	ldr	r6, [r1, #0]
 8007376:	bf08      	it	eq
 8007378:	694b      	ldreq	r3, [r1, #20]
 800737a:	600f      	str	r7, [r1, #0]
 800737c:	bf18      	it	ne
 800737e:	2300      	movne	r3, #0
 8007380:	eba6 0807 	sub.w	r8, r6, r7
 8007384:	608b      	str	r3, [r1, #8]
 8007386:	f1b8 0f00 	cmp.w	r8, #0
 800738a:	dd9c      	ble.n	80072c6 <__sflush_r+0x1a>
 800738c:	6a21      	ldr	r1, [r4, #32]
 800738e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007390:	4643      	mov	r3, r8
 8007392:	463a      	mov	r2, r7
 8007394:	4628      	mov	r0, r5
 8007396:	47b0      	blx	r6
 8007398:	2800      	cmp	r0, #0
 800739a:	dc06      	bgt.n	80073aa <__sflush_r+0xfe>
 800739c:	89a3      	ldrh	r3, [r4, #12]
 800739e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073a2:	81a3      	strh	r3, [r4, #12]
 80073a4:	f04f 30ff 	mov.w	r0, #4294967295
 80073a8:	e78e      	b.n	80072c8 <__sflush_r+0x1c>
 80073aa:	4407      	add	r7, r0
 80073ac:	eba8 0800 	sub.w	r8, r8, r0
 80073b0:	e7e9      	b.n	8007386 <__sflush_r+0xda>
 80073b2:	bf00      	nop
 80073b4:	dfbffffe 	.word	0xdfbffffe

080073b8 <_fflush_r>:
 80073b8:	b538      	push	{r3, r4, r5, lr}
 80073ba:	690b      	ldr	r3, [r1, #16]
 80073bc:	4605      	mov	r5, r0
 80073be:	460c      	mov	r4, r1
 80073c0:	b913      	cbnz	r3, 80073c8 <_fflush_r+0x10>
 80073c2:	2500      	movs	r5, #0
 80073c4:	4628      	mov	r0, r5
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	b118      	cbz	r0, 80073d2 <_fflush_r+0x1a>
 80073ca:	6a03      	ldr	r3, [r0, #32]
 80073cc:	b90b      	cbnz	r3, 80073d2 <_fflush_r+0x1a>
 80073ce:	f7fe fa05 	bl	80057dc <__sinit>
 80073d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d0f3      	beq.n	80073c2 <_fflush_r+0xa>
 80073da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073dc:	07d0      	lsls	r0, r2, #31
 80073de:	d404      	bmi.n	80073ea <_fflush_r+0x32>
 80073e0:	0599      	lsls	r1, r3, #22
 80073e2:	d402      	bmi.n	80073ea <_fflush_r+0x32>
 80073e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073e6:	f7fe fb10 	bl	8005a0a <__retarget_lock_acquire_recursive>
 80073ea:	4628      	mov	r0, r5
 80073ec:	4621      	mov	r1, r4
 80073ee:	f7ff ff5d 	bl	80072ac <__sflush_r>
 80073f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073f4:	07da      	lsls	r2, r3, #31
 80073f6:	4605      	mov	r5, r0
 80073f8:	d4e4      	bmi.n	80073c4 <_fflush_r+0xc>
 80073fa:	89a3      	ldrh	r3, [r4, #12]
 80073fc:	059b      	lsls	r3, r3, #22
 80073fe:	d4e1      	bmi.n	80073c4 <_fflush_r+0xc>
 8007400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007402:	f7fe fb03 	bl	8005a0c <__retarget_lock_release_recursive>
 8007406:	e7dd      	b.n	80073c4 <_fflush_r+0xc>

08007408 <memmove>:
 8007408:	4288      	cmp	r0, r1
 800740a:	b510      	push	{r4, lr}
 800740c:	eb01 0402 	add.w	r4, r1, r2
 8007410:	d902      	bls.n	8007418 <memmove+0x10>
 8007412:	4284      	cmp	r4, r0
 8007414:	4623      	mov	r3, r4
 8007416:	d807      	bhi.n	8007428 <memmove+0x20>
 8007418:	1e43      	subs	r3, r0, #1
 800741a:	42a1      	cmp	r1, r4
 800741c:	d008      	beq.n	8007430 <memmove+0x28>
 800741e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007422:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007426:	e7f8      	b.n	800741a <memmove+0x12>
 8007428:	4402      	add	r2, r0
 800742a:	4601      	mov	r1, r0
 800742c:	428a      	cmp	r2, r1
 800742e:	d100      	bne.n	8007432 <memmove+0x2a>
 8007430:	bd10      	pop	{r4, pc}
 8007432:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007436:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800743a:	e7f7      	b.n	800742c <memmove+0x24>

0800743c <_sbrk_r>:
 800743c:	b538      	push	{r3, r4, r5, lr}
 800743e:	4d06      	ldr	r5, [pc, #24]	; (8007458 <_sbrk_r+0x1c>)
 8007440:	2300      	movs	r3, #0
 8007442:	4604      	mov	r4, r0
 8007444:	4608      	mov	r0, r1
 8007446:	602b      	str	r3, [r5, #0]
 8007448:	f7fa fdd2 	bl	8001ff0 <_sbrk>
 800744c:	1c43      	adds	r3, r0, #1
 800744e:	d102      	bne.n	8007456 <_sbrk_r+0x1a>
 8007450:	682b      	ldr	r3, [r5, #0]
 8007452:	b103      	cbz	r3, 8007456 <_sbrk_r+0x1a>
 8007454:	6023      	str	r3, [r4, #0]
 8007456:	bd38      	pop	{r3, r4, r5, pc}
 8007458:	200004b8 	.word	0x200004b8

0800745c <memcpy>:
 800745c:	440a      	add	r2, r1
 800745e:	4291      	cmp	r1, r2
 8007460:	f100 33ff 	add.w	r3, r0, #4294967295
 8007464:	d100      	bne.n	8007468 <memcpy+0xc>
 8007466:	4770      	bx	lr
 8007468:	b510      	push	{r4, lr}
 800746a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800746e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007472:	4291      	cmp	r1, r2
 8007474:	d1f9      	bne.n	800746a <memcpy+0xe>
 8007476:	bd10      	pop	{r4, pc}

08007478 <__assert_func>:
 8007478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800747a:	4614      	mov	r4, r2
 800747c:	461a      	mov	r2, r3
 800747e:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <__assert_func+0x2c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4605      	mov	r5, r0
 8007484:	68d8      	ldr	r0, [r3, #12]
 8007486:	b14c      	cbz	r4, 800749c <__assert_func+0x24>
 8007488:	4b07      	ldr	r3, [pc, #28]	; (80074a8 <__assert_func+0x30>)
 800748a:	9100      	str	r1, [sp, #0]
 800748c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007490:	4906      	ldr	r1, [pc, #24]	; (80074ac <__assert_func+0x34>)
 8007492:	462b      	mov	r3, r5
 8007494:	f000 f872 	bl	800757c <fiprintf>
 8007498:	f000 f882 	bl	80075a0 <abort>
 800749c:	4b04      	ldr	r3, [pc, #16]	; (80074b0 <__assert_func+0x38>)
 800749e:	461c      	mov	r4, r3
 80074a0:	e7f3      	b.n	800748a <__assert_func+0x12>
 80074a2:	bf00      	nop
 80074a4:	20000064 	.word	0x20000064
 80074a8:	08007fb7 	.word	0x08007fb7
 80074ac:	08007fc4 	.word	0x08007fc4
 80074b0:	08007ff2 	.word	0x08007ff2

080074b4 <_calloc_r>:
 80074b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074b6:	fba1 2402 	umull	r2, r4, r1, r2
 80074ba:	b94c      	cbnz	r4, 80074d0 <_calloc_r+0x1c>
 80074bc:	4611      	mov	r1, r2
 80074be:	9201      	str	r2, [sp, #4]
 80074c0:	f7ff f994 	bl	80067ec <_malloc_r>
 80074c4:	9a01      	ldr	r2, [sp, #4]
 80074c6:	4605      	mov	r5, r0
 80074c8:	b930      	cbnz	r0, 80074d8 <_calloc_r+0x24>
 80074ca:	4628      	mov	r0, r5
 80074cc:	b003      	add	sp, #12
 80074ce:	bd30      	pop	{r4, r5, pc}
 80074d0:	220c      	movs	r2, #12
 80074d2:	6002      	str	r2, [r0, #0]
 80074d4:	2500      	movs	r5, #0
 80074d6:	e7f8      	b.n	80074ca <_calloc_r+0x16>
 80074d8:	4621      	mov	r1, r4
 80074da:	f7fe fa18 	bl	800590e <memset>
 80074de:	e7f4      	b.n	80074ca <_calloc_r+0x16>

080074e0 <__ascii_mbtowc>:
 80074e0:	b082      	sub	sp, #8
 80074e2:	b901      	cbnz	r1, 80074e6 <__ascii_mbtowc+0x6>
 80074e4:	a901      	add	r1, sp, #4
 80074e6:	b142      	cbz	r2, 80074fa <__ascii_mbtowc+0x1a>
 80074e8:	b14b      	cbz	r3, 80074fe <__ascii_mbtowc+0x1e>
 80074ea:	7813      	ldrb	r3, [r2, #0]
 80074ec:	600b      	str	r3, [r1, #0]
 80074ee:	7812      	ldrb	r2, [r2, #0]
 80074f0:	1e10      	subs	r0, r2, #0
 80074f2:	bf18      	it	ne
 80074f4:	2001      	movne	r0, #1
 80074f6:	b002      	add	sp, #8
 80074f8:	4770      	bx	lr
 80074fa:	4610      	mov	r0, r2
 80074fc:	e7fb      	b.n	80074f6 <__ascii_mbtowc+0x16>
 80074fe:	f06f 0001 	mvn.w	r0, #1
 8007502:	e7f8      	b.n	80074f6 <__ascii_mbtowc+0x16>

08007504 <_realloc_r>:
 8007504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007508:	4680      	mov	r8, r0
 800750a:	4614      	mov	r4, r2
 800750c:	460e      	mov	r6, r1
 800750e:	b921      	cbnz	r1, 800751a <_realloc_r+0x16>
 8007510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007514:	4611      	mov	r1, r2
 8007516:	f7ff b969 	b.w	80067ec <_malloc_r>
 800751a:	b92a      	cbnz	r2, 8007528 <_realloc_r+0x24>
 800751c:	f7ff f8f2 	bl	8006704 <_free_r>
 8007520:	4625      	mov	r5, r4
 8007522:	4628      	mov	r0, r5
 8007524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007528:	f000 f841 	bl	80075ae <_malloc_usable_size_r>
 800752c:	4284      	cmp	r4, r0
 800752e:	4607      	mov	r7, r0
 8007530:	d802      	bhi.n	8007538 <_realloc_r+0x34>
 8007532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007536:	d812      	bhi.n	800755e <_realloc_r+0x5a>
 8007538:	4621      	mov	r1, r4
 800753a:	4640      	mov	r0, r8
 800753c:	f7ff f956 	bl	80067ec <_malloc_r>
 8007540:	4605      	mov	r5, r0
 8007542:	2800      	cmp	r0, #0
 8007544:	d0ed      	beq.n	8007522 <_realloc_r+0x1e>
 8007546:	42bc      	cmp	r4, r7
 8007548:	4622      	mov	r2, r4
 800754a:	4631      	mov	r1, r6
 800754c:	bf28      	it	cs
 800754e:	463a      	movcs	r2, r7
 8007550:	f7ff ff84 	bl	800745c <memcpy>
 8007554:	4631      	mov	r1, r6
 8007556:	4640      	mov	r0, r8
 8007558:	f7ff f8d4 	bl	8006704 <_free_r>
 800755c:	e7e1      	b.n	8007522 <_realloc_r+0x1e>
 800755e:	4635      	mov	r5, r6
 8007560:	e7df      	b.n	8007522 <_realloc_r+0x1e>

08007562 <__ascii_wctomb>:
 8007562:	b149      	cbz	r1, 8007578 <__ascii_wctomb+0x16>
 8007564:	2aff      	cmp	r2, #255	; 0xff
 8007566:	bf85      	ittet	hi
 8007568:	238a      	movhi	r3, #138	; 0x8a
 800756a:	6003      	strhi	r3, [r0, #0]
 800756c:	700a      	strbls	r2, [r1, #0]
 800756e:	f04f 30ff 	movhi.w	r0, #4294967295
 8007572:	bf98      	it	ls
 8007574:	2001      	movls	r0, #1
 8007576:	4770      	bx	lr
 8007578:	4608      	mov	r0, r1
 800757a:	4770      	bx	lr

0800757c <fiprintf>:
 800757c:	b40e      	push	{r1, r2, r3}
 800757e:	b503      	push	{r0, r1, lr}
 8007580:	4601      	mov	r1, r0
 8007582:	ab03      	add	r3, sp, #12
 8007584:	4805      	ldr	r0, [pc, #20]	; (800759c <fiprintf+0x20>)
 8007586:	f853 2b04 	ldr.w	r2, [r3], #4
 800758a:	6800      	ldr	r0, [r0, #0]
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	f000 f83f 	bl	8007610 <_vfiprintf_r>
 8007592:	b002      	add	sp, #8
 8007594:	f85d eb04 	ldr.w	lr, [sp], #4
 8007598:	b003      	add	sp, #12
 800759a:	4770      	bx	lr
 800759c:	20000064 	.word	0x20000064

080075a0 <abort>:
 80075a0:	b508      	push	{r3, lr}
 80075a2:	2006      	movs	r0, #6
 80075a4:	f000 fa0c 	bl	80079c0 <raise>
 80075a8:	2001      	movs	r0, #1
 80075aa:	f7fa fca9 	bl	8001f00 <_exit>

080075ae <_malloc_usable_size_r>:
 80075ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075b2:	1f18      	subs	r0, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bfbc      	itt	lt
 80075b8:	580b      	ldrlt	r3, [r1, r0]
 80075ba:	18c0      	addlt	r0, r0, r3
 80075bc:	4770      	bx	lr

080075be <__sfputc_r>:
 80075be:	6893      	ldr	r3, [r2, #8]
 80075c0:	3b01      	subs	r3, #1
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	b410      	push	{r4}
 80075c6:	6093      	str	r3, [r2, #8]
 80075c8:	da08      	bge.n	80075dc <__sfputc_r+0x1e>
 80075ca:	6994      	ldr	r4, [r2, #24]
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	db01      	blt.n	80075d4 <__sfputc_r+0x16>
 80075d0:	290a      	cmp	r1, #10
 80075d2:	d103      	bne.n	80075dc <__sfputc_r+0x1e>
 80075d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075d8:	f000 b934 	b.w	8007844 <__swbuf_r>
 80075dc:	6813      	ldr	r3, [r2, #0]
 80075de:	1c58      	adds	r0, r3, #1
 80075e0:	6010      	str	r0, [r2, #0]
 80075e2:	7019      	strb	r1, [r3, #0]
 80075e4:	4608      	mov	r0, r1
 80075e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075ea:	4770      	bx	lr

080075ec <__sfputs_r>:
 80075ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ee:	4606      	mov	r6, r0
 80075f0:	460f      	mov	r7, r1
 80075f2:	4614      	mov	r4, r2
 80075f4:	18d5      	adds	r5, r2, r3
 80075f6:	42ac      	cmp	r4, r5
 80075f8:	d101      	bne.n	80075fe <__sfputs_r+0x12>
 80075fa:	2000      	movs	r0, #0
 80075fc:	e007      	b.n	800760e <__sfputs_r+0x22>
 80075fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007602:	463a      	mov	r2, r7
 8007604:	4630      	mov	r0, r6
 8007606:	f7ff ffda 	bl	80075be <__sfputc_r>
 800760a:	1c43      	adds	r3, r0, #1
 800760c:	d1f3      	bne.n	80075f6 <__sfputs_r+0xa>
 800760e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007610 <_vfiprintf_r>:
 8007610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	460d      	mov	r5, r1
 8007616:	b09d      	sub	sp, #116	; 0x74
 8007618:	4614      	mov	r4, r2
 800761a:	4698      	mov	r8, r3
 800761c:	4606      	mov	r6, r0
 800761e:	b118      	cbz	r0, 8007628 <_vfiprintf_r+0x18>
 8007620:	6a03      	ldr	r3, [r0, #32]
 8007622:	b90b      	cbnz	r3, 8007628 <_vfiprintf_r+0x18>
 8007624:	f7fe f8da 	bl	80057dc <__sinit>
 8007628:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800762a:	07d9      	lsls	r1, r3, #31
 800762c:	d405      	bmi.n	800763a <_vfiprintf_r+0x2a>
 800762e:	89ab      	ldrh	r3, [r5, #12]
 8007630:	059a      	lsls	r2, r3, #22
 8007632:	d402      	bmi.n	800763a <_vfiprintf_r+0x2a>
 8007634:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007636:	f7fe f9e8 	bl	8005a0a <__retarget_lock_acquire_recursive>
 800763a:	89ab      	ldrh	r3, [r5, #12]
 800763c:	071b      	lsls	r3, r3, #28
 800763e:	d501      	bpl.n	8007644 <_vfiprintf_r+0x34>
 8007640:	692b      	ldr	r3, [r5, #16]
 8007642:	b99b      	cbnz	r3, 800766c <_vfiprintf_r+0x5c>
 8007644:	4629      	mov	r1, r5
 8007646:	4630      	mov	r0, r6
 8007648:	f000 f93a 	bl	80078c0 <__swsetup_r>
 800764c:	b170      	cbz	r0, 800766c <_vfiprintf_r+0x5c>
 800764e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007650:	07dc      	lsls	r4, r3, #31
 8007652:	d504      	bpl.n	800765e <_vfiprintf_r+0x4e>
 8007654:	f04f 30ff 	mov.w	r0, #4294967295
 8007658:	b01d      	add	sp, #116	; 0x74
 800765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800765e:	89ab      	ldrh	r3, [r5, #12]
 8007660:	0598      	lsls	r0, r3, #22
 8007662:	d4f7      	bmi.n	8007654 <_vfiprintf_r+0x44>
 8007664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007666:	f7fe f9d1 	bl	8005a0c <__retarget_lock_release_recursive>
 800766a:	e7f3      	b.n	8007654 <_vfiprintf_r+0x44>
 800766c:	2300      	movs	r3, #0
 800766e:	9309      	str	r3, [sp, #36]	; 0x24
 8007670:	2320      	movs	r3, #32
 8007672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007676:	f8cd 800c 	str.w	r8, [sp, #12]
 800767a:	2330      	movs	r3, #48	; 0x30
 800767c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007830 <_vfiprintf_r+0x220>
 8007680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007684:	f04f 0901 	mov.w	r9, #1
 8007688:	4623      	mov	r3, r4
 800768a:	469a      	mov	sl, r3
 800768c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007690:	b10a      	cbz	r2, 8007696 <_vfiprintf_r+0x86>
 8007692:	2a25      	cmp	r2, #37	; 0x25
 8007694:	d1f9      	bne.n	800768a <_vfiprintf_r+0x7a>
 8007696:	ebba 0b04 	subs.w	fp, sl, r4
 800769a:	d00b      	beq.n	80076b4 <_vfiprintf_r+0xa4>
 800769c:	465b      	mov	r3, fp
 800769e:	4622      	mov	r2, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	4630      	mov	r0, r6
 80076a4:	f7ff ffa2 	bl	80075ec <__sfputs_r>
 80076a8:	3001      	adds	r0, #1
 80076aa:	f000 80a9 	beq.w	8007800 <_vfiprintf_r+0x1f0>
 80076ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b0:	445a      	add	r2, fp
 80076b2:	9209      	str	r2, [sp, #36]	; 0x24
 80076b4:	f89a 3000 	ldrb.w	r3, [sl]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f000 80a1 	beq.w	8007800 <_vfiprintf_r+0x1f0>
 80076be:	2300      	movs	r3, #0
 80076c0:	f04f 32ff 	mov.w	r2, #4294967295
 80076c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076c8:	f10a 0a01 	add.w	sl, sl, #1
 80076cc:	9304      	str	r3, [sp, #16]
 80076ce:	9307      	str	r3, [sp, #28]
 80076d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80076d4:	931a      	str	r3, [sp, #104]	; 0x68
 80076d6:	4654      	mov	r4, sl
 80076d8:	2205      	movs	r2, #5
 80076da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076de:	4854      	ldr	r0, [pc, #336]	; (8007830 <_vfiprintf_r+0x220>)
 80076e0:	f7f8 fd7e 	bl	80001e0 <memchr>
 80076e4:	9a04      	ldr	r2, [sp, #16]
 80076e6:	b9d8      	cbnz	r0, 8007720 <_vfiprintf_r+0x110>
 80076e8:	06d1      	lsls	r1, r2, #27
 80076ea:	bf44      	itt	mi
 80076ec:	2320      	movmi	r3, #32
 80076ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076f2:	0713      	lsls	r3, r2, #28
 80076f4:	bf44      	itt	mi
 80076f6:	232b      	movmi	r3, #43	; 0x2b
 80076f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80076fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007700:	2b2a      	cmp	r3, #42	; 0x2a
 8007702:	d015      	beq.n	8007730 <_vfiprintf_r+0x120>
 8007704:	9a07      	ldr	r2, [sp, #28]
 8007706:	4654      	mov	r4, sl
 8007708:	2000      	movs	r0, #0
 800770a:	f04f 0c0a 	mov.w	ip, #10
 800770e:	4621      	mov	r1, r4
 8007710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007714:	3b30      	subs	r3, #48	; 0x30
 8007716:	2b09      	cmp	r3, #9
 8007718:	d94d      	bls.n	80077b6 <_vfiprintf_r+0x1a6>
 800771a:	b1b0      	cbz	r0, 800774a <_vfiprintf_r+0x13a>
 800771c:	9207      	str	r2, [sp, #28]
 800771e:	e014      	b.n	800774a <_vfiprintf_r+0x13a>
 8007720:	eba0 0308 	sub.w	r3, r0, r8
 8007724:	fa09 f303 	lsl.w	r3, r9, r3
 8007728:	4313      	orrs	r3, r2
 800772a:	9304      	str	r3, [sp, #16]
 800772c:	46a2      	mov	sl, r4
 800772e:	e7d2      	b.n	80076d6 <_vfiprintf_r+0xc6>
 8007730:	9b03      	ldr	r3, [sp, #12]
 8007732:	1d19      	adds	r1, r3, #4
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	9103      	str	r1, [sp, #12]
 8007738:	2b00      	cmp	r3, #0
 800773a:	bfbb      	ittet	lt
 800773c:	425b      	neglt	r3, r3
 800773e:	f042 0202 	orrlt.w	r2, r2, #2
 8007742:	9307      	strge	r3, [sp, #28]
 8007744:	9307      	strlt	r3, [sp, #28]
 8007746:	bfb8      	it	lt
 8007748:	9204      	strlt	r2, [sp, #16]
 800774a:	7823      	ldrb	r3, [r4, #0]
 800774c:	2b2e      	cmp	r3, #46	; 0x2e
 800774e:	d10c      	bne.n	800776a <_vfiprintf_r+0x15a>
 8007750:	7863      	ldrb	r3, [r4, #1]
 8007752:	2b2a      	cmp	r3, #42	; 0x2a
 8007754:	d134      	bne.n	80077c0 <_vfiprintf_r+0x1b0>
 8007756:	9b03      	ldr	r3, [sp, #12]
 8007758:	1d1a      	adds	r2, r3, #4
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	9203      	str	r2, [sp, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	bfb8      	it	lt
 8007762:	f04f 33ff 	movlt.w	r3, #4294967295
 8007766:	3402      	adds	r4, #2
 8007768:	9305      	str	r3, [sp, #20]
 800776a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007840 <_vfiprintf_r+0x230>
 800776e:	7821      	ldrb	r1, [r4, #0]
 8007770:	2203      	movs	r2, #3
 8007772:	4650      	mov	r0, sl
 8007774:	f7f8 fd34 	bl	80001e0 <memchr>
 8007778:	b138      	cbz	r0, 800778a <_vfiprintf_r+0x17a>
 800777a:	9b04      	ldr	r3, [sp, #16]
 800777c:	eba0 000a 	sub.w	r0, r0, sl
 8007780:	2240      	movs	r2, #64	; 0x40
 8007782:	4082      	lsls	r2, r0
 8007784:	4313      	orrs	r3, r2
 8007786:	3401      	adds	r4, #1
 8007788:	9304      	str	r3, [sp, #16]
 800778a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800778e:	4829      	ldr	r0, [pc, #164]	; (8007834 <_vfiprintf_r+0x224>)
 8007790:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007794:	2206      	movs	r2, #6
 8007796:	f7f8 fd23 	bl	80001e0 <memchr>
 800779a:	2800      	cmp	r0, #0
 800779c:	d03f      	beq.n	800781e <_vfiprintf_r+0x20e>
 800779e:	4b26      	ldr	r3, [pc, #152]	; (8007838 <_vfiprintf_r+0x228>)
 80077a0:	bb1b      	cbnz	r3, 80077ea <_vfiprintf_r+0x1da>
 80077a2:	9b03      	ldr	r3, [sp, #12]
 80077a4:	3307      	adds	r3, #7
 80077a6:	f023 0307 	bic.w	r3, r3, #7
 80077aa:	3308      	adds	r3, #8
 80077ac:	9303      	str	r3, [sp, #12]
 80077ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b0:	443b      	add	r3, r7
 80077b2:	9309      	str	r3, [sp, #36]	; 0x24
 80077b4:	e768      	b.n	8007688 <_vfiprintf_r+0x78>
 80077b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ba:	460c      	mov	r4, r1
 80077bc:	2001      	movs	r0, #1
 80077be:	e7a6      	b.n	800770e <_vfiprintf_r+0xfe>
 80077c0:	2300      	movs	r3, #0
 80077c2:	3401      	adds	r4, #1
 80077c4:	9305      	str	r3, [sp, #20]
 80077c6:	4619      	mov	r1, r3
 80077c8:	f04f 0c0a 	mov.w	ip, #10
 80077cc:	4620      	mov	r0, r4
 80077ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077d2:	3a30      	subs	r2, #48	; 0x30
 80077d4:	2a09      	cmp	r2, #9
 80077d6:	d903      	bls.n	80077e0 <_vfiprintf_r+0x1d0>
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d0c6      	beq.n	800776a <_vfiprintf_r+0x15a>
 80077dc:	9105      	str	r1, [sp, #20]
 80077de:	e7c4      	b.n	800776a <_vfiprintf_r+0x15a>
 80077e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80077e4:	4604      	mov	r4, r0
 80077e6:	2301      	movs	r3, #1
 80077e8:	e7f0      	b.n	80077cc <_vfiprintf_r+0x1bc>
 80077ea:	ab03      	add	r3, sp, #12
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	462a      	mov	r2, r5
 80077f0:	4b12      	ldr	r3, [pc, #72]	; (800783c <_vfiprintf_r+0x22c>)
 80077f2:	a904      	add	r1, sp, #16
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7fd fb9f 	bl	8004f38 <_printf_float>
 80077fa:	4607      	mov	r7, r0
 80077fc:	1c78      	adds	r0, r7, #1
 80077fe:	d1d6      	bne.n	80077ae <_vfiprintf_r+0x19e>
 8007800:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007802:	07d9      	lsls	r1, r3, #31
 8007804:	d405      	bmi.n	8007812 <_vfiprintf_r+0x202>
 8007806:	89ab      	ldrh	r3, [r5, #12]
 8007808:	059a      	lsls	r2, r3, #22
 800780a:	d402      	bmi.n	8007812 <_vfiprintf_r+0x202>
 800780c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800780e:	f7fe f8fd 	bl	8005a0c <__retarget_lock_release_recursive>
 8007812:	89ab      	ldrh	r3, [r5, #12]
 8007814:	065b      	lsls	r3, r3, #25
 8007816:	f53f af1d 	bmi.w	8007654 <_vfiprintf_r+0x44>
 800781a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800781c:	e71c      	b.n	8007658 <_vfiprintf_r+0x48>
 800781e:	ab03      	add	r3, sp, #12
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	462a      	mov	r2, r5
 8007824:	4b05      	ldr	r3, [pc, #20]	; (800783c <_vfiprintf_r+0x22c>)
 8007826:	a904      	add	r1, sp, #16
 8007828:	4630      	mov	r0, r6
 800782a:	f7fd fe29 	bl	8005480 <_printf_i>
 800782e:	e7e4      	b.n	80077fa <_vfiprintf_r+0x1ea>
 8007830:	08007f9c 	.word	0x08007f9c
 8007834:	08007fa6 	.word	0x08007fa6
 8007838:	08004f39 	.word	0x08004f39
 800783c:	080075ed 	.word	0x080075ed
 8007840:	08007fa2 	.word	0x08007fa2

08007844 <__swbuf_r>:
 8007844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007846:	460e      	mov	r6, r1
 8007848:	4614      	mov	r4, r2
 800784a:	4605      	mov	r5, r0
 800784c:	b118      	cbz	r0, 8007856 <__swbuf_r+0x12>
 800784e:	6a03      	ldr	r3, [r0, #32]
 8007850:	b90b      	cbnz	r3, 8007856 <__swbuf_r+0x12>
 8007852:	f7fd ffc3 	bl	80057dc <__sinit>
 8007856:	69a3      	ldr	r3, [r4, #24]
 8007858:	60a3      	str	r3, [r4, #8]
 800785a:	89a3      	ldrh	r3, [r4, #12]
 800785c:	071a      	lsls	r2, r3, #28
 800785e:	d525      	bpl.n	80078ac <__swbuf_r+0x68>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	b31b      	cbz	r3, 80078ac <__swbuf_r+0x68>
 8007864:	6823      	ldr	r3, [r4, #0]
 8007866:	6922      	ldr	r2, [r4, #16]
 8007868:	1a98      	subs	r0, r3, r2
 800786a:	6963      	ldr	r3, [r4, #20]
 800786c:	b2f6      	uxtb	r6, r6
 800786e:	4283      	cmp	r3, r0
 8007870:	4637      	mov	r7, r6
 8007872:	dc04      	bgt.n	800787e <__swbuf_r+0x3a>
 8007874:	4621      	mov	r1, r4
 8007876:	4628      	mov	r0, r5
 8007878:	f7ff fd9e 	bl	80073b8 <_fflush_r>
 800787c:	b9e0      	cbnz	r0, 80078b8 <__swbuf_r+0x74>
 800787e:	68a3      	ldr	r3, [r4, #8]
 8007880:	3b01      	subs	r3, #1
 8007882:	60a3      	str	r3, [r4, #8]
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	6022      	str	r2, [r4, #0]
 800788a:	701e      	strb	r6, [r3, #0]
 800788c:	6962      	ldr	r2, [r4, #20]
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	429a      	cmp	r2, r3
 8007892:	d004      	beq.n	800789e <__swbuf_r+0x5a>
 8007894:	89a3      	ldrh	r3, [r4, #12]
 8007896:	07db      	lsls	r3, r3, #31
 8007898:	d506      	bpl.n	80078a8 <__swbuf_r+0x64>
 800789a:	2e0a      	cmp	r6, #10
 800789c:	d104      	bne.n	80078a8 <__swbuf_r+0x64>
 800789e:	4621      	mov	r1, r4
 80078a0:	4628      	mov	r0, r5
 80078a2:	f7ff fd89 	bl	80073b8 <_fflush_r>
 80078a6:	b938      	cbnz	r0, 80078b8 <__swbuf_r+0x74>
 80078a8:	4638      	mov	r0, r7
 80078aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ac:	4621      	mov	r1, r4
 80078ae:	4628      	mov	r0, r5
 80078b0:	f000 f806 	bl	80078c0 <__swsetup_r>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	d0d5      	beq.n	8007864 <__swbuf_r+0x20>
 80078b8:	f04f 37ff 	mov.w	r7, #4294967295
 80078bc:	e7f4      	b.n	80078a8 <__swbuf_r+0x64>
	...

080078c0 <__swsetup_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	4b2a      	ldr	r3, [pc, #168]	; (800796c <__swsetup_r+0xac>)
 80078c4:	4605      	mov	r5, r0
 80078c6:	6818      	ldr	r0, [r3, #0]
 80078c8:	460c      	mov	r4, r1
 80078ca:	b118      	cbz	r0, 80078d4 <__swsetup_r+0x14>
 80078cc:	6a03      	ldr	r3, [r0, #32]
 80078ce:	b90b      	cbnz	r3, 80078d4 <__swsetup_r+0x14>
 80078d0:	f7fd ff84 	bl	80057dc <__sinit>
 80078d4:	89a3      	ldrh	r3, [r4, #12]
 80078d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078da:	0718      	lsls	r0, r3, #28
 80078dc:	d422      	bmi.n	8007924 <__swsetup_r+0x64>
 80078de:	06d9      	lsls	r1, r3, #27
 80078e0:	d407      	bmi.n	80078f2 <__swsetup_r+0x32>
 80078e2:	2309      	movs	r3, #9
 80078e4:	602b      	str	r3, [r5, #0]
 80078e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078ea:	81a3      	strh	r3, [r4, #12]
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
 80078f0:	e034      	b.n	800795c <__swsetup_r+0x9c>
 80078f2:	0758      	lsls	r0, r3, #29
 80078f4:	d512      	bpl.n	800791c <__swsetup_r+0x5c>
 80078f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078f8:	b141      	cbz	r1, 800790c <__swsetup_r+0x4c>
 80078fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078fe:	4299      	cmp	r1, r3
 8007900:	d002      	beq.n	8007908 <__swsetup_r+0x48>
 8007902:	4628      	mov	r0, r5
 8007904:	f7fe fefe 	bl	8006704 <_free_r>
 8007908:	2300      	movs	r3, #0
 800790a:	6363      	str	r3, [r4, #52]	; 0x34
 800790c:	89a3      	ldrh	r3, [r4, #12]
 800790e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007912:	81a3      	strh	r3, [r4, #12]
 8007914:	2300      	movs	r3, #0
 8007916:	6063      	str	r3, [r4, #4]
 8007918:	6923      	ldr	r3, [r4, #16]
 800791a:	6023      	str	r3, [r4, #0]
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	f043 0308 	orr.w	r3, r3, #8
 8007922:	81a3      	strh	r3, [r4, #12]
 8007924:	6923      	ldr	r3, [r4, #16]
 8007926:	b94b      	cbnz	r3, 800793c <__swsetup_r+0x7c>
 8007928:	89a3      	ldrh	r3, [r4, #12]
 800792a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800792e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007932:	d003      	beq.n	800793c <__swsetup_r+0x7c>
 8007934:	4621      	mov	r1, r4
 8007936:	4628      	mov	r0, r5
 8007938:	f000 f884 	bl	8007a44 <__smakebuf_r>
 800793c:	89a0      	ldrh	r0, [r4, #12]
 800793e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007942:	f010 0301 	ands.w	r3, r0, #1
 8007946:	d00a      	beq.n	800795e <__swsetup_r+0x9e>
 8007948:	2300      	movs	r3, #0
 800794a:	60a3      	str	r3, [r4, #8]
 800794c:	6963      	ldr	r3, [r4, #20]
 800794e:	425b      	negs	r3, r3
 8007950:	61a3      	str	r3, [r4, #24]
 8007952:	6923      	ldr	r3, [r4, #16]
 8007954:	b943      	cbnz	r3, 8007968 <__swsetup_r+0xa8>
 8007956:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800795a:	d1c4      	bne.n	80078e6 <__swsetup_r+0x26>
 800795c:	bd38      	pop	{r3, r4, r5, pc}
 800795e:	0781      	lsls	r1, r0, #30
 8007960:	bf58      	it	pl
 8007962:	6963      	ldrpl	r3, [r4, #20]
 8007964:	60a3      	str	r3, [r4, #8]
 8007966:	e7f4      	b.n	8007952 <__swsetup_r+0x92>
 8007968:	2000      	movs	r0, #0
 800796a:	e7f7      	b.n	800795c <__swsetup_r+0x9c>
 800796c:	20000064 	.word	0x20000064

08007970 <_raise_r>:
 8007970:	291f      	cmp	r1, #31
 8007972:	b538      	push	{r3, r4, r5, lr}
 8007974:	4604      	mov	r4, r0
 8007976:	460d      	mov	r5, r1
 8007978:	d904      	bls.n	8007984 <_raise_r+0x14>
 800797a:	2316      	movs	r3, #22
 800797c:	6003      	str	r3, [r0, #0]
 800797e:	f04f 30ff 	mov.w	r0, #4294967295
 8007982:	bd38      	pop	{r3, r4, r5, pc}
 8007984:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8007986:	b112      	cbz	r2, 800798e <_raise_r+0x1e>
 8007988:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800798c:	b94b      	cbnz	r3, 80079a2 <_raise_r+0x32>
 800798e:	4620      	mov	r0, r4
 8007990:	f000 f830 	bl	80079f4 <_getpid_r>
 8007994:	462a      	mov	r2, r5
 8007996:	4601      	mov	r1, r0
 8007998:	4620      	mov	r0, r4
 800799a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800799e:	f000 b817 	b.w	80079d0 <_kill_r>
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d00a      	beq.n	80079bc <_raise_r+0x4c>
 80079a6:	1c59      	adds	r1, r3, #1
 80079a8:	d103      	bne.n	80079b2 <_raise_r+0x42>
 80079aa:	2316      	movs	r3, #22
 80079ac:	6003      	str	r3, [r0, #0]
 80079ae:	2001      	movs	r0, #1
 80079b0:	e7e7      	b.n	8007982 <_raise_r+0x12>
 80079b2:	2400      	movs	r4, #0
 80079b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079b8:	4628      	mov	r0, r5
 80079ba:	4798      	blx	r3
 80079bc:	2000      	movs	r0, #0
 80079be:	e7e0      	b.n	8007982 <_raise_r+0x12>

080079c0 <raise>:
 80079c0:	4b02      	ldr	r3, [pc, #8]	; (80079cc <raise+0xc>)
 80079c2:	4601      	mov	r1, r0
 80079c4:	6818      	ldr	r0, [r3, #0]
 80079c6:	f7ff bfd3 	b.w	8007970 <_raise_r>
 80079ca:	bf00      	nop
 80079cc:	20000064 	.word	0x20000064

080079d0 <_kill_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d07      	ldr	r5, [pc, #28]	; (80079f0 <_kill_r+0x20>)
 80079d4:	2300      	movs	r3, #0
 80079d6:	4604      	mov	r4, r0
 80079d8:	4608      	mov	r0, r1
 80079da:	4611      	mov	r1, r2
 80079dc:	602b      	str	r3, [r5, #0]
 80079de:	f7fa fa7f 	bl	8001ee0 <_kill>
 80079e2:	1c43      	adds	r3, r0, #1
 80079e4:	d102      	bne.n	80079ec <_kill_r+0x1c>
 80079e6:	682b      	ldr	r3, [r5, #0]
 80079e8:	b103      	cbz	r3, 80079ec <_kill_r+0x1c>
 80079ea:	6023      	str	r3, [r4, #0]
 80079ec:	bd38      	pop	{r3, r4, r5, pc}
 80079ee:	bf00      	nop
 80079f0:	200004b8 	.word	0x200004b8

080079f4 <_getpid_r>:
 80079f4:	f7fa ba6c 	b.w	8001ed0 <_getpid>

080079f8 <__swhatbuf_r>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	460c      	mov	r4, r1
 80079fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a00:	2900      	cmp	r1, #0
 8007a02:	b096      	sub	sp, #88	; 0x58
 8007a04:	4615      	mov	r5, r2
 8007a06:	461e      	mov	r6, r3
 8007a08:	da0d      	bge.n	8007a26 <__swhatbuf_r+0x2e>
 8007a0a:	89a3      	ldrh	r3, [r4, #12]
 8007a0c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a10:	f04f 0100 	mov.w	r1, #0
 8007a14:	bf0c      	ite	eq
 8007a16:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007a1a:	2340      	movne	r3, #64	; 0x40
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	6031      	str	r1, [r6, #0]
 8007a20:	602b      	str	r3, [r5, #0]
 8007a22:	b016      	add	sp, #88	; 0x58
 8007a24:	bd70      	pop	{r4, r5, r6, pc}
 8007a26:	466a      	mov	r2, sp
 8007a28:	f000 f848 	bl	8007abc <_fstat_r>
 8007a2c:	2800      	cmp	r0, #0
 8007a2e:	dbec      	blt.n	8007a0a <__swhatbuf_r+0x12>
 8007a30:	9901      	ldr	r1, [sp, #4]
 8007a32:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007a36:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007a3a:	4259      	negs	r1, r3
 8007a3c:	4159      	adcs	r1, r3
 8007a3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a42:	e7eb      	b.n	8007a1c <__swhatbuf_r+0x24>

08007a44 <__smakebuf_r>:
 8007a44:	898b      	ldrh	r3, [r1, #12]
 8007a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a48:	079d      	lsls	r5, r3, #30
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	d507      	bpl.n	8007a60 <__smakebuf_r+0x1c>
 8007a50:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	6123      	str	r3, [r4, #16]
 8007a58:	2301      	movs	r3, #1
 8007a5a:	6163      	str	r3, [r4, #20]
 8007a5c:	b002      	add	sp, #8
 8007a5e:	bd70      	pop	{r4, r5, r6, pc}
 8007a60:	ab01      	add	r3, sp, #4
 8007a62:	466a      	mov	r2, sp
 8007a64:	f7ff ffc8 	bl	80079f8 <__swhatbuf_r>
 8007a68:	9900      	ldr	r1, [sp, #0]
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	4630      	mov	r0, r6
 8007a6e:	f7fe febd 	bl	80067ec <_malloc_r>
 8007a72:	b948      	cbnz	r0, 8007a88 <__smakebuf_r+0x44>
 8007a74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a78:	059a      	lsls	r2, r3, #22
 8007a7a:	d4ef      	bmi.n	8007a5c <__smakebuf_r+0x18>
 8007a7c:	f023 0303 	bic.w	r3, r3, #3
 8007a80:	f043 0302 	orr.w	r3, r3, #2
 8007a84:	81a3      	strh	r3, [r4, #12]
 8007a86:	e7e3      	b.n	8007a50 <__smakebuf_r+0xc>
 8007a88:	89a3      	ldrh	r3, [r4, #12]
 8007a8a:	6020      	str	r0, [r4, #0]
 8007a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a90:	81a3      	strh	r3, [r4, #12]
 8007a92:	9b00      	ldr	r3, [sp, #0]
 8007a94:	6163      	str	r3, [r4, #20]
 8007a96:	9b01      	ldr	r3, [sp, #4]
 8007a98:	6120      	str	r0, [r4, #16]
 8007a9a:	b15b      	cbz	r3, 8007ab4 <__smakebuf_r+0x70>
 8007a9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007aa0:	4630      	mov	r0, r6
 8007aa2:	f000 f81d 	bl	8007ae0 <_isatty_r>
 8007aa6:	b128      	cbz	r0, 8007ab4 <__smakebuf_r+0x70>
 8007aa8:	89a3      	ldrh	r3, [r4, #12]
 8007aaa:	f023 0303 	bic.w	r3, r3, #3
 8007aae:	f043 0301 	orr.w	r3, r3, #1
 8007ab2:	81a3      	strh	r3, [r4, #12]
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	431d      	orrs	r5, r3
 8007ab8:	81a5      	strh	r5, [r4, #12]
 8007aba:	e7cf      	b.n	8007a5c <__smakebuf_r+0x18>

08007abc <_fstat_r>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	4d07      	ldr	r5, [pc, #28]	; (8007adc <_fstat_r+0x20>)
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	4608      	mov	r0, r1
 8007ac6:	4611      	mov	r1, r2
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	f7fa fa68 	bl	8001f9e <_fstat>
 8007ace:	1c43      	adds	r3, r0, #1
 8007ad0:	d102      	bne.n	8007ad8 <_fstat_r+0x1c>
 8007ad2:	682b      	ldr	r3, [r5, #0]
 8007ad4:	b103      	cbz	r3, 8007ad8 <_fstat_r+0x1c>
 8007ad6:	6023      	str	r3, [r4, #0]
 8007ad8:	bd38      	pop	{r3, r4, r5, pc}
 8007ada:	bf00      	nop
 8007adc:	200004b8 	.word	0x200004b8

08007ae0 <_isatty_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	4d06      	ldr	r5, [pc, #24]	; (8007afc <_isatty_r+0x1c>)
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	4604      	mov	r4, r0
 8007ae8:	4608      	mov	r0, r1
 8007aea:	602b      	str	r3, [r5, #0]
 8007aec:	f7fa fa67 	bl	8001fbe <_isatty>
 8007af0:	1c43      	adds	r3, r0, #1
 8007af2:	d102      	bne.n	8007afa <_isatty_r+0x1a>
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	b103      	cbz	r3, 8007afa <_isatty_r+0x1a>
 8007af8:	6023      	str	r3, [r4, #0]
 8007afa:	bd38      	pop	{r3, r4, r5, pc}
 8007afc:	200004b8 	.word	0x200004b8

08007b00 <_init>:
 8007b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b02:	bf00      	nop
 8007b04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b06:	bc08      	pop	{r3}
 8007b08:	469e      	mov	lr, r3
 8007b0a:	4770      	bx	lr

08007b0c <_fini>:
 8007b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b0e:	bf00      	nop
 8007b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b12:	bc08      	pop	{r3}
 8007b14:	469e      	mov	lr, r3
 8007b16:	4770      	bx	lr
